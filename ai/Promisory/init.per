
;======================================================================
; Strategic-numbers, goals, etc.
;======================================================================
(defrule
	(strategic-number sn-attack-intelligence == 1)
=>
	(up-jump-rule 32))
(defrule
	(true)
=>
	(set-strategic-number sn-attack-intelligence 1)
	(set-strategic-number sn-attack-separation-time-randomness 0)
	(set-strategic-number sn-attack-winning-player 1)
	(set-strategic-number sn-attack-winning-player-factor 1)
	(set-strategic-number sn-attack-group-size-randomness 0)
	(set-strategic-number sn-attack-group-gather-spacing 5)
	(set-strategic-number sn-consecutive-idle-unit-limit diff-id)
	(up-modify-sn sn-consecutive-idle-unit-limit c:- diff-fp)
	(up-modify-sn sn-consecutive-idle-unit-limit c:max 0)
	(set-strategic-number sn-garrison-rams 0)
	(set-strategic-number sn-ignore-attack-group-under-attack 0)
	(set-strategic-number sn-initial-attack-delay 0)
	(set-strategic-number sn-initial-attack-delay-type 0)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0); 8
	(set-strategic-number sn-disable-sighted-response-cap 0)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(set-strategic-number sn-number-defend-groups 0)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-defend-group-size 1)
	(set-strategic-number sn-maximum-defend-group-size 1)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-group-form-distance 40)
	(set-strategic-number sn-group-commander-selection-method 0)
	(set-strategic-number sn-group-leader-defense-distance 3)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon			500)
	(set-strategic-number sn-target-evaluation-damage-capability	20)
	(set-strategic-number sn-target-evaluation-in-progress			0)
	(set-strategic-number sn-target-evaluation-distance				0)
	(set-strategic-number sn-target-evaluation-hitpoints			0)
	(set-strategic-number sn-target-evaluation-range				0)
	(set-strategic-number sn-target-evaluation-rof					0)
	(set-strategic-number sn-target-evaluation-time-kill-ratio		50)
	(set-strategic-number sn-target-evaluation-attack-attempts		0)
	(set-strategic-number sn-target-evaluation-ally-proximity		0)
	(set-strategic-number sn-target-evaluation-randomness			0)
	(set-strategic-number sn-target-evaluation-boat					0)
	(set-strategic-number sn-target-evaluation-continent			0)
	(set-strategic-number sn-target-evaluation-kills				0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-sentry-distance 12); 10
	(set-strategic-number sn-sentry-distance-variation 0)
	(set-strategic-number sn-dock-defend-priority 1)
	(set-strategic-number sn-town-defend-priority 1)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-forage-defend-priority 1)
	(set-strategic-number sn-relic-defend-priority 1)
	(set-strategic-number sn-livestock-defend-priority 1)
	(set-strategic-number sn-special-attack-type1 -1)
	(set-strategic-number sn-special-attack-type2 -1)
	(set-strategic-number sn-special-attack-type3 -1)
;	(set-strategic-number sn-special-attack-influence1 100); 10000
;	(set-strategic-number sn-special-attack-influence2 100); 10000
;	(set-strategic-number sn-special-attack-influence3 100); 10000
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-max-build-plan-gatherer-percentage 100)
	(set-strategic-number sn-food-dropsite-distance 3)
	(set-strategic-number sn-wood-dropsite-distance 3)
	(set-strategic-number sn-gold-dropsite-distance 3)
	(set-strategic-number sn-stone-dropsite-distance 3)
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-maximum-fish-boat-drop-distance -1)
	(set-strategic-number sn-defend-overlap-distance 1)
	(set-strategic-number sn-defense-distance 3)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-military-superiority 0)
	(set-strategic-number sn-dock-placement-mode 0)
	(set-strategic-number sn-cap-civilian-builders 200)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-cap-civilian-gatherers 1000)
	(set-strategic-number sn-percent-civilian-builders 100)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-gatherers 100)
;	(set-strategic-number sn-number-forward-builders 0)
	(set-strategic-number sn-minimum-dropsite-buffer 13)
	(set-strategic-number sn-maximum-gaia-attack-response 3); 2
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-max-retask-gather-amount 0)
	(set-strategic-number sn-retask-gather-amount 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-use-by-type-max-gathering 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1500)
	(set-strategic-number sn-max-skips-per-attempt 1)
	(set-strategic-number sn-number-build-attempts-before-skip 1)
	(set-strategic-number sn-number-max-skip-cycles 1)
	(set-strategic-number sn-random-placement-factor 0)
	(set-strategic-number sn-required-forest-tiles 10)
	(set-strategic-number sn-camp-max-distance 12)
	(set-strategic-number sn-mill-max-distance 18)
	(set-strategic-number sn-minimum-town-size 3)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-minimum-peace-like-level 51)
;	(set-strategic-number sn-relic-return-distance 480)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-dock-training-filter 1)
	(set-strategic-number sn-zero-priority-distance 480)
	(set-strategic-number sn-initial-exploration-required 0)
;	(set-strategic-number sn-percent-half-exploration 30); default
;	(set-strategic-number sn-percent-exploration-required 0)
	(set-strategic-number sn-number-enemy-objects-required 1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-boat-explore-groups 1)
;	(set-strategic-number sn-percentage-explore-exterminators 0)
	(set-strategic-number sn-minimum-explore-group-size 1)
	(set-strategic-number sn-maximum-explore-group-size 1)
	(set-strategic-number sn-minimum-boat-explore-group-size 1)
	(set-strategic-number sn-maximum-boat-explore-group-size 1)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-blot-exploration-map 0)
	(set-strategic-number sn-blot-size 1)
	(set-strategic-number target-military-superiority 0)
	(set-strategic-number sn-build-frequency 1)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-easiest-reaction-percentage 100)
	(set-strategic-number sn-easier-reaction-percentage 100)
	(set-strategic-number sn-scaling-frequency 10)
	(set-strategic-number sn-coop-share-attacking 1)
	(set-strategic-number sn-coop-share-attacking-interval 2)
	(set-strategic-number infantry 0)
	(set-strategic-number archers 0)
	(set-strategic-number cavalry 0)
	(set-strategic-number gunpowder 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number cavarchers 0)
	(set-strategic-number moenche 0)
	(set-strategic-number siege 0)
	(set-strategic-number sn-coop-share-information 1)
	(set-goal enemyState dark)
	(set-goal TSA-goal 0)
	(set-strategic-number sn-ttkfactor-scalar 300); 500
	(set-goal fg-var no)
	(up-set-target-point target-point-x)
	(set-goal enemy-goal 0)
	(set-goal enemy-goal2 0)
	(set-goal teamsuperiority-number 0)
	(set-goal dreitc no)
	(set-goal fleet yes)
	(disable-self))
(defrule
	(true)
=>
	(set-goal enemy-boats no)
	(set-goal difficulty-adjustment 0)
	(set-goal increase-ts 0)
	(set-goal escrowing no)
	(set-strategic-number sn-preferred-trade-distance preftradedist)
	(set-goal allowed-num-military 16384)
	(set-goal retreat yes)
	(set-goal rebuildcamp yes)
	(set-goal gatherunits no)
	(set-goal defend no); dead vills
	(set-goal relocating no)
	(set-goal researchplan no) ; research plan not completed
	(set-goal retargetenemy yes)
	(set-goal attacking no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal spreadunits no)
	(up-setup-cost-data 1 cost-food);	(up-reset-cost-data cost-food)
	(set-strategic-number sn-unexplored-construction 0); !
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(set-strategic-number sn-number-boat-attack-groups 0)
	(set-difficulty-parameter ability-to-dodge-missiles ability-to-dodge)
	(set-difficulty-parameter ability-to-maintain-distance ability-to-kite)
	(set-escrow-percentage food 0)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(set-goal map water)
	(set-goal underattack no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal attackmethod TSA)
	(set-goal nomaden no)
	(set-strategic-number sn-current-age dark)
	(set-goal allowspears yes)
	(set-goal allowskirms yes)
	(set-goal retreatnow no)
	(set-goal scoutg no)
	(set-goal stanceg no)
	(set-goal request no)
	(set-goal wwonder no)
	(set-goal inseln no)
	(set-goal siegereq no)
	(set-goal patroldefense no)
	(set-goal reset yes)
	(disable-self))
(defrule
	(true)
=>
	(set-goal market-flare 0)
	(set-goal unit-flare 0)
	(set-goal math-goal 0)
	(set-goal attackInProgress no)
	(set-strategic-number sn-object-repair-level 1)
	(set-strategic-number sn-enable-training-queue 0)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-dock-proximity-factor -50); -1 ; 10000; -100
	(set-strategic-number sn-dock-avoidance-factor 500); -1 ; 1000
	(set-goal gl-threat-time 0)
	(set-goal gl-threat-player 0)
	(set-goal gl-threat-source 0)
	(set-goal gl-threat-target 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal siegeretreat no)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-disable-tower-priority 1)
	(set-strategic-number sn-wall-targeting-mode 1)
	(set-strategic-number sn-enable-offensive-priority 1)
	(up-set-defense-priority c: stone-wall-line c: 1); 0
	(up-set-defense-priority c: palisade-wall c: 3000); 2
	(up-set-defense-priority c: gate-class c: 1250); 2
	(up-set-offense-priority c: stone-wall-line c: 0)
	(up-set-offense-priority c: palisade-wall c: 2); 1
	(up-set-offense-priority c: gate-class c: 2)
	(set-strategic-number sn-local-targeting-mode 1)
	(set-strategic-number sn-enable-patrol-attack 1)
	(set-goal boar-captured 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal defendchat yes)
	(set-strategic-number teambalance 0)
	(set-goal queue yes)
	(set-strategic-number sn-wood-gatherer-percentage 0)
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-goal gr-var 1)
	(up-set-defense-priority c: wonder c: 32767)
	(up-set-offense-priority c: wonder c: 11)
	(set-goal assistance no)
	(set-goal position-goal flank)
	(set-goal target-pop 0)
	(set-goal target-mpop 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal attacknotifier no)
	(set-goal block-attacking no)
	(set-goal maa-var no)
	(set-goal group0-state-flag 0)
	(set-strategic-number teamsuperiority 0)
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal drushtarget 0)
	(set-goal selectdrushwaypoint 0)
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-strategic-number sn-wood-modifier-percentage 0)
	(set-strategic-number sn-food-modifier-percentage 0)
	(set-strategic-number sn-gold-modifier-percentage 0)
	(set-strategic-number sn-stone-modifier-percentage 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal landnomad no)
	(set-goal loom-dist noloom)
	(set-goal group1-state-flag 0)
	(set-goal group2-state-flag 0)
	(set-goal maxfarms 1000)
	(set-goal rescout no)
	(set-goal retask no)
	(set-goal feudalvills 0)
	(set-goal deer-luring 0)
	(set-goal drushmicro no)
	(set-goal tradecarts no)
	(set-goal data 0)
	(set-strategic-number sn-wild-animal-exploration 1)
	(set-strategic-number sn-disable-trade-evasion 1)
	(disable-self))
(defrule
	(true)
=>
	(set-goal escrow-flag 0)
	(set-goal gatherinside yes)
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes)
	(set-goal strategy-type -1)
	(set-goal enemysling 0)
	(generate-random-number 100)
	(up-get-fact random-number 0 gl-random-number)
	(set-goal distancegoal 0)
	(set-goal buildmill no)
	(set-goal buildlumber no)
	(set-goal spears yes)
	(set-goal uugoal no)
	(set-goal urgoal no)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-disable-builder-assistance 1)
	(set-goal livestock-switch -1)
	(set-goal livestock-place -50)
	(set-goal pocketcheck 0)
	(set-goal strategy-type2 land)
	(set-goal champgoal no)
	(set-goal scoutmicro no)
	(set-goal scouting yes)
	(set-strategic-number sn-safe-town-size 32); 30
	(set-goal comsystem 3453)
	(set-goal identity Promi)
	(set-goal aggressivestrat 0); 1 = looking for aggressive strat ; 24 = success
	(set-goal alliedplayer 0)
	(disable-self))
(defrule
	(true)
=>
	(up-assign-builders c: fish-trap c: -1)
	(set-goal strategylocked no)
	(set-goal armytech dark)
;	(set-goal targetdistance 100)
	(set-goal resign no)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-enable-boar-hunting 0)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-number-hunters 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1000); 0
	(up-get-point position-map-size temporary-point-x)
	(up-modify-goal map-size g:= temporary-point-x)
	(set-goal allowdmstable no)
	(set-goal allowdmarchery no)
	(set-goal allowdmbarracks no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal cozy 0)
	(set-goal navycount 0)
	(set-goal biggestenemynavy 0)
	(set-goal enemyfocusnavy 0)
	(set-goal maxnavy minNavy); 0
	(set-strategic-number husks 0)
	(set-strategic-number eagles 0)
	(set-strategic-number spears 0)
	(set-goal sum-villagers 0)
	(set-goal wood-villagers 0)
	(set-goal food-villagers 0)
	(set-goal gold-villagers 0)
	(set-goal stone-villagers 0)
	(set-goal fishing no)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number skirms 0)
	(set-strategic-number skirmsarchers 0)
	(set-strategic-number moenchesiege 0)
	(set-goal patrolhelp no)
	(up-set-defense-priority c: market c: 250)
	(up-set-offense-priority c: market c: 2)
	(set-goal skip-target no)
	(set-goal group3-state-flag 0)
	(set-goal group4-state-flag 0)
	(set-goal group5-state-flag 0)
	(set-goal ep-pop 0)
	(set-goal ep-cpop 0)
	(set-goal ep-mpop 0)
	(set-goal ep-stables 0)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-free-siege-targeting 1)
;	(up-set-offense-priority c: war-elephant c: 10)
;	(up-set-offense-priority c: knight c: 10)
;	(up-set-offense-priority c: cataphract c: 10)
;	(up-set-offense-priority c: tarkan c: 10)
;	(up-set-offense-priority c: teutonic-knight c: 10)
;	(up-set-offense-priority c: war-wagon c: 10)
;	(up-set-offense-priority c: janissary c: 9)
;	(up-set-offense-priority c: conquistador c: 9)
;	(up-set-offense-priority c: mameluke c: 10)
;	(up-set-offense-priority c: huskarl c: 10)
;	(up-set-offense-priority c: hand-cannoneer c: 9)
;	(up-set-offense-priority c: eagle-warrior c: 9)
	(disable-self))
(defrule
	(true)
=>
	(up-set-offense-priority c: monk c: 11)
;	(up-set-offense-priority c: scout-cavalry c: 8)
;	(up-set-offense-priority c: militiaman c: 8)
;	(up-set-offense-priority c: jaguar-man c: 8)
;	(up-set-offense-priority c: woad-raider c: 8)
;	(up-set-offense-priority c: berserk c: 8)
;	(up-set-offense-priority c: samurai c: 8)
;	(up-set-offense-priority c: spearman c: 9)
;	(up-set-offense-priority c: camel c: 8)
	(up-set-offense-priority c: demolition-ship c: 11)
	(up-set-offense-priority c: transport-ship c: 7); 10
;	(up-set-offense-priority c: turtle-ship c: 9)
;	(up-set-offense-priority c: fire-ship c: 9)
;	(up-set-offense-priority c: galley c: 8)
	(disable-self))
(defrule
	(true)
=>
;	(up-set-offense-priority c: longboat c: 9)
	(up-set-offense-priority c: missionary c: 11)
	(up-set-offense-priority c: unpacked-trebuchet c: 9); 10
	(up-set-offense-priority c: trebuchet c: 3); 6
;	(up-set-offense-priority c: throwing-axeman c: 8)
;	(up-set-offense-priority c: mangudai c: 8)
;	(up-set-offense-priority c: cavalry-archer c: 6)
;	(up-set-offense-priority c: chu-ko-nu c: 7)
;	(up-set-offense-priority c: plumed-archer c: 6)
;	(up-set-offense-priority c: archer c: 6)
;	(up-set-offense-priority c: longbowman c: 5)
	(up-set-offense-priority c: 904 c: 3); 7
;	(up-set-offense-priority c: skirmisher c: 0)
	(disable-self))
(defrule
	(true)
=>
	(up-set-offense-priority c: king-class c: 11)
;	(up-set-offense-priority c: fishing-ship c: 7)
	(set-goal delete-flag 0)
	(set-goal sk-var no)
	(set-goal kr-var 2)
	(set-strategic-number sn-placement-zone-size 9); 20
	(set-goal escrow-state with-escrow)
	(set-goal verbuendete -1)
	(set-goal feinde -1)
	(set-goal minBoar 12)
	(up-set-defense-priority c: house c: 1500); 2
	(up-set-offense-priority c: house c: 1)
	(enable-wall-placement 2)
	(set-strategic-number sn-disable-villager-garrison 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal group6-state-flag 0)
	(set-goal escrow-flag2 0)
	(set-goal wood-gpp 0)
	(set-goal food-gpp 0)
	(set-goal gold-gpp 0)
	(set-goal excessWood 0)
	(set-goal excessFood 0)
	(set-goal excessGold 0)
	(set-goal excessStone 0)
	(set-goal scoreTarget 0)
	(set-goal scoreTLast 0)
	(set-goal scoreTDiff 0)
	(set-goal tower-garrison-time 0)
	(set-goal shore-count 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal map-treatment-switch-time 0)
	(set-goal palagoal no)
	(set-strategic-number camels 0)
	(up-modify-escrow wood c:= 0)
	(up-modify-escrow food c:= 0)
	(up-modify-escrow gold c:= 0)
	(up-modify-escrow stone c:= 0)
	(up-release-escrow)
	(set-goal c-scout-time 930); 900; 960
	(up-full-reset-search)
	(up-modify-goal feitoria-cap c:= up-max-civ)
	(up-modify-goal feitoria-cap c:z/ 60)
	(up-modify-goal feitoria-cap c:min feitoria-diff)
	(set-goal walled no)
	(disable-self))
(defrule
	(true)
=>
	(set-goal battle-elephant-set 0)
	(set-goal caravel-set 0)
	(set-goal skirmisher-set 0)
	(set-goal mangonel-set 0)
	(up-modify-goal temporary-goal c:= home-exploration-time)
	(up-modify-goal temporary-goal c:* home-exploration-mod1)
	(up-modify-goal temporary-goal c:/ home-exploration-mod2)
	(up-modify-sn sn-home-exploration-time g:= temporary-goal)
	(set-goal camel-set 0)
	(set-goal cavagoal no)
	(set-goal transport-state 0)
	(set-goal migration-state 0)
	(set-goal camp-walls 0)
	(set-goal forward-flag 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal group7-state-flag 0)
	(set-goal group8-state-flag 0)
	(set-goal group9-state-flag 0)
	(up-get-point position-self position-self-x)
	(set-goal escrow-flag3 0)
	(set-goal request2 no)
	(set-strategic-number sn-number-tasked-units 0); 1
	(set-goal ttower-distance 65535)
	(up-get-fact civilization 0 civilization-id)
	(up-set-defense-priority c: feitoria c: 3500)
	(up-set-offense-priority c: feitoria c: 6)
	(up-get-point position-center center-x)
	(up-set-defense-priority c: outpost c: 1500); 2
	(up-set-offense-priority c: outpost c: 1)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-track-player-history 0)
	(up-assign-builders c: palisade-wall c: 1)
	(enable-timer stance-timer 30)
	(enable-timer threesec 3)
	(enable-timer fivesec 5)
	(enable-timer embassy 10)
	(enable-timer fifteensec 15)
	(enable-timer twentysec 20)
	(enable-timer MSuperiority 30)
	(enable-timer one-min 60)
	(enable-timer two-mins 120)
	(set-strategic-number sn-enable-research-queue 1)
	(set-goal sheepdiffgoal 0)
	(set-goal sheepcounter 0)
	(disable-self))
(defrule
	(true)
=>
	(set-goal mysheep 0)
	(set-goal totalsheep 0)
	(set-goal boardiffgoal 0)
	(set-goal boarcounter 0)
	(set-goal myboars 0)
	(set-goal totalboars 0)
	(disable-self)); end init disable-self & jump
#load-if-not-defined REVEAL-NORMAL
(defrule
	(true)
=>
	(set-strategic-number sn-unexplored-construction 1)
	(disable-self))
#end-if



#load-if-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal position-goal != pocket)
=>
	(set-goal position-goal pocket))
#else
(defrule
	(up-compare-goal position-goal != flank)
=>
	(set-goal position-goal flank))
#end-if
(defrule
(or	(up-compare-goal nomaden != no)
	(up-compare-goal landnomad != no))
	(up-compare-goal position-goal != flank)
	(strategic-number sn-current-age <= imperial)
(nand	(players-building-count every-enemy >= 1)
	(up-compare-goal targetdistance >= 126)); 144
=>
	(set-goal position-goal flank))
#load-if-defined UP-MICHI-STYLE
(defrule
	(up-compare-goal position-goal != pocket)
=>
	(set-goal position-goal pocket))
#end-if

(defrule
(or	(up-timer-status twentysec == timer-running)
	(and	(strategic-number teambalance == 0)
		(and	(goal verbuendete 0)
			(goal feinde 1))))
=>
	(up-jump-rule 5))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal verbuendete 0)
	(set-goal feinde 0))
(defrule; end neg jump
(or	(players-stance focus-player ally)
	(stance-toward focus-player ally))
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
=>
	(up-modify-goal verbuendete c:+ 1)
	(up-jump-rule 1))
(defrule
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
=>	
	(up-modify-goal feinde c:+ 1))
(defrule
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(set-strategic-number teambalance 1)
	(up-modify-sn teambalance g:+ verbuendete)
	(up-modify-sn teambalance g:- feinde)
	(up-modify-sn teambalance c:max -1)
	(up-modify-sn teambalance c:min 1)); end jump


(defrule
	(true)
=>
	(set-goal attackStart no)
	(set-goal retreat-flag 0)
	(up-get-threat-data gl-threat-time gl-threat-player gl-threat-source gl-threat-target)
	(up-find-player enemy find-attacker attacking-enemy)
	(up-get-fact population 0 my-pop)
	(up-get-fact civilian-population 0 my-cpop)
	(up-get-fact military-population 0 my-mpop)
	(up-get-fact unit-type-count villager villagercount)
	(up-get-fact unit-type-count-total villager villagercounttotal)
	(up-modify-goal villagercount c:min 240)
	(up-modify-goal villagercounttotal c:min 240)
	(up-get-fact unit-type-count-total militiaman-line champcount)
	(up-get-fact food-amount 0 total-food-amount)
	(up-modify-goal attacknotifier g:= attacking)
	(up-get-fact resource-amount amount-relics relic-count))
(defrule
	(true)
=>
	(up-get-fact unit-type-count-total trade-cart temporary-goal)
	(up-modify-goal tradeunits g:= temporary-goal)
	(up-get-fact unit-type-count-total trade-cog temporary-goal)
	(up-modify-goal tradeunits g:+ temporary-goal)
	(up-get-fact unit-type-count-total kamayuk temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal spearcount g:= temporary-goal)
	(up-get-fact unit-type-count-total spearman-line temporary-goal)
	(up-modify-goal spearcount g:+ temporary-goal)
	(up-get-fact unit-type-count-total skirmisher-line skirmcount)
	(set-goal control-goal 0)
	(set-goal search-action -1)
	(up-get-fact warboat-count 0 navycount)
	(set-strategic-number sn-disable-builder-assistance 1))
(defrule
	(true)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0))
#load-if-defined UP-GAME-WK
(defrule
	(players-unit-type-count every-enemy karambit-warrior <= 0); 1 for
	(players-unit-type-count every-enemy elite-karambit-warrior <= 0); 1 now
(or	(unit-type-count karambit-warrior >= 2)
	(unit-type-count elite-karambit-warrior >= 2))
=>
	(up-get-fact unit-type-count karambit-warrior temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-get-fact unit-type-count elite-karambit-warrior temporary-goal2)
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal c:- 1)
	(up-modify-goal temporary-goal c:/ 2)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal my-mpop g:- temporary-goal))
#end-if
(defrule
	(up-compare-const relic-boost != 100)
	(up-compare-goal relic-count >= 1)
	(building-type-count monastery >= 1); nn but also nn
=>
	(up-modify-goal relic-count c:* relic-boost)
	(up-modify-goal relic-count c:/ 100))
(defrule
	(up-compare-const trade-boost != 100)
	(up-compare-goal tradeunits >= 1)
;	(players-building-type-count any-ally market >= 1); nn but also nn
(or	(building-type-count market >= 1); nn but also nn
	(building-type-count dock >= 1))
=>
	(up-modify-goal tradeunits c:* trade-boost)
	(up-modify-goal tradeunits c:/ 100))
(defrule
	(true)
=>
	(up-modify-goal tradeunits g:+ relic-count)
	(up-modify-goal tradeunits g:+ relic-count))
(defrule
	(up-research-status c: ri-sultans >= research-complete)
(or	(up-compare-goal relic-count >= 1)
	(up-compare-goal tradeunits >= 1))
=>
	(up-modify-goal relic-count c:* 21)
	(up-modify-goal relic-count c:/ 20)
	(up-modify-goal tradeunits c:* 21)
	(up-modify-goal tradeunits c:/ 20))
(defrule
	(true)
=>
	(up-get-fact unit-type-count turtle-ship-line temporary-goal)
;	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal navycount g:+ temporary-goal)
	(set-strategic-number sn-free-siege-targeting 1)
	(set-strategic-number sn-gather-idle-soldiers-at-center 0)
	(up-get-fact wood-amount 0 excessWood)
	(up-get-fact escrow-amount wood temporary-goal)
	(up-modify-goal excessWood g:- temporary-goal)
	(up-get-fact food-amount 0 excessFood)
	(up-get-fact escrow-amount food temporary-goal)
	(up-modify-goal excessFood g:- temporary-goal)
	(up-get-fact gold-amount 0 excessGold)
	(up-get-fact escrow-amount gold temporary-goal)
	(up-modify-goal excessGold g:- temporary-goal)
	(up-get-fact stone-amount 0 excessStone))
(defrule
	(true)
=>
	(up-get-fact escrow-amount stone temporary-goal)
	(up-modify-goal excessStone g:- temporary-goal)
	(up-get-fact building-type-count-total feitoria temporary-goal)
	(up-modify-goal tradeunits g:+ temporary-goal)
	(up-modify-goal tradeunits g:+ temporary-goal)
	(up-modify-goal temporary-goal c:* 15); 20
	(up-modify-goal my-cpop g:+ temporary-goal)
	(up-get-fact civilian-population 0 custom-civ-pop)
	(up-modify-goal custom-civ-pop g:+ temporary-goal)
	(up-modify-goal custom-civ-pop g:+ relic-count)
;	(up-get-precise-time 0 start-time)
	(up-get-victory-data winning-player victory-type victory-time)
	(set-strategic-number sn-allow-civilian-defense 1)
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-number-civilian-militia 0))
(defrule
	(true)
=>
	(set-goal siegeretreat no)
	(set-goal farm-goal 0)
	(set-goal jump-rule-goal 0)
	(set-goal next-rule-id 0)
	(set-goal temporary-goal -1)
	(set-goal temporary-goal2 -1)
	(set-goal temporary-goal3 -1)
	(set-goal temporary-goal4 -1)
	(set-goal temporary-goal5 -1)
	(set-goal temporary-goal6 -1)
	(set-goal temporary-goal7 -1)
	(set-goal temporary-goal8 -1)
	(set-goal temporary-goal9 -1)
	(set-goal temporary-goal10 -1)
	(set-goal temporary-goal11 -1))
(defrule
	(true)
=>
	(up-get-fact stone-amount 0 total-stone-amount)
	(up-get-fact gold-amount 0 total-gold-amount)
	(up-get-fact wood-amount 0 total-wood-amount)
	(set-strategic-number target-civilian-superiority 0)
	(set-strategic-number sn-gather-defense-units 1)
	(up-get-fact unit-type-count livestock-class mysheep)
	(up-assign-builders c: town-center-foundation c: 1)
	(set-goal target-pop 0)
	(set-goal target-cpop 0)
	(set-goal target-mpop 0)
	(up-get-fact treaty-time 0 gl-treaty-time)
	(set-goal resign-mpop thirty-pop)
	(up-modify-goal resign-mpop g:* feinde)
	(up-modify-goal resign-mpop c:max thirty-pop)
	(up-modify-goal resign-mpop c:* -1))
(defrule
	(true)
=>
	(up-get-fact game-time 0 gl-game-time)
	(set-strategic-number sn-target-point-adjustment adjust-middle)
	(set-strategic-number sn-dock-training-filter 1)); end init 2

(defrule
	(true)
=>
	(up-get-fact unit-type-count-total skirmisher-line skirmisher-set)
	(up-get-fact unit-type-count-total genitour temporary-goal)
	(up-get-fact unit-type-count-total elite-genitour temporary-goal2)
	(up-get-fact unit-type-count-total genitour-placeholder temporary-goal3)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total mangonel-line mangonel-set)
	(up-get-fact unit-type-count-total camel-line camel-set))
(defrule
	(up-compare-const de-game != 1)
=>
	(up-get-fact unit-type-count-total imperial-skirmisher temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal skirmisher-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total 699 temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal mangonel-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total 701 temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal mangonel-set g:+ temporary-goal)
	(up-get-fact unit-type-count-total imperial-camel temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal camel-set g:+ temporary-goal))
#load-if-defined UP-GAME-WK
(defrule
	(true)
=>
	(up-get-fact unit-type-count-total battle-elephant battle-elephant-set)
	(up-get-fact unit-type-count-total elite-battle-elephant temporary-goal)
	(up-modify-goal battle-elephant-set g:+ temporary-goal)
	(up-modify-goal battle-elephant-set c:max 0)
	(up-get-fact unit-type-count-total ballista-elephant ballista-elephant-set)
	(up-get-fact unit-type-count-total elite-ballista-elephant temporary-goal)
	(up-modify-goal ballista-elephant-set g:+ temporary-goal)
	(up-modify-goal ballista-elephant-set c:max 0)
	(up-get-fact unit-type-count-total caravel caravel-set)
	(up-get-fact unit-type-count-total elite-caravel temporary-goal)
	(up-modify-goal caravel-set g:+ temporary-goal)
	(up-modify-goal caravel-set c:max 0))
#end-if


(defrule
(or	(up-compare-goal focus-pop <= -1)
(or	(up-compare-goal focus-cpop <= -1)
	(up-compare-goal focus-mpop <= -1)))
=>
	(up-modify-goal focus-pop g:= my-pop)
	(up-modify-goal focus-pop c:min del-civ-pop)
	(up-modify-goal focus-cpop g:= my-cpop)
	(up-modify-goal focus-cpop c:min up-max-civ)
	(up-modify-goal focus-mpop g:= my-mpop)
	(up-modify-goal focus-mpop c:min 1)
	(disable-self))
(defrule
	(players-building-count any-enemy >= 1)
	(strategic-number sn-focus-player-number >= 1)
	(strategic-number sn-focus-player-number <= 8)
=>
	(up-get-focus-fact population 0 focus-pop)
	(up-get-focus-fact civilian-population 0 focus-cpop)
	(up-get-focus-fact military-population 0 focus-mpop))

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(true)
=>
	(set-strategic-number sn-enable-new-building-system 1)
	(disable-self))
#load-if-not-defined SICILIANS-CIV
(defrule
	(building-type-count town-center >= 1)
(or	(up-compare-const dm-game != 1)
	(unit-type-count-total villager >= 16)); 24
=>
	(up-assign-builders c: town-center-foundation c: 4)
;	(disable-self)
)
#else
(defrule
	(building-type-count town-center >= 1)
(or	(up-compare-const dm-game != 1)
	(unit-type-count-total villager >= 15)); 20
(or	(up-compare-goal excessFood < 200)
	(up-compare-goal excessWood < 160))
=>
	(up-assign-builders c: town-center-foundation c: 3)
;	(disable-self)
)
#end-if
(defrule
	(current-age == feudal-age)
	(current-age-time < 30)
	(building-type-count town-center == 1)
	(building-type-count-total town-center <= 2)
	(unit-type-count-total villager >= 16)
=>
	(up-assign-builders c: town-center-foundation c: 6)
;	(disable-self)
)
(defrule
; test	(building-type-count-total town-center >= 1)
	(building-type-count town-center <= 0)
=>
	(up-assign-builders c: town-center-foundation c: 20)
;	(disable-self)
)
(defrule
	(building-type-count town-center <= 0);	(building-type-count-total town-center <= 0)
	(game-time < 600)
	(goal nomaden yes)
	(up-compare-goal landnomad >= yes);	(goal landnomad yes)
	(up-pending-objects c: house <= 0)
	(housing-headroom < 5)
	(population-headroom > 0)
;(or	(wood-amount < 30)
;	(and	(wood-amount < 305)
;		(building-type-count-total town-center <= 0)))
(not	(civ-selected hun))
=>
	(up-assign-builders c: town-center-foundation c: LN-TC-builders)
;	(disable-self)
)
(defrule
(or	(population >= max-civ-pop)
(or	(civilian-population >= up-max-civ)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(and	(up-compare-const dm-game == 1)
		(unit-type-count-total villager < 16))))); 24
	(building-type-count town-center >= 1)
=>
	(up-assign-builders c: town-center-foundation c: 1)
;	(disable-self)
)
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(building-type-count town-center >= 1)
(or	(and	(up-compare-const dm-game != 1)
		(up-compare-const dtw-game != 1))
	(unit-type-count-total villager >= 16)); 24
=>
	(up-assign-builders c: feitoria c: 4)
	(up-assign-builders c: castle c: 5)
	(up-assign-builders c: wonder c: 40)
	(up-assign-builders c: watch-tower-building c: 3); hm
	(up-assign-builders c: bombard-tower c: 2); hm
	(up-assign-builders c: krepost c: 3)
	(up-assign-builders c: donjon c: 2);
;	(disable-self)
)
(defrule
	(goal strategy fast-imp)
	(up-research-status c: imperial-age <= research-unavailable)
=>
	(up-assign-builders c: monastery c: 2)
	(up-assign-builders c: siege-workshop c: 2)
	(disable-self))
(defrule
	(up-research-status c: imperial-age >= research-unavailable)
=>
	(up-assign-builders c: monastery c: 1)
	(up-assign-builders c: siege-workshop c: 1)
	(disable-self))
(defrule
	(true)
=>
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self))
#load-if-defined INFINITE-RESOURCES-START
(defrule
	(true)
=>
	(up-assign-builders c: barracks c: 2)
	(up-assign-builders c: stable c: 2)
	(up-assign-builders c: archery-range c: 2)
	(up-assign-builders c: siege-workshop c: 2)
	(up-assign-builders c: monastery c: 2)
	(up-assign-builders c: dock c: 2)
	(up-assign-builders c: blacksmith c: 2)
	(up-assign-builders c: market c: 2)
	(up-assign-builders c: university c: 2)
	(disable-self))
#else
(defrule
(not	(civ-selected khmer))
=>
	(up-assign-builders c: stable c: 2)
	(up-assign-builders c: archery-range c: 2)
	(disable-self))
(defrule
	(strategic-number sn-current-age <= dark)
	(building-type-count barracks < 1)
	(unit-type-count-total villager >= 4); 3
	(wood-amount >= 2400)
	(food-amount >= 2400)
=>
	(up-assign-builders c: barracks c: 2)
	(disable-self))
(defrule
(or	(building-type-count barracks >= 1)
	(strategic-number sn-current-age >= dfeudal))
=>
	(up-assign-builders c: barracks c: 1)
	(disable-self))
(defrule
(or	(game-time >= 185)
	(current-age >= feudal-age))
;(or	(up-compare-goal strategy-type == feudal-war)
(or	(building-type-count stable >= 1)
	(building-type-count archery-range >= 1));); -total
=>
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: archery-range c: 1)
	(disable-self))
(defrule
	(current-age == feudal-age)
	(strategic-number sn-current-age == feudal)
	(up-compare-goal strategy-type >= castle-war)
	(building-type-count blacksmith < 1)
	(food-amount >= castle-feco)
	(up-compare-goal total-gold-amount >= castle-g2)
(not	(civ-selected khmer))
=>
	(up-assign-builders c: blacksmith c: 2)
	(disable-self))
(defrule
(or	(building-type-count blacksmith >= 1)
	(current-age >= castle-age))
=>
	(up-assign-builders c: blacksmith c: 1)
	(disable-self))
(defrule
	(current-age == feudal-age)
(or	(building-type-count-total barracks <= 0)
	(goal drushmicro yes))
	(building-type-count market < 1)
	(food-amount >= castle-feco)
	(up-compare-goal total-gold-amount >= castle-g2)
(not	(civ-selected khmer))
=>
	(up-assign-builders c: market c: 2)
	(disable-self))
(defrule
(or	(building-type-count market >= 1)
	(current-age >= castle-age))
=>
;	(up-assign-builders c: market c: 1)
	(disable-self))
#end-if
#end-if
#end-if
#end-if


(defrule
(or	(up-pending-objects c: donjon <= 0)
(or	(unit-type-count serjeant-set <= 0)
(or	(up-compare-goal gl-threat-time < 8000)
(or	(up-timer-status fivesec == timer-running)
(or	(goal underattack yes)
	(goal attacking yes))))))
=>
	(up-jump-rule 4))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal8 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 on-mainland)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: donjon c: 16)
	(up-remove-objects search-remote object-data-tasks-count >= 3)
	(up-remove-objects search-remote object-data-index >= 1))
(defrule
	(up-set-target-object search-remote c: 0)
=>
	(up-get-point position-object point-x)
	(up-set-target-point point-x)
	(up-reset-filters)
	(up-filter-distance c: -1 s: sn-maximum-town-size)
	(up-filter-exclude -1 actionid-attack orderid-explore -1)
	(up-find-local c: serjeant-line c: 10)
	(up-find-local c: donjon-serjeant-line c: 10)
	(up-remove-objects search-local object-data-group-flag >= 0)
	(up-remove-objects search-local object-data-action == actionid-build)
	(up-remove-objects search-local object-data-order == orderid-build)
	(up-remove-objects search-local object-data-attack-stance == stance-no-attack)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index >= 5))
(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(chat-local-to-self "Tasking Serjeants to build Donjon.")
	(up-target-objects 1 action-default -1 -1))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal8)); end jump


(defrule
	(up-compare-goal scouting-unit >= 0)
=>
	(up-full-reset-search)
	(up-add-object-by-id search-local g: scouting-unit))
(defrule
	(up-compare-goal scouting-unit >= 0)
(or	(not	(up-set-target-object search-local c: 0))
	(and	(up-set-target-object search-local c: 0)
		(up-object-data object-data-player != my-player-number)))
=>
	(set-goal scouting-unit -1))
(defrule
	(up-compare-goal scouting-unit <= -1)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 orderid-explore -1)
	(up-find-local c: controlled-animal-class g: temporary-goal)
	(up-filter-include cmdid-military -1 orderid-explore -1)
	(up-filter-exclude -1 -1 -1 warship-class)
	(up-modify-goal temporary-goal s:= sn-number-explore-groups)
	(up-modify-goal temporary-goal s:- sn-cap-civilian-explorers)
	(up-modify-goal temporary-goal c:max 1)
	(up-modify-goal temporary-goal c:min 40)
	(up-find-local c: all-units-class g: temporary-goal)
	(up-clean-search search-local object-data-speed search-order-desc))
(defrule
	(up-compare-goal scouting-unit <= -1)
=>
	(up-reset-filters)
	(up-filter-include cmdid-military -1 orderid-explore -1)
	(up-modify-goal temporary-goal s:= sn-number-boat-explore-groups)
	(up-modify-goal temporary-goal s:- sn-cap-civilian-explorers)
	(up-modify-goal temporary-goal c:max 1)
	(up-modify-goal temporary-goal c:min 40)
	(up-find-local c: all-units-class g: temporary-goal))
(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal scouting-unit <= -1)
=>
	(up-get-object-data object-data-id scouting-unit))



(defrule
	(up-compare-const civilian-percent != 100)
=>
	(set-goal temporary-goal up-max-civ)
	(set-goal temporary-goal2 up-max-civ)
	(up-modify-goal temporary-goal2 c:min 130); 163
	(up-modify-goal temporary-goal2 c:* civilian-percent)
	(up-modify-goal temporary-goal2 c:/ 100)
	(up-modify-goal temporary-goal2 c:max 6)
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-modify-goal custom-civ-pop g:+ temporary-goal))
(defrule
	(up-compare-const military-percent != 100)
=>
	(up-get-fact population-cap 0 temporary-goal)
	(up-modify-goal temporary-goal3 g:= temporary-goal)
	(up-modify-goal temporary-goal c:min 200); 250
	(up-modify-goal temporary-goal3 c:- 200); 250
	(up-modify-goal temporary-goal3 c:max 1)
	(up-modify-goal temporary-goal3 c:/ 3); [3]; 6
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(set-goal temporary-goal2 up-max-civ)
	(up-modify-goal temporary-goal2 c:min 130); 163
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-modify-goal allowed-num-military g:= temporary-goal)
	(up-modify-goal allowed-num-military c:* military-percent)
	(up-modify-goal allowed-num-military c:/ 100)
	(up-modify-goal allowed-num-military c:max 5)
;	(up-chat-data-to-all "allowed-num-military: %d" g: allowed-num-military)
	(disable-self))
(defrule
	(building-type-count town-center <= 0)
	(unit-type-count villager >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object position-self-x)
	(up-get-point-zone position-self-x main-zone))
(defrule
	(building-type-count town-center >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: town-center c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object position-self-x)
	(up-get-point-zone position-self-x main-zone)
	(up-get-object-data object-data-id position-self-id)
;	(up-get-object-data object-data-no-convert temporary-goal)
;	(up-chat-data-to-player my-player-number "t-g: %d" g: temporary-goal)
	(up-modify-sn sn-safe-town-size s:= sn-maximum-town-size)
	(up-modify-sn sn-safe-town-size c:max 16); 14
	(set-goal temporary-goal 42)
	(up-modify-goal temporary-goal s:+ sn-current-age)
	(up-modify-sn sn-safe-town-size g:min temporary-goal)); 48
(defrule
	(up-compare-goal starting-zone <= -1)
	(up-compare-goal position-self-x >= 0)
	(up-compare-goal position-self-y >= 0)
	(up-compare-goal position-self-x g:<= map-size)
	(up-compare-goal position-self-y g:<= map-size)
=>
	(up-get-point-zone position-self-x starting-zone)
;	(up-chat-data-to-self "starting-zone: %d" g: starting-zone)
;	(disable-self)
)
(defrule
	(up-compare-goal position-self-x != -1)
=>
	(up-set-target-point position-self-x)
	(up-copy-point drushwaypoint-x position-self-x)
	(up-copy-point drushwaypoint2-x position-self-x)
	(up-copy-point drushretreatpoint-x position-self-x)
	(disable-self))
(defrule
	(up-players-in-game enemy == 1)
	(strategic-number sn-target-player-number <= 0)
	(player-in-game any-enemy)
	(players-building-count any-enemy <= 0)
=>
	(up-get-player-fact this-any-enemy player-number 0 temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self)); score
(defrule
	(goal retargetenemy yes)
	(players-building-count any-enemy >= 1)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(players-building-count target-player >= 1); any-enemy
=>
	(up-get-point position-target target-point-x)
	(up-get-target-fact player-distance 0 temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point-distance position-self-x target-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-target-fact population 0 target-pop)
	(up-get-target-fact civilian-population 0 target-cpop)
	(up-get-target-fact military-population 0 target-mpop)
	(up-modify-sn target-civilian-superiority g:= my-cpop)
	(up-modify-sn target-civilian-superiority g:- target-cpop)
	(up-modify-sn target-military-superiority g:= my-mpop)
	(up-modify-sn target-military-superiority g:- target-mpop))
(defrule
	(players-building-count target-player >= 1); any-enemy
	(up-compare-goal targetdistance g:<= map-size)
(or	(game-time >= 1800)
(or	(strategic-number sn-current-age >= imperial)
(or	(not	(player-in-game every-enemy))
	(players-building-count every-enemy >= 1))))
=>
	(up-modify-goal targetdistance g:= temporary-goal))

(defrule
	(players-building-count target-player <= 0); every-enemy
	(up-compare-goal targetdistance <= 0)
=>
	(up-modify-goal targetdistance c:= preftradedist)
	(up-get-point position-flank point-x)
	(up-get-point-distance position-self-x point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point position-opposite temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point position-mirror saved-point-x)
	(up-get-point-distance position-self-x saved-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(up-get-point scouting-type object-point-x)
	(up-get-point-distance position-self-x object-point-x temporary-goal)
	(up-modify-goal targetdistance g:min temporary-goal)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
=>
	(up-modify-goal targetdistance c:- 10)
	(up-modify-goal targetdistance c:max 1)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
	(strategic-number teambalance != 0)
(or	(up-allied-goal any-computer-ally cozy == yes)
	(nand	(goal position-goal pocket)
		(goal cozy yes)))
=>
	(up-get-point position-center point2-x)
	(up-get-point-distance position-self-x point2-x temporary-goal2)
	(up-modify-goal targetdistance g:+ temporary-goal2)
	(up-modify-goal targetdistance c:/ 2)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
	(up-compare-goal target-point-x <= 0)
=>
	(up-add-point point-x temporary-point-x c: 1)
	(up-add-point point-x saved-point-x c: 1)
	(up-add-point point-x object-point-x c: 1)
	(up-modify-goal point-x c:/ 4)
	(up-modify-goal point-y c:/ 4)
	(up-copy-point target-point-x point-x)
	(up-set-target-point target-point-x)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
	(goal nomaden yes)
;(or	(building-type-count lumber-camp >= 1)
	(building-type-count town-center >= 1);)
=>
	(up-get-point position-center temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal temporary-goal2 g:= map-size)
	(up-modify-goal temporary-goal2 c:/ 16)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal targetdistance g:min temporary-goal)
	(disable-self))
(defrule
	(players-building-count target-player <= 0); every-enemy
(or	(up-compare-goal targetdistance <= 0)
	(up-compare-goal targetdistance g:> map-size))
=>
	(up-chat-data-to-player my-player-number "TD: %d" g: targetdistance)
	(up-modify-goal targetdistance c:max 44)
	(up-modify-goal targetdistance g:min map-size)
;	(up-chat-data-to-player my-player-number "TD2: %d" g: targetdistance)
)
(defrule
	(goal feudalvills -1)
	(up-resource-amount amount-feudal-town-center <= 0)
=>
	(set-goal feudalvills 0))

(defrule
	(cc-players-unit-type-count any-human-ally flare >= 1)
	(up-compare-goal gl-game-time g:>= last-flare-time)
=>
	(up-get-fact game-time 0 last-flare-time)
	(up-modify-goal last-flare-time c:+ 20))

(defrule
	(game-time >= 2100)
=>
	(up-jump-rule 11))
(defrule
	(up-compare-goal main-zone != -1)
=>
	(up-full-reset-search)
	(up-find-local c: livestock-class c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= main-zone)
	(up-get-search-state local-total)
	(up-modify-goal mysheep g:= local-total)
	(up-remove-objects search-remote object-data-carry < 149))
(defrule; temporary; todo
	(up-compare-goal main-zone != -1)
	(up-set-target-object search-local c: 0)
=>
	(up-modify-goal totalsheep c:+ 1)
	(disable-self))
(defrule
(or	(cc-players-unit-type-count 0 forage-bush-class >= 1)
	(up-compare-goal forage-count != 0))
;(or	(game-time < 1200)
;	(research-available ri-horse-collar))
;;	(up-gaia-type-count c: forage-bush-class >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal2 s:= sn-maximum-food-drop-distance)
	(up-modify-goal temporary-goal2 c:max 22); 30
	(up-modify-goal temporary-goal2 c:min 32); 40
	(up-filter-distance c: -1 g: temporary-goal2)
;	(up-find-remote c: forage-bush-class c: 32)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: forage-bush-class c: 32)
	(up-get-search-state local-total)
	(up-modify-goal forage-count g:= remote-total)
;	(up-chat-data-to-self "Forage-count: %d." g: forage-count)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
(or	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(up-compare-goal forage-count != 0))
;	(up-gaia-type-count c: shore-fish-class >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal2 s:= sn-maximum-food-drop-distance)
	(up-modify-goal temporary-goal2 c:max 22); 30
	(up-modify-goal temporary-goal2 c:min 32); 40
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-find-remote c: shore-fish-class c: 32)
	(up-get-search-state local-total)
	(up-modify-goal shore-count g:= remote-total)
;	(up-chat-data-to-self "shore-count: %d." g: shore-count)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(dropsite-min-distance boar-hunting <= 34)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance c: -1 c: 34)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: boar-class c: 24)
	(up-remove-objects search-remote object-data-hitpoints >= 100)
	(up-remove-objects search-remote object-data-maxhp >= 350)
	(up-remove-objects search-remote object-data-carry < 20)
	(up-get-search-state local-total)
	(up-modify-goal myboars g:= remote-total)
;	(up-chat-data-to-self "There are %d boar[s] in our vicinity." g: myboars)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(up-compare-goal myboars g:> boarcounter)
=>
	(up-modify-goal boarcounter g:max myboars))
(defrule
	(up-compare-goal myboars g:== boarcounter)
=>
	(up-modify-goal boardiffgoal g:- boarcounter)
	(up-modify-goal totalboars g:- boardiffgoal)
;	(up-chat-data-to-self "Found %d boar[s] in total." g: totalboars)
	(up-modify-goal boardiffgoal g:= boarcounter))
(defrule
	(up-compare-goal myboars g:< boarcounter)
=>
	(up-modify-goal boarcounter g:min myboars)
	(up-modify-goal boardiffgoal g:= boarcounter))
(defrule
	(up-compare-goal mysheep g:> sheepcounter)
=>
	(up-modify-goal sheepcounter g:max mysheep))
(defrule
	(up-compare-goal mysheep g:== sheepcounter)
=>
	(up-modify-goal sheepdiffgoal g:- sheepcounter)
	(up-modify-goal totalsheep g:- sheepdiffgoal)
;	(up-chat-data-to-self "Found %d livestock in total." g: totalsheep)
	(up-modify-goal sheepdiffgoal g:= sheepcounter))
(defrule
	(up-compare-goal mysheep g:< sheepcounter)
=>
	(up-modify-goal sheepcounter g:min mysheep)
	(up-modify-goal sheepdiffgoal g:= sheepcounter)); end jump




(defrule
	(strategic-number sn-current-age >= fcastlea)
(or	(and	(unit-type-count villager-food <= 0)
		(unit-type-count fishing-ship <= 0))
(or	(game-time >= 2400)
(or	(civilian-population >= up-max-civ)
(or	(population >= max-civ-pop)
(or	(food-amount >= 1300); 100; 50
	(unit-type-count villager-food >= 25))))))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-full-reset-search)
	(up-find-local c: villager-class c: 60)
	(up-remove-objects search-local object-data-gather-type != food)
	(up-find-local c: fishing-ship c: 60)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-local g: temporary-goal)
(or	(up-object-data object-data-target == forage-food)
(or	(up-object-data object-data-target == sheep-food)
(or	(up-object-data object-data-target == boar-food)
(or	(up-object-data object-data-target == deer-food)
(or	(up-object-data object-data-target == farm-food)
(or	(up-object-data object-data-target == ocean-fish-class)
	(up-object-data object-data-target == shore-fish-class)))))))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-food-amount g:+ temporary-goal2))
(defrule
;	(strategic-number sn-current-age <= feudal)
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal temporary-goal g:< local-total)
	(up-compare-goal temporary-goal g:< my-cpop)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -2)); end jump


(defrule
	(strategic-number sn-current-age >= imperial)
(or	(and	(unit-type-count villager-stone <= 0)
		(unit-type-count villager-gold <= 0))
(or	(game-time >= 2400)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))
=>
	(up-jump-rule 4))
(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-find-local c: 124 g: villagercount)
	(up-find-local c: 220 g: villagercount)
	(up-find-local c: 579 g: villagercount)
	(up-find-local c: 581 g: villagercount)
	(up-get-search-state local-total))
(defrule; end neg jump
	(up-set-target-object search-local g: temporary-goal)
(or	(up-object-data object-data-target == stone-mine)
	(up-object-data object-data-target == stone-mine-class))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-stone-amount g:+ temporary-goal2))
(defrule
	(up-set-target-object search-local g: temporary-goal)
(or	(up-object-data object-data-target == gold-mine)
	(up-object-data object-data-target == gold-mine-class))
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-gold-amount g:+ temporary-goal2))
(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal temporary-goal g:< local-total)
	(up-compare-goal temporary-goal g:< villagercount)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -3)); end jump


(defrule
	(strategic-number sn-current-age >= imperial)
(or	(unit-type-count villager-wood <= 0)
(or	(game-time >= 2400)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(set-goal temporary-goal 0)
	(up-full-reset-search)
	(up-find-local c: 123 g: villagercount)
	(up-find-local c: 218 g: villagercount)
	(up-get-search-state local-total))
(defrule; end neg jump
	(up-set-target-object search-local g: temporary-goal)
	(up-object-data object-data-target == tree-class)
=>
	(up-get-object-data object-data-carry temporary-goal2)
	(up-modify-goal total-wood-amount g:+ temporary-goal2))
(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal temporary-goal g:< local-total)
	(up-compare-goal temporary-goal g:< villagercount)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-jump-rule -2)); end jump


(defrule
	(true); band-aid for now
=>
	(set-goal temporary-goal 0)
	(set-goal temporary-goal2 0)
	(up-full-reset-search))

#load-if-not-defined INFINITE-RESOURCES-START
(defrule
	(true)
=>
	(up-modify-goal maxfarms g:= villagercount)
	(up-modify-goal maxfarms s:%* sn-food-gatherer-percentage)
	(up-modify-goal temporary-goal3 g:= maxfarms)
	(up-get-fact unit-type-count villager-food temporary-goal)
	(up-modify-goal maxfarms g:- temporary-goal)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0)
	(up-modify-goal temporary-goal3 c:+ 5);
	(up-modify-goal maxfarms g:min temporary-goal3)
	(set-goal temporary-goal 0))
(defrule
	(true)
=>
	(up-get-fact unit-type-count villager-forager temporary-goal2)
;	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal3 g:= forage-count)
	(up-modify-goal temporary-goal3 c:max 0)
	(up-modify-goal temporary-goal3 c:min 6)
	(up-modify-goal temporary-goal2 g:- temporary-goal3)
	(up-modify-goal temporary-goal g:+ temporary-goal2))
(defrule
;(or	(strategic-number sn-current-age >= fcastlea)
;	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-horse-collar != research-available)
	(up-research-status c: ri-horse-collar != research-pending)
	(up-research-status c: ri-heavy-plow != research-available)
	(up-research-status c: ri-heavy-plow != research-pending)
=>
	(up-get-fact unit-type-count villager-hunter temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 8); 8
	(up-modify-goal temporary-goal2 c:max 0)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-get-fact unit-type-count villager-shepherd temporary-goal2)
	(up-modify-goal temporary-goal2 c:- 6); 6
	(up-modify-goal temporary-goal2 c:max 0)	
	(up-modify-goal temporary-goal g:+ temporary-goal2))
(defrule
;	(building-type-count-total town-center <= 1)
;	(building-type-count-total mill <= 1)
;(or	(strategic-number sn-current-age >= fcastlea)
;	(up-research-status c: castle-age >= research-available))
	(up-research-status c: ri-horse-collar != research-available)
	(up-research-status c: ri-horse-collar != research-pending)
	(up-research-status c: ri-heavy-plow != research-available)
	(up-research-status c: ri-heavy-plow != research-pending)
=>
	(up-get-fact unit-type-count villager-fisherman temporary-goal2)
;	(up-modify-goal temporary-goal2 c:- 1)
	(up-modify-goal temporary-goal2 g:- shore-count)
	(up-modify-goal temporary-goal2 c:max 0)
;	(up-modify-goal temporary-goal2 c:min 8)
;	(up-chat-data-to-player my-player-number "temporary-goalFi: %d" g: temporary-goal)
	(up-modify-goal temporary-goal g:+ temporary-goal2))
(defrule
	(up-research-status c: ri-horse-collar <= research-pending)
	(up-research-status c: ri-horse-collar >= research-available)
	(up-compare-goal excessWood < 235); 135
(or	(up-compare-goal strategy != fast-imp)
(or	(up-compare-goal total-food-amount >= imperial-food)
(or	(up-research-status c: imperial-age >= research-available)
	(strategic-number sn-current-age >= cimperial))))
=>
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal forage-count <= 2); 3
(or	(and	(goal maa-var yes)
		(building-type-count-total barracks >= 1))
(or	(building-type-count-total archery-range >= 2); test
(or	(strategic-number sn-current-age >= fcastlea)
(or	(up-research-status c: castle-age >= research-available)
	(building-type-count-total blacksmith >= 1))))))
=>
;	(up-chat-data-to-player my-player-number "maxfarms: %d" g: maxfarms)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0)
	(up-jump-rule 1))
(defrule
(or	(and	(goal strategy s-flush)
		(building-type-count-total stable >= 1))
	(current-age <= dark-age))
=>
;	(up-chat-data-to-player my-player-number "maxfarms2: %d" g: maxfarms)
	(up-modify-goal maxfarms g:+ temporary-goal)
	(up-modify-goal maxfarms c:max 0))
(defrule
	(game-time < 420); deathmatch etc
;	(current-age >= castle-age)
	(up-compare-goal excessFood >= 1200)
	(unit-type-count-total villager < 30)
	(up-compare-goal maxfarms >= 1)
=>
;	(set-goal maxfarms 0)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:= temporary-goal)
	(up-modify-goal maxfarms c:max 0))
(defrule
	(goal strategy grush)
	(game-time < 900)
	(building-type-count-total dock <= 2); 0
	(unit-type-count-total villager < 33); 30
	(wood-amount < 210); hmm
(or	(up-compare-goal total-food-amount >= 50)
	(up-pending-objects c: villager >= 2))
;(nand	(unit-type-count villager-food < 6); 7
;	(and	(unit-type-count fishing-ship < 3); 4
;		(up-compare-goal total-food-amount < 50)))
	(up-compare-goal maxfarms >= 1)
=>
;	(set-goal maxfarms 0)
	(up-get-fact unit-type-count villager-farmer temporary-goal)
	(up-modify-goal maxfarms g:= temporary-goal)
	(up-modify-goal maxfarms c:max 0))
#else
(defrule
	(true)
=>
	(set-strategic-number sn-maximum-food-drop-distance 0)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-cap-civilian-gatherers 0)
	(set-strategic-number sn-cap-civilian-builders 200)
	(set-strategic-number sn-percent-civilian-builders 100)
	(set-goal maxfarms 0))
#end-if

(defrule
	(goal attacking yes)
; test	(goal attackmethod TSA)
;	(goal retargetenemy yes)
(or	(up-projectile-detected projectile-castle < 3000)
	(up-projectile-detected projectile-bombard-tower < 3000))
	(players-building-type-count target-player castle <= 0);	(up-building-type-in-town c: castle <= 0)
	(players-building-type-count target-player bombard-tower <= 0);	(up-building-type-in-town c: bombard-tower <= 0)
(or	(population >= max-civ-pop); test
(or	(unit-type-count battering-ram-line >= 1)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon-line >= 2))))
;	(strategic-number sn-safe-town-size < 55); 60
=>
;	(set-strategic-number sn-safe-town-size 55))
	(up-modify-sn sn-safe-town-size c:+ 5)
	(up-modify-sn sn-safe-town-size c:min 55);
	(up-modify-sn sn-safe-town-size c:max 67))

(defrule
	(up-compare-const ability-to-kite <= 75)
=>
	(set-difficulty-parameter ability-to-maintain-distance 75)); 0
(defrule; test
	(up-compare-const ability-to-kite <= 81)
(or	(strategic-number sn-military-superiority >= 2)
	(and	(strategic-number sn-military-superiority >= 0)
		(goal attacking yes)))
=>
	(set-difficulty-parameter ability-to-maintain-distance 81)); 25
(defrule; test
	(up-compare-const ability-to-kite <= 88)
	(strategic-number sn-military-superiority >= 3)
	(goal attacking yes)
=>
	(set-difficulty-parameter ability-to-maintain-distance 88)); 50
(defrule; test
	(up-compare-const ability-to-kite <= 94)
	(strategic-number sn-military-superiority >= 4)
	(goal attacking yes)
=>
	(set-difficulty-parameter ability-to-maintain-distance 94)); 75
(defrule
(or	(unit-type-count-total fire-galley >= 1)
	(unit-type-count-total fire-ship-line >= 1))
	(soldier-count <= 1)
	(unit-type-count-total galley-line <= 0)
	(unit-type-count-total cannon-galleon-line <= 0)
	(unit-type-count-total longboat-line <= 0)
	(unit-type-count-total caravel-line <= 0)
	(unit-type-count-total turtle-ship-line <= 0)
=>
	(set-difficulty-parameter ability-to-maintain-distance 100))
(defrule
	(population >= max-pop)
	(soldier-count >= 2)
=>
	(set-difficulty-parameter ability-to-maintain-distance 100))

;(defrule
;	(timer-triggered twentysec)
;;	(up-compare-const ability-to-dodge <= 100)
;(or	(unit-type-count-total magyar-huszar >= 27)
;(or	(unit-type-count-total boyar >= 30)
;(or	(unit-type-count-total cavalry-class >= 30)
;	(unit-type-count-total scout-cavalry-line >= 27))))
;=>
;	(set-difficulty-parameter ability-to-dodge-missiles 100))
;(defrule
;	(timer-triggered twentysec)
;	(up-compare-const ability-to-dodge <= 0)
;	(unit-type-count-total magyar-huszar < 27)
;	(unit-type-count-total boyar < 30)
;	(unit-type-count-total cavalry-class < 30)
;	(unit-type-count-total scout-cavalry-line < 27)
;=>
;	(set-difficulty-parameter ability-to-dodge-missiles 0))

(defrule
	(up-compare-goal control-goal != 0)
	(up-compare-goal control-goal != 7)
	(up-compare-goal strategy != stonewall)
(nand	(goal strategy krush)
	(goal kr-var 1))
=>
	(set-goal control-goal 0))
(defrule
	(up-compare-goal control-goal != 6)
	(up-compare-goal control-goal != 7)
(or	(up-compare-goal strategy == stonewall)
	(and	(goal strategy krush)
		(goal kr-var 1)))
=>
	(set-goal control-goal 6))

(defrule
	(up-compare-goal jump-rule-goal <= 0)
=>
	(up-get-rule-id current-rule-id)
;	(up-chat-data-to-player my-player-number "jt0: %d" g: current-rule-id)
)
(defrule
	(goal strategy usual)
	(up-compare-goal strategy-affinity != 0)
=>
	(up-modify-goal strategy-affinity c:= 0))
(defrule
	(goal strategy usual)
	(game-time < 30)
=>
	(up-modify-goal strategy-affinity c:+ 1))
(defrule
	(goal strategy sling)
	(up-compare-const sling-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= sling-affinity))
(defrule
	(goal strategy drush)
	(up-compare-const drush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= drush-affinity))
(defrule
	(goal strategy r-flush)
	(up-compare-const r-flush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= r-flush-affinity))
(defrule
	(goal sk-var yes)
	(goal strategy r-flush)
	(up-compare-const sk-var-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= sk-var-affinity))
(defrule
	(goal strategy krush)
	(up-compare-const krush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= krush-affinity))
(defrule
	(goal strategy s-flush)
	(up-compare-const s-flush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= s-flush-affinity))
(defrule
	(goal strategy castledrop)
	(up-compare-const castledrop-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= castledrop-affinity))
(defrule
	(goal strategy stonewall)
	(up-compare-const stonewall-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= stonewall-affinity))
(defrule
	(goal strategy a-rush)
	(up-compare-const a-rush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= a-rush-affinity))
(defrule
	(goal strategy ca-rush)
	(up-compare-const ca-rush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= ca-rush-affinity))
(defrule
	(goal strategy klew)
	(up-compare-const klew-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= klew-affinity))
(defrule
	(goal strategy grush)
	(up-compare-const grush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= grush-affinity))
(defrule
	(goal fg-var yes)
	(goal strategy grush)
	(up-compare-const fgrush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= fgrush-affinity))
(defrule
	(goal strategy trush)
	(up-compare-const trush-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= trush-affinity))
(defrule
	(goal strategy fast-imp)
	(up-compare-const fi-affinity g:!= strategy-affinity)
=>
	(up-modify-goal strategy-affinity c:= fi-affinity))
(defrule
	(up-compare-goal jump-rule-goal == 1)
	(up-compare-goal next-rule-id >= 0)
	(up-compare-goal next-rule-id <= 9999)
=>
	(set-goal jump-rule-goal 2)
	(up-jump-direct g: next-rule-id)
;	(up-chat-data-to-player my-player-number "jt1: %d" g: next-rule-id)
)







(defrule
	(game-time > 2)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-find-player ally find-closest my-flank)
	(up-modify-sn sn-focus-player-number g:= my-flank)
	(up-get-focus-fact allied-goal position-goal temporary-goal2)
	(up-find-player ally find-closest my-flank2)
	(up-find-next-player ally find-closest my-flank2)
	(up-modify-sn sn-focus-player-number g:= my-flank2)
	(up-get-focus-fact allied-goal position-goal temporary-goal3)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
	(disable-self))
(defrule
	(game-time > 2)
	(up-compare-goal temporary-goal2 != flank)
	(goal temporary-goal3 flank)
	(up-compare-goal position-goal != flank)
=>
	(up-modify-goal temporary-goal4 g:= my-flank)
	(up-modify-goal my-flank g:= my-flank2)
	(up-modify-goal my-flank2 g:= temporary-goal4)
	(disable-self))
;(defrule
;	(game-time > 2)
;	(goal temporary-goal2 flank)
;	(goal temporary-goal3 pocket)
;	(up-compare-goal position-goal != pocket)
;=>
;	(up-modify-goal my-flank g:= my-flank2)
;	(disable-self))
(defrule
	(game-time > 2)
	(up-compare-goal position-goal != pocket)
=>
	(set-goal my-flank2 0); only one player next to us
	(disable-self))
;(defrule
;	(game-time > 2)
;=>
;	(up-chat-data-to-player my-player-number "I will protect player #%d with all my might!" g: my-flank)
;	(up-chat-data-to-player my-player-number "Maybe even player #%d." g: my-flank2)
;;	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(disable-self))

(defrule
(or	(civ-selected berbers)
(or	(research-completed ri-wheel-barrow)
	(research-completed ri-hand-cart)))
=>
	(up-modify-goal temporary-goal g:= loom-dist)
	(up-modify-goal temporary-goal c:* 110)
	(up-modify-goal temporary-goal c:/ 100)
;	(up-modify-goal temporary-goal g:- loom-dist)
;	(up-modify-goal temporary-goal c:max 1)
;	(up-modify-goal temporary-goal g:+ loom-dist)
	(up-modify-goal loom-dist g:max temporary-goal)
	(disable-self))
(defrule
	(cc-players-unit-type-count 0 rhinoceros >= 1)
=>
	(up-modify-goal loom-dist c:- 2)
	(up-modify-goal loom-dist c:max 20)
	(disable-self))

(defrule
	(up-compare-const house-builders >= 2)
	(housing-headroom < 3)
	(food-amount >= 50)
	(game-time < 20)
	(building-type-count-total town-center >= 1)
(or	(up-compare-const dm-game != 1)
	(housing-headroom <= 0))
=>
	(up-assign-builders c: house c: 2)
	(disable-self))
(defrule
	(building-type-count-total house >= 1)
=>
	(up-assign-builders c: house c: 1)
	(disable-self))
(defrule
	(game-time >= 25); below
=>
	(up-assign-builders c: house c: 1)
	(disable-self))

(defrule
	(goal migration-state 1)
=>
	(up-assign-builders c: monastery c: 1)
	(up-assign-builders c: feitoria c: 1)
	(up-assign-builders c: castle c: 1)
	(up-assign-builders c: town-center-foundation c: 1)
	(up-assign-builders c: wonder c: 1)
	(up-assign-builders c: watch-tower-building c: 1)
	(up-assign-builders c: bombard-tower c: 1)
	(up-assign-builders c: krepost c: 1)
	(up-assign-builders c: barracks c: 1)
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: archery-range c: 1)
	(up-assign-builders c: blacksmith c: 1)
	(up-assign-builders c: market c: 1)
	(up-assign-builders c: house c: 1)
	(up-assign-builders c: donjon c: 1))


#load-if-not-defined DIFFICULTY-EXTREME
#load-if-defined UP-HUMAN-IN-GAME
(defrule
(or	(up-timer-status two-mins != timer-triggered)
(or	(up-timer-status threesec != timer-triggered)
(or	(up-compare-goal difficulty-adjustment >= diff-id)
(or	(player-in-game any-human-ally)
(or	(not	(player-in-game any-enemy))
	(game-time < home-exploration-time))))))
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(up-get-fact-min any-enemy current-score 0 temporary-goal)
	(up-get-fact current-score 0 temporary-goal2)
	(up-modify-goal temporary-goal c:max 100)
	(up-modify-goal temporary-goal2 c:max 100)
	(up-modify-goal temporary-goal3 g:= gl-game-time)
	(up-modify-goal temporary-goal3 g:/ 225)
	(up-modify-goal temporary-goal3 c:max 1)
	(up-modify-goal temporary-goal3 c:min 9)
	(up-modify-goal temporary-goal2 g:* temporary-goal3)
	(up-modify-goal temporary-goal2 c:/ 10))
(defrule
	(up-compare-goal temporary-goal g:< temporary-goal2)
=>
	(up-chat-data-to-self "Adjusting difficulty: %d" g: difficulty-adjustment)
;	(fe-cc-effect-percent 5 villager-class 0 80)
;	(fe-cc-effect-percent 5 building-class 0 75)
;	(fe-cc-effect-percent 5 wall-class 0 75)
;	(fe-cc-effect-percent 5 gate-class 0 75)
;	(fe-cc-effect-percent 5 farm-class 0 75)
;	(fe-cc-effect-percent 5 tower-class 0 75)
	(fe-cc-effect-percent 5 villager-class 13 85)
	(fe-cc-effect-percent 5 siege-weapon-class 10 115)
	(fe-cc-effect-percent 5 scorpion-class 10 115)
	(fe-cc-effect-percent 5 unpacked-trebuchet-class 10 115)
	(fe-cc-effect-percent 5 building-class 10 115)
	(fe-cc-effect-percent 5 tower-class 10 115)
	(up-modify-goal difficulty-adjustment c:+ 1)); end jump
#end-if
#end-if


#load-if-not-defined SANDBANK-MAP
#load-if-not-defined PACIFIC-ISLANDS-MAP
#load-if-not-defined MIGRATION-MAP
(defrule
	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq)
(or	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq2)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq2))
=>
;	(chat-to-player my-player-number "No watermap.")
	(set-goal map land)
;	(set-strategic-number sn-garrison-rams 1)
	(disable-self))
#end-if
#else
(defrule
	(up-compare-goal gl-game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
	(strategic-number sn-current-age >= dfeudal)
(or	(up-compare-goal inseln != yes)
	(up-compare-goal map != water))
=>
;	(chat-to-player my-player-number "Defined as islands.")
	(set-goal inseln yes)
	(set-goal enemy-boats yes)
	(set-goal map water))
#end-if
#else
(defrule
	(up-compare-goal gl-game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
	(strategic-number sn-current-age >= dfeudal)
(or	(up-compare-goal inseln != yes)
	(up-compare-goal map != water))
=>
;	(chat-to-player my-player-number "Defined as islands.")
	(set-goal inseln yes)
	(set-goal enemy-boats yes)
	(set-goal map water))
#end-if
(defrule
	(up-compare-const defined-land == 1)
	(up-compare-goal map != land)
=>
;	(chat-to-player my-player-number "Defined as landmap.")
	(set-goal map land))

(defrule
	(game-time < 10)
(or	(map-type oasis)
(or	(map-type fortress)
	(map-type black-forest)))
(or	(up-compare-goal map != land)
	(up-compare-goal fleet != no))
=>
	(chat-to-player my-player-number "O/F/B: No watermap.")
	(set-goal map land)
	(set-goal fleet no)
	(disable-self))

#load-if-not-defined OASIS-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined BLACK-FOREST-MAP
(defrule
	(goal map land)
	(goal enemy-boats yes)
=>
;	(chat-to-player my-player-number "Enemy boats -> Watermap?")
	(set-goal map water))
#end-if
#end-if
#end-if


(defrule
	(up-compare-goal gl-game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
(or	(map-type migration)
(or	(map-type islands)
	(map-type team-islands)))
(or	(up-compare-goal inseln != yes)
	(up-compare-goal map != water))
=>
;	(chat-to-player my-player-number "Defined as islands.")
	(set-goal inseln yes)
	(set-goal enemy-boats yes)
	(set-goal map water))

;#load-if-not-defined BALTIC-MAP
;#load-if-not-defined COASTAL-MAP
;#load-if-not-defined CONTINENTAL-MAP
;#load-if-not-defined CRATER-LAKE-MAP
;#load-if-not-defined HIGHLAND-MAP
;#load-if-not-defined MEDITERRANEAN-MAP
;#load-if-not-defined RIVERS-MAP
;#load-if-not-defined SALT-MARSH-MAP
;#load-if-not-defined SCANDANAVIA-MAP
;#load-if-not-defined YUCATAN-MAP
(defrule
	(up-compare-goal gl-game-time g:>= map-treatment-switch-time)
	(up-timer-status embassy != timer-running)
(nor	(map-type islands)
	(map-type team-islands))
	(goal map water)
	(goal inseln no)
	(wall-completed-percentage 2 >= 100)
	(building-type-count stone-wall-line < 4)
	(building-type-count palisade-wall < 4)
	(building-type-count gate < 2)
=>
	(chat-to-player my-player-number "Surrounded: Islands.")
	(set-goal inseln yes)
	(set-goal enemy-boats yes)
	(set-strategic-number sn-garrison-rams 0))
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if
;#end-if


(defrule
	(true)
=>
	(up-set-target-point position-self-x)
	(set-goal temporary-goal maxcartssize)
	(up-modify-goal temporary-goal c:min preftradedist)
	(up-modify-goal temporary-goal c:max scout-time)
	(up-modify-goal temporary-goal c:max 40)
	(up-modify-goal temporary-goal c:min 40)
	(up-get-point position-mirror point-x)
	(up-get-point migration-position saved-point-x))
(defrule
(or	(game-time >= 5)
	(up-compare-const migration-style != 1))
=>
	(up-jump-rule 4))
(defrule; end neg jump
(or	(up-point-terrain saved-point-x == terrain-water)
(or	(up-point-terrain saved-point-x == terrain-water-deep)
(or	(up-point-terrain saved-point-x == terrain-water-medium)
(or	(up-point-terrain saved-point-x == terrain-water-bridge)
(or	(up-point-terrain saved-point-x == terrain-water-old)
(or	(up-point-terrain saved-point-x == terrain-water-beach)
	(up-point-terrain saved-point-x == terrain-shallows)))))))
=>
	(set-goal temporary-goal 137474)
	(up-jump-rule 1))
(defrule
(or	(up-point-terrain saved-point-x == terrain-ice)
(or	(up-point-terrain saved-point-x == terrain-ice2)
(or	(up-point-terrain saved-point-x == terrain-ice-beach)
(or	(up-point-terrain saved-point-x == terrain-water-deep-ocean)
(or	(up-point-terrain saved-point-x == terrain-water-azure)
	(up-point-terrain saved-point-x == terrain-walkable-shallows-azure))))))
=>
	(set-goal temporary-goal 137474))
(defrule
	(goal temporary-goal 137474)
	(up-point-distance saved-point-x position-self-x >= 4)
	(up-compare-goal temporary-goal2 != 151219)
=>
	(set-goal temporary-goal -1)
	(up-lerp-tiles saved-point-x position-self-x c: 1)
	(up-jump-rule -3))
(defrule
	(goal temporary-goal 137474)
	(up-point-distance saved-point-x point-x >= 4)
=>
	(set-goal temporary-goal -1)
	(set-goal temporary-goal2 151219)
	(up-lerp-tiles saved-point-x point-x c: 1)
	(up-jump-rule -4)); end jump
	


#load-if-defined REAL-WORLD-WORLD-MAP
(defrule
	(game-time < 360)
	(up-compare-goal starting-zone g:== migration-zone)
=>
	(up-get-point migration-position migration-point-x)
	(up-bound-precise-point migration-point-x 0 c: 4)
	(up-get-point-zone migration-point-x migration-zone)
	(up-jump-rule 1))
#load-if-defined UP-PLAYER-1
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 308)
	(set-goal saved-point-y 412))
#end-if
#load-if-defined UP-PLAYER-2
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 375)
	(set-goal saved-point-y 230))
#end-if
#load-if-defined UP-PLAYER-3
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 355)
	(set-goal saved-point-y 305))
#end-if
#load-if-defined UP-PLAYER-4
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 200)
	(set-goal saved-point-y 280))
#end-if
#load-if-defined UP-PLAYER-5
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 290)
	(set-goal saved-point-y 220))
#end-if
#load-if-defined UP-PLAYER-6
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 125)
	(set-goal saved-point-y 75))
#end-if
#load-if-defined UP-PLAYER-7
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 170)
	(set-goal saved-point-y 65))
#end-if
#load-if-defined UP-PLAYER-8
(defrule
	(game-time < 360)
=>
	(set-goal saved-point-x 120)
	(set-goal saved-point-y 180))
#end-if
(defrule
	(game-time >= 360)
=>
	(up-ungarrison c: transport-ship)
	(disable-self))
#end-if


(defrule
	(players-building-type-count every-enemy dock <= 0)
	(up-compare-goal biggestenemynavy <= 0)
	(players-unit-type-count every-enemy transport-ship <= 0)
	(players-unit-type-count every-enemy fishing-ship <= 0)
	(players-unit-type-count every-enemy trade-cog <= 0)
	(players-building-type-count every-ally dock <= 0)
	(players-unit-type-count every-ally transport-ship <= 0)
	(players-unit-type-count every-ally fishing-ship <= 0)
	(players-unit-type-count every-ally trade-cog <= 0)
	(building-type-count-total dock <= 0)
	(unit-type-count-total fishing-ship <= 0)
	(unit-type-count-total transport-ship <= 0)
	(unit-type-count-total trade-cog <= 0)
	(up-compare-goal navycount <= 0)
=>
	(up-jump-rule 9))
(defrule
(or	(up-compare-goal migration-zone >= 0)
(or	(up-point-distance point-x saved-point-x >= 1)
	(and	(up-compare-goal inseln != yes)
		(up-compare-const instant-dock <= 0))))
=>
	(up-jump-rule 8))
(defrule
(or	(nor	(goal migration-point-x -1)
		(goal migration-point-y -1))
	(nor	(up-compare-const wk-game == 1)
		(or	(unit-type-count transport-ship >= 1)
			(up-research-status c: feudal-age >= research-pending))))
=>
	(up-jump-rule 7))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:= remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal temporary-goal2 g:< temporary-goal)
=>
	(up-modify-goal temporary-goal2 g:+ remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:+ remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-find-resource c: stone c: 240)
	(up-filter-status c: status-resource c: list-active))
(defrule
	(up-compare-goal temporary-goal2 g:< temporary-goal)
=>
	(up-filter-include -1 -1 -1 off-mainland)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:+ remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-set-target-point position-self-x)
	(up-full-reset-search)
	(up-filter-distance s: sn-safe-town-size c: -1)
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:= remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc)); asc
(defrule
	(up-compare-goal temporary-goal2 g:< temporary-goal)
=>
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-filter-distance s: sn-safe-town-size c: -1)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:+ remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-filter-distance s: sn-safe-town-size c: -1)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone))
(defrule
	(up-compare-goal temporary-goal2 g:< temporary-goal)
=>
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:+ remote-total)
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-full-reset-search)
	(up-find-resource c: stone c: 240)
	(up-filter-status c: status-resource c: list-active)
	(up-filter-distance s: sn-safe-town-size c: -1)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:+ remote-total))
(defrule
	(up-compare-goal temporary-goal2 g:>= temporary-goal)
=>
	(up-clean-search search-remote object-data-distance search-order-desc); asc
	(up-set-target-object search-remote c: 0)
	(up-get-object-data object-data-map-zone-id temporary-goal3)
	(up-remove-objects search-remote object-data-map-zone-id g:!= temporary-goal3)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal remote-total >= 2)
	(up-compare-goal temporary-goal2 g:>= temporary-goal)
=>
;	(up-chat-data-to-player my-player-number "temporary-goal2: %d" g: temporary-goal2)
;	(up-chat-data-to-player my-player-number "temporary-goal: %d" g: temporary-goal)
	(up-chat-data-to-player my-player-number "Found migration point: %d" g: remote-total)
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object migration-point-x)
	(up-set-target-point migration-point-x)
	(up-get-point-zone migration-point-x migration-zone)); end jump

(defrule
	(game-time < 5)
	(up-point-distance point-x saved-point-x >= 1)
(or	(goal migration-zone -1)
(or	(goal migration-point-x -1)
	(goal migration-point-y -1)))
=>
	(up-copy-point migration-point-x saved-point-x);	(up-get-point migration-position migration-point-x)
	(up-bound-precise-point migration-point-x 0 c: 4)
	(up-get-point-zone migration-point-x migration-zone)
	(disable-self))

(defrule
	(up-point-distance point-x saved-point-x >= 1)
(nor	(goal migration-zone -1)
(or	(goal migration-point-x -1)
	(goal migration-point-y -1)))
=>
	(up-jump-rule 7))
(defrule
(or	(game-time >= preftradedist)
(or	(up-timer-status fivesec == timer-running)
(or	(unit-type-count transport-ship <= 0)
(or	(up-compare-goal navycount >= 1)
	(unit-type-count fishing-ship >= 1)))))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-get-point position-opposite temporary-point-x)
	(up-full-reset-search)
	(up-filter-exclude -1 actionid-move -1 -1)
	(up-find-local c: transport-ship c: maxtransports)
	(up-remove-objects search-local object-data-action == actionid-unload)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-point-explored temporary-point-x == explored-no)
	(up-compare-goal temporary-point-x >= 0)
	(up-compare-goal temporary-point-x >= 0)
	(up-compare-goal temporary-point-x g:<= map-size)
	(up-compare-goal temporary-point-x g:<= map-size)
=>
	(chat-local-to-self "Moving transport.")
	(up-set-target-point temporary-point-x)
	(up-target-point 0 action-move -1 -1))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-explored temporary-point-x != explored-no)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x g:> map-size)
	(up-compare-goal temporary-point-x g:> map-size)))))
=>
	(up-get-point position-mirror temporary-point-x)
	(up-jump-rule -2)
	(disable-self))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-explored temporary-point-x != explored-no)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x g:> map-size)
	(up-compare-goal temporary-point-x g:> map-size)))))
=>
	(up-get-point position-center temporary-point-x)
	(up-jump-rule -3)
	(disable-self))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-explored temporary-point-x != explored-no)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x g:> map-size)
	(up-compare-goal temporary-point-x g:> map-size)))))
=>
	(up-get-point position-corner temporary-point-x)
	(up-jump-rule -4)
	(disable-self))
(defrule
	(up-compare-goal local-total >= 1)
(or	(up-point-explored temporary-point-x != explored-no)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x < 0)
(or	(up-compare-goal temporary-point-x g:> map-size)
	(up-compare-goal temporary-point-x g:> map-size)))))
=>
	(up-get-point position-border temporary-point-x)
	(up-jump-rule -5)
	(disable-self)); end jump


(defrule
(or	(goal migration-point-x -1)
(or	(goal migration-point-y -1)
(or	(up-compare-goal relocating >= yes);
(or	(up-compare-goal migration-state != 1)
(or	(up-point-distance point-x saved-point-x <= 0)
	(unit-type-count transport-ship <= 0))))))
=>
	(up-jump-rule 4))
(defrule
	(true)
=>
;	(up-full-reset-search)
;	(up-find-local c: dock c: 1)
;	(up-set-target-object search-local c: 0)
;	(up-get-point position-object point-x)
;	(up-get-point-zone point-x temporary-goal)
	(up-copy-point temporary-point-x transport-point-x)
	(up-full-reset-search)
	(up-filter-garrison c: 1 c: -1)
	(up-find-local c: transport-ship c: maxtransports)
	(up-remove-objects search-local object-data-map-zone-id g:== starting-zone)
;	(up-remove-objects search-local object-data-map-zone-id g:== temporary-goal)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object transport-point-x)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number))
(defrule
	(true)
=>
	(up-reset-filters)
	(up-find-remote c: villager-class g: villagercount)
	(up-find-remote c: town-center c: 16)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: town-center-foundation c: 16)
	(up-remove-objects search-remote object-data-map-zone-id g:!= migration-zone)
	(up-remove-objects search-remote object-data-map-zone-id g:== starting-zone)
	(up-get-search-state local-total)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-modify-goal point-counter c:+ 1))
(defrule
(or	(up-compare-goal local-total <= 0)
(or	(up-compare-goal remote-total >= 1)
(or	(up-compare-goal temporary-point-x g:!= transport-point-x)
(or	(up-compare-goal temporary-point-y g:!= transport-point-y)
(or	(up-compare-goal temporary-point-x g:> map-size)
(or	(up-compare-goal temporary-point-y g:> map-size)
(or	(up-compare-goal temporary-point-x < 0)
	(up-compare-goal temporary-point-y < 0))))))))
=>
	(set-goal point-counter 0))
(defrule
	(up-compare-goal point-counter >= 16)
	(up-point-distance migration-point-x transport-point-x >= 2)
=>
	(up-modify-goal point-counter c:- 1); 2+
	(up-lerp-tiles migration-point-x transport-point-x c: 1)); end jump


(defrule
	(players-building-type-count every-enemy dock <= 0)
	(up-compare-goal biggestenemynavy <= 0)
	(players-unit-type-count every-enemy transport-ship <= 0)
	(players-unit-type-count every-enemy fishing-ship <= 0)
	(players-unit-type-count every-enemy trade-cog <= 0)
	(players-building-type-count every-ally dock <= 0)
	(players-unit-type-count every-ally transport-ship <= 0)
	(players-unit-type-count every-ally fishing-ship <= 0)
	(players-unit-type-count every-ally trade-cog <= 0)
	(building-type-count-total dock <= 0)
	(unit-type-count-total fishing-ship <= 0)
	(unit-type-count-total transport-ship <= 0)
	(unit-type-count-total trade-cog <= 0)
	(up-compare-goal navycount <= 0)
	(up-compare-const instant-dock <= 0)
=>
	(up-jump-rule 11))
(defrule
(or	(goal migration-point-x -1)
	(goal migration-point-y -1))
=>
	(up-jump-rule 10))
(defrule
;(or	(up-compare-goal inseln != yes)
(or	(and	(and	(and	(up-compare-const instant-dock <= 0)
				(players-unit-type-count every-enemy transport-ship <= 0));(building-type-count-total town-center >= 1))
			(players-unit-type-count every-ally transport-ship <= 0))
		(or	(up-compare-goal gl-game-time s:< sn-home-exploration-time)
			(game-time < 60)))
(or	(goal migration-state 1); migration-style)
	(up-compare-goal relocating >= yes)));)
=>
	(up-jump-rule 9))
(defrule
(nor	(up-compare-const wk-game == 1)
(or	(unit-type-count transport-ship >= 1)
	(up-research-status c: feudal-age >= research-pending)))
=>
	(up-jump-rule 8))
(defrule
	(true)
=>
	(set-goal temporary-goal 40)
	(set-goal temporary-goal2 37)
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal4 1)
	(up-modify-goal temporary-goal7 s:= sn-camp-max-distance)
	(up-modify-goal temporary-goal7 c:min maxcartssize)
	(up-modify-goal temporary-goal7 s:max sn-safe-town-size)
	(up-full-reset-search)
	(up-set-target-point position-self-x))
(defrule
	(true)
=>
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal5 g:= remote-total)
	(up-full-reset-search)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal5 g:+ remote-total)
	(up-modify-goal temporary-goal5 g:min temporary-goal2)
	(up-full-reset-search)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 240))
(defrule
	(true)
=>
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal remote-total g:min temporary-goal3)
	(up-modify-goal temporary-goal5 g:+ remote-total)
	(up-full-reset-search)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: stone c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal remote-total g:min temporary-goal4)
	(up-modify-goal temporary-goal5 g:+ remote-total)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal7))
(defrule
	(true)
=>
	(up-filter-status c: status-ready c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal6 g:= remote-total)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal7)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: wood c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal6 g:+ remote-total)
	(up-modify-goal temporary-goal6 g:min temporary-goal2)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal7))
(defrule
	(true)
=>
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: gold c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal remote-total g:min temporary-goal3)
	(up-modify-goal temporary-goal6 g:+ remote-total)
	(up-full-reset-search)
	(up-filter-distance c: -1 g: temporary-goal7)
	(up-filter-status c: status-resource c: list-active)
	(up-find-resource c: stone c: 240)
	(up-remove-objects search-remote object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal remote-total g:min temporary-goal4)
	(up-modify-goal temporary-goal6 g:+ remote-total)
	(up-modify-goal temporary-goal5 g:max temporary-goal6))
(defrule
	(up-compare-goal temporary-goal5 g:< temporary-goal)
=>
;	(up-chat-data-to-player my-player-number "temporary-goal5: %d" g: temporary-goal5)
;	(up-chat-data-to-player my-player-number "temporary-goal: %d" g: temporary-goal)
	(set-goal migration-state 1); migration-style)
	(up-chat-data-to-player my-player-number "Migration-state: %d" g: migration-state)
	(disable-self))
(defrule
	(up-compare-const migration-style == 1)
(or	(strategic-number sn-maximum-town-size >= 40)
	(game-time >= 2400))
=>
;	(up-chat-data-to-player my-player-number "temporary-goal5: %d" g: temporary-goal5)
;	(up-chat-data-to-player my-player-number "temporary-goal: %d" g: temporary-goal)
	(set-goal migration-state 1); migration-style)
	(up-chat-data-to-player my-player-number "Migration-state: %d" g: migration-state)
	(disable-self))
#load-if-defined HAMBURGER-MAP
(defrule
(or	(and	(dropsite-min-distance gold > 15)
		(game-time >= 1500)); 1200
(or	(players-unit-type-count target-player transport-ship >= 1)
(or	(players-building-type-count target-player watch-tower >= 4); 1
(or	(players-building-type-count target-player bombard-tower >= 3)
(or	(players-building-type-count target-player krepost >= 3)
	(players-building-type-count target-player castle >= 2))))))
=>
;	(up-chat-data-to-player my-player-number "temporary-goal5: %d" g: temporary-goal5)
;	(up-chat-data-to-player my-player-number "temporary-goal: %d" g: temporary-goal)
	(set-goal migration-state 1); migration-style)
	(up-chat-data-to-player my-player-number "Hamburger-state: %d" g: migration-state)
	(disable-self)); end jump
#else
(defrule
	(true)
=>
	(disable-self)); end jump
#end-if

(defrule
(or	(up-pending-objects c: town-center <= 0)
	(nand	(goal migration-state 1)
		(up-compare-goal migration-zone >= 0)))
=>
	(up-jump-rule 9))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal8 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: town-center-foundation c: 16)
	(up-find-status-local c: town-center c: 16)
	(up-remove-objects search-local object-data-map-zone-id g:!= migration-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal g:= local-total)
	(up-full-reset-search)); rule below tl
(defrule
	(up-compare-goal temporary-goal >= 1)
=>
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-find-local c: villager-class g: villagercount)
	(up-remove-objects search-local object-data-map-zone-id g:!= migration-zone)
	(up-remove-objects search-local object-data-under-attack == 1)
	(up-remove-objects search-local object-data-target == dangerous-animal-class)
	(up-remove-objects search-local object-data-action == actionid-attack)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: town-center-foundation c: 16)
	(up-find-status-remote c: town-center c: 16)
;	(up-find-status-remote c: lumber-camp c: 16)
	(up-remove-objects search-remote object-data-map-zone-id g:!= migration-zone)
;	(up-get-search-state local-total)
;	(up-remove-objects search-remote object-data-tasks-count g:>= local-total)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal temporary-goal >= 1)
=>
	(up-assign-builders c: town-center-foundation c: -1); 0
	(up-remove-objects search-local object-data-index >= 16)
	(up-remove-objects search-remote object-data-tasks-count >= 16)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-local c: 0)
	(up-set-target-object search-remote c: 0)
=>
	(up-chat-data-to-self "Tasking %d more migration builders." g: local-total)
	(up-target-objects 0 action-default -1 -1))
(defrule
	(up-pending-objects c: town-center >= 1)
(or	(up-compare-const wk-game == 1)
	(current-age >= feudal-age))
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: town-center-foundation c: 16)
	(up-find-status-local c: town-center c: 16)
	(up-remove-objects search-local object-data-map-zone-id g:!= starting-zone)
	(up-remove-objects search-local object-data-map-zone-id g:== migration-zone); jic
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
;	(up-object-data object-data-hitpoints <= 1)
	(up-pending-objects c: town-center >= 1)
(or	(up-compare-const wk-game == 1)
	(current-age >= feudal-age))
=>
	(chat-local-to-self "Wrong placement, delete.")
	(up-target-point 0 action-delete -1 -1)
	(up-reset-placement c: town-center))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class g: villagercount)
	(up-remove-objects search-local object-data-map-zone-id g:== migration-zone)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total <= 0)
=>
	(up-assign-builders c: town-center-foundation c: 1))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal8)); end jump

(defrule
(or	(goal underattack yes)
(or	(up-pending-objects c: town-center <= 1)
(or	(up-compare-goal underattack != no)
	(unit-type-count villager-builder g:>= villagercount))))
=>
	(up-jump-rule 4))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number my-player-number)
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: town-center-foundation c: 5)
	(up-remove-objects search-remote object-data-tasks-count >= 4)
	(up-clean-search search-remote object-data-tasks-count search-order-asc)
	(set-goal temporary-goal2 0))
(defrule
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-get-point position-object temporary-point-x)
	(up-get-object-data object-data-map-zone-id temporary-goal3)
	(up-get-object-data object-data-tasks-count temporary-goal4)
	(up-reset-search 1 1 0 0)
	(up-reset-filters)
	(up-filter-exclude -1 actionid-build -1 -1)
	(up-set-target-point temporary-point-x)
	(up-filter-distance c: -1 c: 16)
	(up-find-local c: villager-class g: villagercount)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-map-zone-id g:!= temporary-goal3)
	(set-goal temporary-goal3 4)
	(up-modify-goal temporary-goal3 g:- temporary-goal4)
	(up-remove-objects search-local object-data-index g:>= temporary-goal3)
	(up-target-objects 1 action-default -1 -1))
(defrule
	(up-set-target-object search-remote g: temporary-goal2)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-jump-rule -2))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule
;(or	(up-compare-goal feinde <= 1)
;(or	(and	(up-compare-goal retargetenemy != yes)
;		(up-compare-goal retargetenemy != 6))
(or	(up-compare-const migration-style >= 1)
(or	(players-building-count every-enemy <= 0);;;;;;;;;;;;;;;;;
(or	(and	(players-building-count every-enemy <= 0);
		(players-unit-count every-enemy <= 0));
	(up-timer-status embassy == timer-running)))););); fivesec
=>
	(up-jump-rule 17))
(defrule
	(goal retargetenemy 6)
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal remote-total 0)
	(set-goal temporary-goal2 0)
	(set-goal temporary-goal3 0))

(defrule; end neg jump
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-full-reset-search)
	(up-filter-include -1 -1 -1 off-mainland)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1))
(defrule
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-find-remote c: archery-cannon-class c: 1)
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal3 g:+ remote-total))
(defrule
	(strategic-number sn-focus-player-number < 8)
;	(up-compare-goal temporary-goal3 <= 0)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3))

(defrule
	(true)
=>
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-get-search-state local-total)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 0)
	(set-goal temporary-goal6 0)
	(set-goal temporary-goal7 0))

(defrule; end neg jump
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-filter-include -1 -1 -1 on-mainland)
	(up-find-remote c: building-class c: 1)
	(up-find-remote c: tower-class c: 1)
	(up-find-remote c: wall-class c: 1)
	(up-find-remote c: gate-class c: 1)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal4 g:+ remote-total)
	(up-modify-goal temporary-goal4 g:- temporary-goal2)
	(up-find-remote c: scout-cavalry-class c: 1)
	(up-find-remote c: villager-class c: 1)
	(up-find-remote c: infantry-class c: 1)
	(up-find-remote c: archery-class c: 1)
	(up-find-remote c: archery-cannon-class c: 1))
(defrule
(not	(stance-toward focus-player ally))
	(player-in-game focus-player);
	(goal temporary-goal7 0)
	(up-compare-goal temporary-goal4 >= 1)
=>
	(up-modify-goal temporary-goal7 s:= sn-focus-player-number))
(defrule
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
	(up-compare-goal temporary-goal4 g:== temporary-goal5)
	(strategic-number sn-focus-player-number s:== sn-target-player-number)
	(up-compare-goal temporary-goal4 >= 1)
;	(goal inseln no)
	(strategic-number sn-target-player-number g:!= temporary-goal7)
=>
	(up-modify-goal temporary-goal g:= temporary-goal7)
	(up-modify-sn sn-target-player-number g:= temporary-goal7)
	(set-goal retargetenemy 6))
(defrule
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-find-remote c: cavalry-class c: 1)
	(up-find-remote c: cavalry-archer-class c: 1)
	(up-find-remote c: cavalry-cannon-class c: 1)
	(up-find-remote c: monastery-class c: 1)
	(up-find-remote c: siege-weapon-class c: 1)
	(up-find-remote c: scorpion-class c: 1)
	(up-find-remote c: packed-trebuchet-class c: 1)
	(up-find-remote c: unpacked-trebuchet-class c: 1)
	(up-find-remote c: petard-class c: 1))
(defrule
(not	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal2 g:= remote-total)
	(up-modify-goal temporary-goal5 g:= temporary-goal4)
	(up-set-target-object search-remote c: 0)
;	(up-get-object-data object-data-maxhp temporary-goal8)
;	(up-chat-data-to-player my-player-number "maxhp: %d" g: temporary-goal8)
;	(up-chat-data-to-player my-player-number "sn-focus-player-number: %d" s: sn-focus-player-number)
	(up-get-point position-object point-x))
(defrule
	(strategic-number sn-focus-player-number < 8)
;	(goal temporary-goal2 0);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(or	(up-compare-goal temporary-goal2 <= 0)
;	(up-compare-goal temporary-goal4 <= 0))
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -6))

(defrule
	(goal temporary-goal2 0)
	(up-compare-goal temporary-goal3 >= 1)
	(up-compare-goal gl-game-time g:>= map-treatment-switch-time)
	(up-compare-goal inseln != yes)
=>
	(chat-to-player my-player-number "Enemies found on different island only.")
	(set-goal inseln yes))
(defrule
	(up-compare-goal temporary-goal2 >= 1)
	(up-compare-goal inseln != no)
=>
	(chat-to-player my-player-number "Enemies found on same island.")
;	(up-send-flare point-x);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(set-goal inseln no)
	(up-get-fact game-time 0 map-treatment-switch-time)
	(up-modify-goal map-treatment-switch-time c:+ 120))
(defrule
	(up-compare-goal temporary-goal2 >= 1)
	(goal temporary-goal4 0)
	(goal attacking yes)
	(goal attackmethod TSA)
(or	(goal inseln no)
	(players-building-count target-player <= 0))
=>
	(chat-local-to-self "Targeting invaders.")
	(up-filter-include cmdid-military -1 -1 on-mainland)
	(up-filter-exclude -1 actionid-attack orderid-explore warship-class)
;	(up-modify-goal temporary-goal g:= my-mpop)
;	(up-modify-goal temporary-goal c:min 240)
;	(up-find-local c: all-units-class g: temporary-goal)
	(up-find-local c: all-units-class c: 1)
	(up-target-objects 0 action-default -1 -1))
(defrule
	(goal retargetenemy 6)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
(or	(not	(player-in-game focus-player))
	(stance-toward focus-player ally))))
	(strategic-number sn-target-player-number != 0); none
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(chat-to-player my-player-number "Debugging focus/target-player. 5")
)


#load-if-not-defined DE-AVAILABLE
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-defined UP-PLAYER-1
(defrule
	(true)
=>
	(up-change-name "[Promi] INnoVation")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-2
(defrule
	(true)
=>
	(up-change-name "[Promi] ByuN")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-3
(defrule
	(true)
=>
	(up-change-name "[Promi] Dark")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-4
(defrule
	(true)
=>
	(up-change-name "[Promi] soO")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-5
(defrule
	(true)
=>
	(up-change-name "[Promi] Zest")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-6
(defrule
	(true)
=>
	(up-change-name "[Promi] sOs")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-7
(defrule
	(true)
=>
	(up-change-name "[Promi] MMA")
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-8
(defrule
	(true)
=>
	(up-change-name "[Promi] Maru")
	(disable-self))
#end-if
#end-if
#end-if
#end-if
#load-if-defined DIFFICULTY-HARDEST; NEVER active on the Definitive Edition, check #load-if-not-defined DE-AVAILABLE above
(defrule
	(up-compare-goal landnomad >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(cc-add-resource wood 40)
	(cc-add-resource food 40)
	(disable-self))
(defrule
	(current-age == dark-age)
=>
	(cc-add-resource wood -500)
	(cc-add-resource food -475)
	(cc-add-resource gold -500)
	(cc-add-resource stone -500)
	(disable-self))
(defrule
	(current-age == feudal-age)
=>
	(cc-add-resource wood -400)
	(cc-add-resource food -425)
	(cc-add-resource gold -450)
	(cc-add-resource stone -480)
	(disable-self))
(defrule
	(current-age == castle-age)
=>
	(cc-add-resource wood -380)
	(cc-add-resource food -350)
	(cc-add-resource gold -400)
	(cc-add-resource stone -400)
	(disable-self))
(defrule
	(current-age >= imperial-age)
=>
	(cc-add-resource wood -325)
	(cc-add-resource food -300)
	(cc-add-resource gold -300)
	(cc-add-resource stone -400)
	(disable-self))
(defrule
	(game-time >= 333)
=>
	(cc-add-resource wood 75)
	(cc-add-resource food 75); 100
	(disable-self))
(defrule
	(taunt-detected any-human 200)
	(game-time >= 444)
=>
	(cc-add-resource wood 20)
	(cc-add-resource food 40)
	(cc-add-resource gold 20)
	(cc-add-resource stone 5)
	(disable-self))
(defrule
	(game-time >= 120)
(not	(taunt-detected any-human 200))
	(timer-triggered MSuperiority)
(or	(game-time >= 540)
(or	(current-age >= feudal-age)
(or	(players-current-age any-enemy >= feudal-age)
	(players-current-age any-ally >= feudal-age))))
=>
	(cc-add-resource wood 22)
	(cc-add-resource food 22)
	(cc-add-resource gold 22)
	(cc-add-resource stone 1))
(defrule
	(game-time >= 120)
	(taunt-detected any-human 200)
	(timer-triggered twentysec)
(or	(game-time >= 510)
(or	(current-age >= feudal-age)
(or	(players-current-age any-enemy >= feudal-age)
	(players-current-age any-ally >= feudal-age))))
=>
	(cc-add-resource wood 22)
	(cc-add-resource food 22)
	(cc-add-resource gold 22)
	(cc-add-resource stone 1))
#load-if-defined UP-PLAYER-2
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Promiskuitiv")
	(chat-to-all text-promiskuitiv); "Thanks for playing with my AI!"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-3
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Xhip_")
	(chat-to-all text-xhip); "I love co-op vs AI games. <3"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-4
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "II2N")
	(chat-to-all text-II2N); "Well... Good luck!"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-5
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "Scottish_Hero")
	(chat-to-all text-Scot); "Let's make this quick so i can grab a cuppa."
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-6
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "The_Offwo")
	(chat-to-all text-Offwo); "I hope you're ready for this."
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-7
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "John_the_Late")
	(chat-to-all text-John); "A-am i late?"
	(disable-self))
#end-if
#load-if-defined UP-PLAYER-8
(defrule
	(taunt-detected any-human 200)
=>
	(up-change-name "scripter16")
	(chat-to-all text-scripter); "My town is going to look so gorgeous!"
	(disable-self))
#end-if
#end-if
#end-if; was non-DE


(defrule
	(up-compare-goal attacking != no)
	(up-compare-goal attackStart != yes)
(or	(up-compare-goal drushmicro == no)
	(strategic-number sn-current-age >= imperial))
	(strategic-number sn-percent-attack-soldiers < 100)
	(strategic-number sn-maximum-town-size <= 14)
	(not(enemy-buildings-in-town))
	(players-building-count any-enemy >= 1)
(nand	(current-age >= feudal-age)
	(players-current-age target-player <= dark-age))
=>
	(set-goal attacking no)
	(chat-to-player my-player-number "Debugging attack-goal => No."))
(defrule
	(up-compare-goal attacking != yes)
(or	(up-compare-goal drushmicro == no)
	(strategic-number sn-current-age >= imperial))
(or	(strategic-number sn-percent-attack-soldiers >= 100)
	(strategic-number sn-maximum-town-size >= 70))
	(players-building-count any-enemy >= 1)
=>
	(set-goal attacking yes)
	(chat-to-player my-player-number "Debugging attack-goal => Yes."))

#load-if-not-defined ISLANDS-MAP ; always 'yes' on islands
#load-if-not-defined TEAM-ISLANDS-MAP
(defrule
	(goal enemy-boats no)
	(goal inseln no)
(or	(players-building-type-count any-enemy dock > 0)
(or	(players-unit-type-count any-enemy fishing-ship > 0)
	(up-compare-goal biggestenemynavy >= 1)))
=>
	(set-goal enemy-boats yes)
	(set-goal map water)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1200))
(defrule 
	(goal inseln no)
	(players-building-type-count every-enemy dock <= 0)
	(players-unit-type-count every-enemy fishing-ship <= 0)
	(up-compare-goal biggestenemynavy <= 0)
	(goal enemy-boats yes)
=>
	(set-goal enemy-boats no)
	(set-strategic-number sn-minimum-water-body-size-for-dock 1500))
#end-if
#end-if

(defrule
	(goal fishing yes)
;	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq)
;	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq)
;(or
	(cc-players-unit-type-count 0 shore-fish-class < shorefishreq2)
	(cc-players-unit-type-count 0 ocean-fish-class < deepfishreq2);)
=>
	(set-goal fishing no)
;	(disable-self)
)
(defrule
	(goal fishing no)
(or	(goal map water)
	(building-type-count-total dock >= 1))
	(up-compare-const defined-land != 1)
(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
(or	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq)
	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq2)
		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq2))))
=>
	(set-goal fishing yes)
;	(disable-self)
)
(defrule
	(goal fishing yes)
	(wood-amount >= 200)
	(building-type-count-total dock <= 0)
	(unit-type-count villager >= 15)
	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-goal fishing no))
(defrule
	(goal fishing yes)
	(up-compare-goal strategy-type2 != water)
	(unit-type-count-total fishing-ship >= 4); 3
(or	(goal enemy-boats yes);
	(unit-type-count-total fishing-ship >= 8)); 5
	(building-type-count-total dock <= 1)
	(goal inseln no)
=>
	(set-goal fishing no))



(defrule
(or	(goal inseln yes)
(or	(map-type islands)
	(map-type team-islands)))
(or	(goal enemy-boats no)
	(strategic-number sn-minimum-water-body-size-for-dock > 900))
=>
	(set-goal enemy-boats yes)
	(set-goal map water)
	(set-strategic-number sn-minimum-water-body-size-for-dock 900))

(defrule
	(players-building-count target-player <= 0)
=>
	(up-jump-rule 4))
(defrule
	(population-cap >= 300)
=>
	(up-get-fact population-cap 0 temporary-goal)
	(up-modify-goal temporary-goal c:- 100)
	(up-modify-goal temporary-goal c:z/ 100)
	(up-modify-sn sn-minimum-attack-group-size g:max temporary-goal)
	(up-modify-sn sn-maximum-attack-group-size g:max allowed-num-military)
	(up-modify-sn sn-maximum-attack-group-size c:min 20)
	(up-jump-rule 4))
(defrule
	(strategic-number sn-target-player-number g:== winning-player)
	(up-compare-goal victory-time < 1000)
	(up-compare-goal victory-time >= 0)
=>
	(up-jump-rule 2))
(defrule
(or	(difficulty == easiest)
(or	(difficulty == easy)
	(difficulty == moderate)))
=>
	(set-goal temporary-goal diff-id)
	(up-modify-goal temporary-goal c:max 1)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal g:min allowed-num-military)
	(up-modify-sn sn-minimum-attack-group-size g:max temporary-goal)
	(up-modify-sn sn-maximum-attack-group-size g:max allowed-num-military)
	(up-modify-sn sn-maximum-attack-group-size c:min 20)
	(up-jump-rule 2))
(defrule
(or	;(and
	(up-compare-const diff-fp <= 0)
	;	(difficulty == hard))
	(and	(up-compare-goal gl-threat-time >= 8000)
		(strategic-number siege <= 0)))
=>
	(set-goal temporary-goal diff-id)
	(up-modify-goal temporary-goal c:max 1)
	(up-modify-goal temporary-goal c:* 2)
	(up-modify-goal temporary-goal g:min allowed-num-military)
	(up-modify-sn sn-minimum-attack-group-size g:max temporary-goal)
	(up-modify-sn sn-maximum-attack-group-size g:max allowed-num-military)
	(up-modify-sn sn-maximum-attack-group-size c:min 20)
	(up-jump-rule 1)); end jump
(defrule
(or	(strategic-number sn-minimum-attack-group-size != 1)
	(strategic-number sn-maximum-attack-group-size != 1))
(nor	(map-type islands)
	(map-type team-islands))
	(up-compare-goal inseln != yes)
	(up-compare-goal drushmicro != yes)
	(up-compare-goal scoutmicro != yes)
=>
	(set-strategic-number sn-minimum-attack-group-size 1)
;	(up-chat-data-to-self "minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(set-strategic-number sn-maximum-attack-group-size 1)); end jump

(defrule
(or	(strategic-number sn-minimum-attack-group-size <= 0)
(or	(strategic-number sn-minimum-attack-group-size g:> my-mpop)
(or	(strategic-number sn-minimum-attack-group-size g:> allowed-num-military)
	(strategic-number sn-minimum-attack-group-size s:> sn-maximum-attack-group-size))))
=>
;	(up-chat-data-to-self "minimum-attack-group-size (SF): %d" s: sn-minimum-attack-group-size)
	(up-modify-sn sn-minimum-attack-group-size g:min my-mpop)
	(up-modify-sn sn-minimum-attack-group-size g:min allowed-num-military)
	(up-modify-sn sn-minimum-attack-group-size s:min sn-maximum-attack-group-size)
	(up-modify-sn sn-minimum-attack-group-size c:min 20)
	(up-modify-sn sn-minimum-attack-group-size c:max 1))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 5)
	(strategic-number sn-maximum-attack-group-size < 5))
(or	(goal inseln yes)
(or	(map-type islands)
	(map-type team-islands)))
	(up-compare-goal drushmicro != yes)
	(up-compare-goal scoutmicro != yes);(up-compare-goal strategy != drush)
(not	(research-completed ri-careening))
=>
	(set-strategic-number sn-minimum-attack-group-size 5)
;	(up-chat-data-to-self "minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(set-strategic-number sn-maximum-attack-group-size 5))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 8)
	(strategic-number sn-maximum-attack-group-size < 10))
(or	(goal inseln yes)
(or	(map-type islands)
	(map-type team-islands)))
	(research-completed ri-careening)
(not	(research-completed ri-dry-dock))
=>
	(set-strategic-number sn-minimum-attack-group-size 8)
;	(up-chat-data-to-self "minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(set-strategic-number sn-maximum-attack-group-size 10))

(defrule
	(unit-type-count-total transport-ship >= 1)
(or	(strategic-number sn-minimum-attack-group-size < 8)
	(strategic-number sn-maximum-attack-group-size < 20))
(or	(goal inseln yes)
(or	(map-type islands)
	(map-type team-islands)))
	(research-completed ri-dry-dock)
=>
	(set-strategic-number sn-minimum-attack-group-size 10)
;	(up-chat-data-to-self "minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(set-strategic-number sn-maximum-attack-group-size 20))

(defrule
	(strategic-number sn-attack-group-gather-spacing > 5)
=>
	(set-strategic-number sn-attack-group-gather-spacing 5))
(defrule
	(timer-triggered TSA-timer)
	(goal drushmicro no)
	(strategic-number sn-percent-attack-soldiers >= 100)
	(strategic-number sn-attack-group-gather-spacing <= 5)
=>
	(up-modify-sn sn-attack-group-gather-spacing g:= map-size); 50
	(set-strategic-number sn-minimum-attack-group-size 1)
;	(up-chat-data-to-self "minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(set-strategic-number sn-maximum-attack-group-size 1))

(defrule ; debug rule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
	(stance-toward focus-player ally)))
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
(not	(stance-toward target-player ally))
	(player-in-game target-player)
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number); to prevent further bugs
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number); should be an enemy
	(up-chat-data-to-player my-player-number "Debugging focus player: %d" g: temporary-goal))
#load-if-defined KING-OF-THE-HILL
(defrule
	(up-compare-goal gl-game-time s:>= sn-home-exploration-time)
(or	(players-building-count every-enemy >= 1)
	(and	(up-compare-goal strategy-type <= castle-war)
		(players-building-count any-enemy >= 1)))
	(up-compare-goal victory-time <= -1)
	(up-timer-status sheepscout != timer-running)
(nand	(up-compare-goal deer-luring >= 1)
	(up-compare-goal deer-luring <= 2))
=>
	(chat-local-to-self "Attempting to capture the monument.")
	(up-send-scout group-type-land-explore scout-center)
	(disable-self))
(defrule
	(hold-koh-ruin)
	(strategic-number sn-gather-idle-soldiers-at-center != 1)
	(game-time >= 2200)
	(goal underattack no)
(nor	(town-under-attack)
	(enemy-buildings-in-town))
	(up-compare-goal gl-threat-time >= 60000)
=>
	(set-goal temporary-goal 12320)
	(up-get-point position-center point-x))
#load-if-defined KING-OF-THE-HILL
(defrule
	(strategic-number sn-gather-idle-soldiers-at-center != 1)
	(up-timer-status unit-control-flare-timer2 == timer-running)
(nor	(cc-players-unit-type-count any-human-ally flare >= 1)
	(taunt-detected any-human-ally tFlarePatrol))
	(up-compare-goal victory-time < 500)
	(up-compare-goal victory-time >= 0)
=>
	(set-goal temporary-goal 12320)
	(up-get-point position-center point-x))
#end-if
(defrule
	(goal temporary-goal 12320)
	(up-point-zone point-x g:== main-zone)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center 1))
#end-if

(defrule
	(up-compare-goal armytech < feudal)
(or	(up-research-status c: ri-fletching >= research-pending); complete
(or	(up-research-status c: ri-scale-mail >= research-pending)
(or	(up-research-status c: ri-scale-barding >= research-pending)
(or	(up-research-status c: ri-forging >= research-pending)
	(and	(military-population >= 5)
		(current-age >= feudal-age))))))
=>
	(set-goal armytech feudal))
(defrule
	(up-compare-goal armytech < castlea)
(or	(up-research-status c: ri-bodkin-arrow >= research-pending)
(or	(up-research-status c: ri-chain-mail >= research-pending)
(or	(up-research-status c: ri-chain-barding >= research-pending)
(or	(up-research-status c: ri-forging >= research-pending)
	(unit-type-count knight-line >= 5)))))
=>
	(set-goal armytech castlea))
(defrule
	(up-compare-goal armytech < castlea)
(or	(up-research-status c: ri-crossbow >= research-pending)
(or	(up-research-status c: ri-elite-skirmisher >= research-pending)
(or	(up-research-status c: ri-pikeman >= research-pending)
(or	(up-research-status c: ri-long-swordsman >= research-pending)
	(up-research-status c: ri-light-cavalry >= research-pending))))); complete
=>
	(set-goal armytech castlea))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-bracer >= research-complete)
(or	(up-research-status c: ri-plate-mail >= research-complete)
(or	(up-research-status c: ri-plate-barding >= research-complete)
(or	(up-research-status c: my-unique-unit-upgrade >= research-complete)
(or	(up-research-status c: ri-galleon >= research-complete)
	(up-research-status c: ri-chemistry >= research-complete))))))
=>
	(set-goal armytech imperial))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-cavalier >= research-complete)
(or	(up-research-status c: ri-two-handed-swordsman >= research-complete)
(or	(up-research-status c: ri-heavy-scorpion >= research-complete)
(or	(up-research-status c: ri-onager >= research-complete)
(or	(up-research-status c: ri-elite-longboat >= research-complete)
	(up-research-status c: ri-hussar >= research-complete))))))
=>
	(set-goal armytech imperial))
(defrule
	(up-compare-goal armytech < imperial)
(or	(up-research-status c: ri-halberdier >= research-complete)
(or	(up-research-status c: ri-elite-eagle-warrior >= research-complete)
(or	(up-research-status c: ri-heavy-cavalry-archer >= research-complete)
(or	(up-research-status c: ri-heavy-camel >= research-complete)
(or	(up-research-status c: ri-elite-turtle-ship >= research-complete)
	(up-research-status c: ri-arbalest >= research-complete))))))
=>
	(set-goal armytech imperial))


#load-if-not-defined WONDER-RACE
#load-if-not-defined SUDDEN-DEATH
(defrule
	(up-compare-goal dreitc != no)
	(building-type-count-total town-center < 3)
	(population < max-civ-pop); hmm
	(up-compare-goal custom-civ-pop < up-max-civ); hmm
	(civilian-population < up-max-civ); hmm
=>
	(set-goal dreitc no))
#load-if-not-defined UP-POCKET-POSITION
(defrule
(or	(building-type-count-total siege-workshop >= 1)
(or	(building-type-count-total stable >= 3)
(or	(building-type-count-total archery-range >= 3)
(or	(building-type-count-total barracks >= 3)
(or	(building-type-count-total castle >= 1)
(or	(goal enemy-goal 0)
(or	(civilian-population >= 39);
	(strategic-number sn-military-superiority >= 0)))))))); 1
=>
	(up-jump-rule 1))
(defrule
	(goal dreitc no)
	(goal position-goal flank)
	(goal strategy usual)
	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-military-superiority <= -1)
(or	(up-compare-goal enemy-goal != 0)
(or	(strategic-number sn-military-superiority <= -2)
	(goal underattack yes))); defend hm
	(building-type-count castle <= 0); test
	(building-type-count-total town-center >= 1)
=>
	(set-goal dreitc yes))
#end-if
(defrule
	(up-compare-goal dreitc != yes)
(or	(building-type-count-total town-center >= 3)
(or	(population >= max-civ-pop); hmm
(or	(up-compare-goal custom-civ-pop >= up-max-civ); hmm
	(civilian-population >= up-max-civ)))); hmm
	(building-type-count-total town-center >= 1)
=>
	(set-goal dreitc yes))
#else; SD
(defrule
	(up-compare-goal dreitc != yes)
	(building-type-count-total town-center >= 1)
=>
	(set-goal dreitc yes))
#end-if
#else; WR
(defrule
	(up-compare-goal dreitc != yes)
	(building-type-count-total town-center >= 1)
=>
	(set-goal dreitc yes))
#end-if
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME
(defrule
	(up-compare-const diff-fp != 1)
	(up-compare-goal dreitc != yes)
	(building-type-count-total town-center >= 1)
=>
	(set-goal dreitc yes))
#end-if
#end-if
#end-if
#end-if

(defrule
	(current-age == feudal-age)
	(strategic-number sn-current-age < feudal)
=>
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 15)
	(set-strategic-number sn-current-age feudal))
(defrule
	(current-age == castle-age)
	(strategic-number sn-current-age < castlea)
=>
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 18)
	(set-strategic-number sn-current-age castlea))
(defrule
	(current-age >= imperial-age)
	(strategic-number sn-current-age < imperial)
=>
	(up-modify-sn sn-maximum-town-size c:max 10)
	(up-modify-sn sn-maximum-town-size c:min 26)
	(set-strategic-number sn-current-age imperial))

#load-if-defined DARK-AGE-END
(defrule
	(current-age >= dark-age)
	(strategic-number sn-current-age < imperial)
=>
	(set-goal dreitc yes)
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(up-compare-goal strategy-type >= feudal-war)
	(up-compare-goal strategy != usual)
=>
	(chat-to-player my-player-number "Resetting strategy, age end.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(set-goal strategylocked no))
#else
(defrule
	(strategic-number sn-current-age >= dfeudal)
	(current-age == dark-age)
	(up-research-status c: feudal-age <= research-available)
=>
;	(chat-to-player my-player-number "Age advancement was disturbed.")
	(set-strategic-number sn-current-age dark))
(defrule
	(strategic-number sn-current-age < dfeudal)
	(current-age == dark-age)
	(up-research-status c: feudal-age == research-pending)
=>
	(set-strategic-number sn-current-age dfeudal))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(current-age >= feudal-age)
(or	(population >= 50)
(or	(building-type-count blacksmith >= 1)
(or	(civilian-population >= up-max-civ)
	(population >= del-civ-pop)))); test
	(strategic-number sn-current-age < imperial)
=>
	(set-goal dreitc yes)
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(goal attacking yes)
	(goal underattack no)
	(can-build watch-tower)
=>
	(build-forward watch-tower)
	(up-jump-rule 1))
(defrule
	(building-type-count-total watch-tower < 16)
	(can-build watch-tower)
=>
	(build watch-tower)); end jump
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
=>
	(chat-to-player my-player-number "Resetting strategy, age end.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(set-goal strategylocked no))
#else
(defrule
	(strategic-number sn-current-age >= fcastlea)
	(current-age == feudal-age)
	(up-research-status c: castle-age <= research-available)
=>
;	(chat-to-player my-player-number "Age advancement was disturbed.")
	(set-strategic-number sn-current-age feudal))
(defrule
	(strategic-number sn-current-age < fcastlea)
	(current-age == feudal-age)
	(up-research-status c: castle-age == research-pending)
=>
	(set-strategic-number sn-current-age fcastlea))
#end-if
#load-if-defined CASTLE-AGE-END
(defrule
	(current-age >= castle-age)
(or	(population >= 75)
(or	(building-type-count castle >= 1)
(or	(civilian-population >= up-max-civ)
	(population >= del-civ-pop)))); test
	(strategic-number sn-current-age < imperial)
=>
	(set-goal researchplan yes)
	(set-goal milunits yes)
	(set-strategic-number sn-current-age imperial))
(defrule
	(up-compare-goal strategy-type >= imperial-war)
	(up-compare-goal strategy != usual)
=>
	(chat-to-player my-player-number "Resetting strategy, age end.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(set-goal strategylocked no))
#else
(defrule
	(strategic-number sn-current-age >= imperial)
	(current-age == castle-age)
	(up-research-status c: imperial-age <= research-available)
=>
;	(chat-to-player my-player-number "Age advancement was disturbed.")
	(set-strategic-number sn-current-age castlea))
(defrule
	(strategic-number sn-current-age < imperial)
	(current-age == castle-age)
	(up-research-status c: imperial-age >= research-pending); ==
=>
	(set-strategic-number sn-current-age imperial))
#end-if
(defrule
	(strategic-number sn-current-age < imperial)
	(building-type-count town-center <= 0)
	(unit-type-count-total villager <= 0)
	(unit-type-count-total monk <= 0)
	(unit-type-count-total monastery <= 0)
=>
	(set-strategic-number sn-current-age imperial))
#load-if-defined DARK-AGE-START
(defrule
	(current-age == dark-age)
=>
	(disable-self))
#end-if
#load-if-defined FEUDAL-AGE-START
(defrule
	(current-age == feudal-age)
=>
	(disable-self))
#end-if
#load-if-defined CASTLE-AGE-START
(defrule
	(current-age == castle-age)
=>
	(disable-self))
#end-if
#load-if-defined IMPERIAL-AGE-START
(defrule
	(current-age == imperial-age)
=>
	(disable-self))
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age == imperial-age)
=>
	(disable-self))
#end-if



(defrule
(or	(goal researchplan yes)
	(gold-amount >= 2500))
	(goal underattack no)
	(goal defend no); dead vils
	(building-type-count-total dock <= 0)
	(unit-type-count-total transport-ship <= 0)
	(wood-amount >= 200)
	(goal enemy-boats yes)
	(goal attacking yes)
	(strategic-number sn-minimum-water-body-size-for-dock > 333)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 333))

(defrule
	(true)
=>
	(set-goal siegereq no)
	(up-get-fact unit-type-count trebuchet-set temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal2 g:= temporary-goal)
	(up-get-fact unit-type-count battering-ram-line temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
	(up-get-fact unit-type-count bombard-cannon temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal2 g:+ temporary-goal)
	(up-get-fact unit-type-count petard temporary-goal)
	(up-modify-goal temporary-goal c:max 0)
	(up-modify-goal temporary-goal2 g:+ temporary-goal))
(defrule
(or	(current-age <= feudal-age)
(or	(population < siege-pop); del-civ-pop
(or	(up-compare-goal temporary-goal2 >= 8)
(or	(up-compare-goal my-mpop g:>= allowed-num-military)
(or	(unit-type-count bombard-cannon-line >= 6)
(or	(unit-type-count trebuchet-set >= 3)
	(unit-type-count battering-ram-line >= 5)))))))
=>
	(set-goal siegereq yes))

(defrule
(not	(up-pending-placement c: dock))
	(strategic-number sn-dock-placement-mode != 0)
=>
	(set-strategic-number sn-dock-placement-mode 0)); standard
(defrule
	(strategic-number sn-dock-placement-mode != 1)
	(goal underattack no)
(or	(and	(up-compare-goal strategy-type <= castle-war)
		(and	(up-compare-goal strategy-type2 == water)
			(nand	(up-compare-goal gr-var >= 2)
				(strategic-number sn-current-age <= feudal))))
;(or	(building-type-count dock >= 5)
	(and	(strategic-number sn-current-age >= imperial)
		(population >= max-civ-pop)));)
=>
	(set-strategic-number sn-dock-placement-mode 1))
(defrule
	(strategic-number sn-dock-placement-mode != -1)
	(building-type-count dock <= 4); hm
(or	(goal underattack yes)
	(and	(or	(up-compare-goal strategy-type >= imperial-war)
		(or	(up-compare-goal strategy-type2 != water)
			(and	(up-compare-goal biggestenemynavy >= 4); 11
				(up-compare-goal gl-threat-time < 30000))))
		(building-type-count-total dock < 1)))
=>
	(set-strategic-number sn-dock-placement-mode -1))
(defrule
	(strategic-number sn-dock-placement-mode != -1)
	(building-type-count dock <= 4); hm
(or	(and	(up-compare-goal gr-var >= 2)
		(goal strategy grush))
	(and	(building-type-count dock <= 2)
		(and	(up-compare-goal gl-threat-time < 30000)
			(up-compare-goal navycount g:< enemyfocusnavy))))
=>
	(set-strategic-number sn-dock-placement-mode -1))



(defrule
	(up-compare-goal enemyState <= imperial)
	(players-current-age target-player >= imperial-age)
=>
	(set-goal enemyState imperial))
(defrule
(or	(up-compare-goal enemyState <= castlea)
	(up-compare-goal enemyState >= imperial))
	(players-current-age target-player == castle-age)
=>
	(set-goal enemyState castlea))
(defrule
(or	(up-compare-goal enemyState <= feudal)
	(up-compare-goal enemyState >= castlea))
	(players-current-age target-player == feudal-age)
=>
	(set-goal enemyState feudal))
(defrule
(or	(up-compare-goal enemyState <= dark)
	(up-compare-goal enemyState >= feudal))
	(players-current-age target-player <= dark-age)
=>
	(set-goal enemyState dark))
(defrule
	(up-compare-goal enemyState < dfeudal)
	(up-compare-goal scoreTDiff <= -31)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player <= dark-age)
=>
;	(chat-local-to-self "Enemy clicked up to feudal.")
	(set-goal enemyState dfeudal))
(defrule
	(up-compare-goal enemyState < fcastlea)
	(up-compare-goal scoreTDiff <= -66)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player == feudal-age)
=>
;	(chat-local-to-self "Enemy clicked up to castle.")
	(set-goal enemyState fcastlea))
(defrule
	(up-compare-goal enemyState < cimperial)
	(up-compare-goal scoreTDiff <= -122)
	(players-current-age-time target-player >= 12)
	(players-current-age target-player == castle-age)
=>
;	(chat-local-to-self "Enemy clicked up to imp.")
	(set-goal enemyState cimperial))

#load-if-not-defined UP-POCKET-POSITION ; just for flanks
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined INFINITE-RESOURCES-START
#load-if-not-defined DEATH-MATCH
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 13))
(defrule
;(or	(goal control-goal 7); test
(or	(players-building-count every-enemy <= 0)
(or	(up-compare-goal targetdistance >= 133); 100
;(or	(building-type-count town-center >= 2)
(or	(up-compare-goal strategy-type <= feudal-war)
;(or	(goal drushmicro yes); test
	(strategic-number sn-current-age >= castlea))));););)
=>
	(up-jump-rule 7))

(defrule
	(up-compare-goal enemy-goal != drush)
	(game-time < 720)
	(players-current-age target-player == dark-age)
	(players-military-population target-player >= 4)
	(current-age == dark-age)
;nn	(strategic-number sn-military-superiority <= -1)
=>
	(set-goal enemy-goal drush))

(defrule
	(up-compare-goal enemy-goal != flush)
	(up-compare-goal my-cpop g:> target-cpop)
	(players-civilian-population target-player < 26)
	(strategic-number sn-current-age <= dark)
	(up-compare-goal enemyState >= dfeudal)
;	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal total-food-amount < 1200); 1000
=>
	(set-goal enemy-goal flush))
(defrule
	(up-compare-goal enemy-goal != flush)
	(strategic-number sn-current-age <= dark)
	(up-compare-goal total-food-amount < 1200); 1000
	(players-current-age target-player == dark-age)
=>
	(up-modify-goal temporary-goal g:= my-cpop)
	(up-modify-goal temporary-goal c:+ eflush-vills))
(defrule
	(up-compare-goal enemy-goal != flush)
	(up-compare-goal temporary-goal g:>= target-cpop)
	(players-civilian-population target-player < 26)
	(strategic-number sn-current-age <= dark)
	(up-compare-goal total-food-amount < 1200); 1000
	(players-current-age target-player == dark-age)
=>
	(set-goal enemy-goal flush))
(defrule
	(game-time < 810)
(or	(up-compare-goal targetdistance < 90)
	(up-compare-const mp-game == 0))
	(current-age == dark-age)
	(strategic-number sn-military-superiority <= 0)
	(players-current-age target-player == feudal-age)
(or	(and	(players-current-age-time target-player >= 35)
		(players-military-population target-player >= 4))
		(players-military-population target-player >= 6))
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(game-time < 1080)
(or	(strategic-number sn-military-superiority <= -2)
	(players-military-population target-player >= 12)); 16
	(players-military-population target-player g:> my-mpop)
	(players-current-age target-player == feudal-age)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush))
(defrule
	(up-compare-goal position-goal != pocket)
(or	(players-military-population target-player >= 6)
	(up-enemy-units-in-town >= 3))
	(players-military-population target-player g:> my-mpop)
	(strategic-number sn-current-age <= dfeudal)
	(players-current-age target-player == feudal-age)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush)
	(disable-self)); end jump

(defrule
(or	(game-time >= 1140)
(or	(up-compare-goal enemy-goal == rush)
(or	(up-compare-goal position-goal != flank)
(or	(building-type-count castle >= 1)
(or	(strategic-number sn-current-age >= imperial)
(or	(strategic-number sn-military-superiority >= 1)
	(and	(goal defend no)
		(strategic-number sn-military-superiority >= -2))))))))
=>
	(up-jump-rule 4))
(defrule
	(up-compare-goal my-cpop g:> target-cpop)
	(players-civilian-population target-player < 30)
	(strategic-number sn-current-age <= feudal)
	(up-compare-goal enemyState >= fcastlea)
	(up-compare-goal strategy-type != castle-war); hmm
	(up-compare-goal total-food-amount < 1300); test
	(strategic-number sn-current-age >= dfeudal)
=>
	(chat-to-player my-player-number "The enemy might try to rush us.")
	(enable-timer scout 2)
	(set-goal enemy-goal rush))
(defrule
	(game-time <= 960)
	(players-current-age target-player == feudal-age)
	(players-current-age-time target-player >= 120)
	(players-military-population target-player <= 3)
	(players-building-type-count target-player watch-tower <= 1); hopefully no sling or trush
(or	(players-building-type-count target-player market <= 0)
	(players-building-type-count target-player barracks >= 1))
	(strategic-number sn-current-age >= dfeudal)
=>
	(chat-to-player my-player-number "The enemy might try to rush us.2")
	(enable-timer scout 2)
	(set-goal enemy-goal rush))
(defrule
	(game-time <= 1020)
	(players-current-age target-player >= castle-age)
	(strategic-number sn-current-age >= dfeudal)
=>
	(chat-to-player my-player-number "The enemy might try to rush us.3")
	(enable-timer scout 2)
	(set-goal enemy-goal rush))
(defrule
	(game-time <= 1050)
	(players-military-population target-player <= 3)
	(players-current-age target-player >= castle-age)
	(strategic-number sn-current-age >= dfeudal)
=>
	(chat-to-player my-player-number "The enemy might try to rush us.4")
	(enable-timer scout 2)
	(set-goal enemy-goal rush)); end jump
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(timer-triggered embassy); anti-spam
	(goal enemy-goal drush)
(or	(military-population >= 6)
(or	(strategic-number sn-military-superiority >= 1)
(or	(game-time >= 840)
	(and	(current-age >= feudal-age)
		(building-type-count archery-range >= 1)))))
	(goal underattack no)
	(strategic-number sn-military-superiority >= -1)
=>
	(set-goal enemy-goal 0))

(defrule
;	(timer-triggered embassy); anti-spam
	(goal enemy-goal flush)
(or	(game-time >= 1150); 19:00
	(strategic-number sn-military-superiority >= 2))
(or	(game-time >= 1020); 17:00
	(strategic-number sn-military-superiority >= 1))
	(goal underattack no)
(or	(players-military-population target-player g:<= my-mpop)
	(strategic-number sn-military-superiority >= 0))
=>
	(set-goal enemy-goal 0))
(defrule
;	(timer-triggered embassy); anti-spam
	(goal enemy-goal flush)
	(players-current-age target-player == dark-age)
	(players-civilian-population target-player >= 26)
=>
	(set-goal enemy-goal 0))

(defrule
;	(timer-triggered embassy); anti-spam
	(goal enemy-goal rush)
(or	(game-time >= 1350); 22:30
	(strategic-number sn-military-superiority >= 2))
	(goal underattack no)
(or	(population >= del-civ-pop)
(or	(players-military-population target-player g:<= my-mpop)
	(strategic-number sn-military-superiority >= 0)))
=>
	(set-goal enemy-goal 0))

(defrule
(or	(up-compare-goal enemy-goal != 0)
	(up-compare-goal enemy-goal2 != 0))
	(game-time >= 1800)
(or	(strategic-number sn-military-superiority >= -2)
	(up-compare-goal target-cpop >= min-number-vills))
	(strategic-number sn-current-age >= imperial)
=>
	(set-goal enemy-goal 0)
	(set-goal enemy-goal2 0))

(defrule
(nor	(players-civ target-player mayan)
(or	(players-civ target-player aztec)
	(players-civ target-player incan)))
=>
	(up-jump-rule 3))
(defrule
(or	(up-compare-goal position-goal == pocket); test
(or	(players-building-type-count target-player archery-range >= 1)
(or	(players-building-type-count target-player castle >= 1)
(or	(strategic-number skirmsarchers >= 3)
(or	(players-current-age target-player >= imperial-age)
	(up-compare-goal enemy-goal2 == klew))))))
=>
	(up-jump-rule 2))
(defrule
	(game-time < 1440); 24:00
(or	(players-building-type-count target-player barracks >= 3)
(or	(and	(players-building-type-count target-player market >= 1)
		(players-building-type-count target-player barracks >= 2))
	(players-unit-type-count target-player eagle-warrior-line >= 5)))
(or	(goal enemy-goal rush)
	(up-compare-goal enemyState >= fcastlea))
=>
	(set-goal enemy-goal rush)
	(set-goal enemy-goal2 klew))
(defrule
	(game-time < 1440); 24:00
	(strategic-number eagles >= 4); 5
	(up-compare-goal target-cpop <= 27)
	(strategic-number infantry <= 0)
	(strategic-number skirmsarchers <= 0)
	(strategic-number moenchesiege <= 0)
	(up-compare-goal my-cpop g:> target-cpop)
	(players-current-age target-player >= feudal-age)
=>
	(set-goal enemy-goal rush)
	(set-goal enemy-goal2 klew)); end mini-jump
(defrule
	(goal enemy-goal2 klew)
=>
;	(set-goal dreitc yes); don't wait for TCs before farming more
	(up-store-player-name target-player)
	(up-chat-data-to-player my-player-number "%s might rush with eagles." c: 7031232)
	;(up-chat-data-to-player every-ally "%s might rush with eagles." c: 7031232)
	(disable-self))
(defrule
	(goal enemy-goal2 klew)
(or	(strategic-number sn-current-age >= cimperial);
(or	(players-current-age target-player >= imperial-age)
(or	(strategic-number archers >= 3)
(or	(strategic-number siege >= 5)
(or	(players-building-type-count target-player archery-range >= 2)
	(and	(players-military-population target-player < 11)
		(strategic-number sn-military-superiority >= 3)))))))
=>
;	(up-chat-data-to-player my-player-number "%d no klew." s: sn-current-age)
	(set-goal enemy-goal2 0))
(defrule
	(goal enemy-goal2 klew)
(nor	(players-civ target-player mayan)
(or	(players-civ target-player aztec)
	(players-civ target-player incan)))
=>
	(set-goal enemy-goal2 0))

(defrule
	(game-time < 820); 14:00
(or	(players-building-type-count target-player dock >= 3)
	(players-unit-type-count target-player galley-line >= 3))
	(players-current-age target-player <= feudal-age)
(or	(up-compare-goal enemy-goal2 != grush)
	(up-compare-goal enemy-goal != 0))
=>
	(set-goal enemy-goal 0); flush
	(set-goal enemy-goal2 grush))
(defrule
	(up-compare-goal enemy-goal2 == grush)
=>
	(chat-to-player my-player-number "The enemy might try to perform a grush.")
	;(up-chat-data-to-player every-ally "My target-enemy (P%d) seems to be going for" s: sn-target-player-number)
	;(up-chat-data-to-player every-ally "galleys in the feudal-age." s: sn-target-player-number)
	(disable-self))
(defrule
	(up-compare-goal enemy-goal2 == grush)
(or	(game-time >= 1800)
;(or	(goal dreitc yes)
(or	(and	(players-unit-type-count target-player galley-line < 3)
		(players-building-type-count target-player dock < 3))
(or	(up-compare-goal navycount >= 10)
	(strategic-number sn-military-superiority >= 1))));)
=>
	(set-goal enemy-goal2 0))

(defrule
;cuscon	(resource-found wood)
	(up-timer-status upwood <= timer-disabled)
	(strategic-number sn-current-age >= fcastlea)
(or	(strategic-number sn-current-age >= imperial)
(or	(unit-type-count-total villager >= 50)
(or	(unit-type-count villager-wood >= 24); 18
(or	(goal dreitc yes);
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))))
=>
	(enable-timer upwood 2))

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-current-age)
	(up-modify-goal temporary-goal c:min minNavy)
	(up-modify-goal temporary-goal c:max 3)
	(up-modify-goal temporary-goal2 c:= minNavy)
	(up-modify-goal temporary-goal2 c:/ 2)
	(up-modify-goal temporary-goal2 g:max temporary-goal))
(defrule
(or	(population >= max-civ-pop)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(civilian-population >= up-max-civ)
	(and	(unit-type-count-total 213 g:< temporary-goal)
		(unit-type-count-total 225 g:< temporary-goal)))))
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation > 15)
=>
	(set-strategic-number sn-percent-building-cancellation 15))
(defrule
(or	(unit-type-count-total 213 g:>= temporary-goal)
	(unit-type-count-total 225 g:>= temporary-goal))
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
	(civilian-population < up-max-civ)
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation < 90)
=>
;	(chat-local-to-self "Resetting townsize.")
;	(up-modify-sn sn-maximum-town-size c:min 14)
	(set-strategic-number sn-percent-building-cancellation 90))
(defrule
(or	(unit-type-count-total 213 g:>= temporary-goal2)
	(unit-type-count-total 225 g:>= temporary-goal2))
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < up-max-civ)
	(civilian-population < up-max-civ)
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation != 100)
=>
;	(chat-local-to-self "Resetting townsize.")
;	(up-modify-sn sn-maximum-town-size c:min 14)
	(set-strategic-number sn-percent-building-cancellation 100))
(defrule
	(building-type-count town-center <= 0)
(or	(up-pending-objects c: town-center >= 1)
	(building-type-count-total town-center >= 1))
	(strategic-number sn-percent-building-cancellation != 0)
=>
	(set-strategic-number sn-percent-building-cancellation 0))

(defrule
(or	(up-projectile-detected projectile-castle < 18000)
	(up-projectile-detected projectile-bombard-tower < 18000))
	(goal retargetenemy yes)
=>
	(set-strategic-number sn-free-siege-targeting 0))

(defrule
	(up-compare-const dm-building == stable)
	(goal allowdmstable no)
=>
	(set-goal allowdmstable yes))
(defrule
	(up-compare-const dm-building == archery-range)
	(goal allowdmarchery no)
=>
	(set-goal allowdmarchery yes))
(defrule
	(up-compare-const dm-building == barracks)
	(goal allowdmbarracks no)
=>
	(set-goal allowdmbarracks yes))
(defrule
(or	(and	(building-type-count-total stable >= number-stables)
		(building-type-count-total stable >= 1))
(or	(building-type-count-total archery-range >= number-archery-ranges)
	(building-type-count-total barracks >= number-barracks)))
(or	(goal allowdmstable no)
(or	(goal allowdmarchery no)
	(goal allowdmbarracks no)))
=>
	(set-goal allowdmstable yes)
	(set-goal allowdmarchery yes)
	(set-goal allowdmbarracks yes))

(defrule
	(up-compare-const diff-id >= 3)
=>
	(set-strategic-number sn-object-repair-level 3)
	(up-jump-rule 4))
(defrule
	(true)
=>
	(set-strategic-number sn-object-repair-level 20607))
(defrule
(or	(and	(building-type-count town-center < 1)
		(building-available town-center))
	(and	(up-compare-goal relocating >= 1)
		(and	(population < up-max-civ)
			(population < 20)))); 33
=>
	(set-strategic-number sn-object-repair-level 0))
(defrule
(or	(unit-type-count 156 >= 6); 5
(or	(unit-type-count 222 >= 6); 5
(or	(and	(unit-type-count-total villager < 12)
		(unit-type-count-total villager < min-number-vills))
;(or	(and	(unit-type-count 156 >= 3); 2
;		(unit-type-count 222 >= 3)); 3
;(or
	(and	(unit-type-count 156 >= 3); 3
		(unit-type-count 222 >= 3)); 2
;	(goal attacking yes)))
)))
	(goal attacking yes); test
	(strategic-number sn-object-repair-level >= 20000)
=>
	(up-modify-sn sn-object-repair-level c:- 16384)); hmm
(defrule
	(up-compare-const inf-game == 1)
	(strategic-number sn-object-repair-level < 32767)
(or	(unit-type-count-total villager >= 12)
	(unit-type-count-total villager >= min-number-vills))
=>
	(set-strategic-number sn-object-repair-level 32767)); end jump

(defrule
	(up-compare-const inf-game == 1)
(or	(up-idle-unit-count idle-type-villager >= 3)
	(unit-type-count-total villager >= min-number-vills))
	(strategic-number sn-disable-builder-assistance != 0)
=>
;	(chat-local-to-self "Enabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 0)
	(up-jump-rule 1))
(defrule
(or	(up-pending-objects c: stone-wall >= 1)
(or	(up-pending-objects c: fortified-wall >= 1)
(or	(up-pending-objects c: stone-wall-line >= 1)
;nn(or	(up-pending-objects c: 939 >= 1); gate
	(up-pending-objects c: palisade-wall >= 1))));)
	(strategic-number sn-disable-builder-assistance != 0)
=>
;	(chat-local-to-self "Enabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 0))

;(defrule
;	(strategic-number sn-boar-lure-destination != 7)
;	(up-compare-goal livestock-place >= 6400)
;=>
;	(set-strategic-number sn-boar-lure-destination 7)
;	(up-jump-rule 1))
;(defrule
;	(strategic-number sn-boar-lure-destination != 0)
;=>
;	(set-strategic-number sn-boar-lure-destination 0))

(defrule
(or	(up-pending-placement c: mill)
(or	(up-pending-placement c: lumber-camp)
(or	(up-pending-placement c: town-center)
	(up-pending-placement c: town-center-foundation))))
	(strategic-number sn-allow-adjacent-dropsites != 1)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1))

(defrule
	(building-type-count-total mining-camp < 15)
	(strategic-number sn-dropsite-separation-distance != 6)
=>
	(set-strategic-number sn-dropsite-separation-distance 6))
(defrule
	(building-type-count-total mining-camp >= 15)
	(strategic-number sn-dropsite-separation-distance != 10); 12
=>
	(set-strategic-number sn-dropsite-separation-distance 10)); 12
(defrule
	(game-time >= 2400)
	(dropsite-min-distance gold <= -1)
	(dropsite-min-distance stone <= -1)
	(dropsite-min-distance wood <= -1)
	(strategic-number sn-dropsite-separation-distance != 50)
=>
	(set-strategic-number sn-dropsite-separation-distance 50))

(defrule
	(strategic-number sn-filter-under-attack != 0)
=>
	(set-strategic-number sn-filter-under-attack 0))

(defrule
	(up-compare-goal relocating == yes)
=>
	(set-goal relocating 4))
(defrule
	(up-compare-goal relocating >= yes)
(or	(population >= max-civ-pop)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(civilian-population >= up-max-civ)))
;	(building-type-count town-center >= 1)
=>
	(set-goal relocating no))
(defrule
	(game-time > 300)
(or	(and	(up-compare-const instant-dock != 1)
		(and	(goal nomaden no)
			(goal landnomad no)))
	(game-time > 600))
	(building-type-count town-center <= 0)
	(unit-type-count villager >= 1);
	(up-compare-goal relocating <= no)
=>
	(chat-local-to-self text-relocating); "Relocating."
	(set-goal relocating yes)
	(disable-self)); for now
(defrule
	(game-time > 600)
	(up-point-zone position-self-x g:!= starting-zone)
	(up-compare-goal relocating <= no)
	(up-compare-goal starting-zone >= 0)
	(up-compare-goal position-self-x >= 0)
(or	(building-type-count town-center >= 1)
	(unit-type-count villager >= 1))
=>
	(chat-local-to-self text-relocating); "Relocating."
	(set-goal relocating yes)
	(disable-self)); for now
(defrule
	(timer-triggered one-min)
	(goal nomaden no)
	(goal landnomad no)
	(building-type-count town-center >= 1)
	(up-compare-goal relocating <= no)
=>
	(up-get-point position-self temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal))
(defrule
	(game-time > 600)
	(timer-triggered one-min)
	(goal nomaden no)
	(goal landnomad no)
	(up-compare-goal targetdistance >= 45); test
	(up-compare-goal temporary-goal >= 26); 21
	(building-type-count town-center >= 1)
	(up-compare-goal relocating <= no)
=>
	(chat-local-to-self text-relocating); "Relocating."
	(set-goal relocating yes)
	(disable-self)); for now ; end jump

(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-military-superiority)
	(up-modify-goal temporary-goal c:* 8)
;	(up-modify-goal temporary-goal s:+ target-military-superiority)
	(up-modify-goal temporary-goal2 g:= my-mpop)
	(up-modify-goal temporary-goal2 g:+ navycount); y
	(up-modify-goal temporary-goal2 c:/ 5)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal3 g:= attackmethod); TSA = 0 - Groups = 1
	(up-modify-goal temporary-goal3 c:* 5)
	(up-modify-goal temporary-goal g:+ temporary-goal3)
	(up-modify-goal temporary-goal c:max 8); 0; 8
	(up-modify-goal temporary-goal c:min 24); 20; 32
	(up-modify-sn sn-enemy-sighted-response-distance g:= temporary-goal))
(defrule
;	(goal attacking no)
	(up-projectile-detected projectile-fortification < 6000); 10000
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-jump-rule 3))
(defrule
(or	(true); DISABLED
(or	(up-timer-status unit-control-flare-timer2 == timer-running)
(or	(goal patrolhelp yes)
(or	(goal patroldefense yes)
(or	(up-compare-goal attacking != yes)
	(warboat-count >= 2))))))
=>
	(up-jump-rule 2))
(defrule
	(game-time <= 0)
;(or	(goal strategy r-flush)
;(or	(goal strategy a-rush)
;(or	(goal strategy ca-rush)
;	(and	(goal strategy castledrop)
;		(or	(up-compare-const uu-type == archer-uu)
;			(up-compare-const uu-type == powder-uu))))))
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-jump-rule 1))
(defrule
(or	(unit-type-count-total scorpion-class >= 6)
(or	(unit-type-count-total archery-class >= 6)
(or	(unit-type-count-total cavalry-archer-class >= 6)
(or	(unit-type-count-total slinger >= 6)
(or	(unit-type-count-total elephant-archer >= 6)
(or	(unit-type-count-total genoese-crossbowman >= 6)
(or	(unit-type-count-total archery-cannon-class >= 6)
	(unit-type-count-total cavalry-cannon-class >= 6))))))))
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0))
;(defrule
;	(strategic-number sn-enemy-sighted-response-distance < 12); 20
;	(goal attacking yes)
;=>
;	(set-strategic-number sn-enemy-sighted-response-distance 12)); 20
;(defrule
;	(strategic-number sn-enemy-sighted-response-distance > 8)
;	(goal attacking no)
;=>
;	(set-strategic-number sn-enemy-sighted-response-distance 8))

(defrule
	(strategic-number sn-placement-fail-delta != 0)
(or	(up-pending-placement c: market)
	(up-pending-objects c: market >= 1))
=>
	(set-strategic-number sn-placement-fail-delta 0))
;(defrule
;	(strategic-number sn-placement-fail-delta != 1)
;(not	(up-pending-placement c: market))
;	(up-pending-objects c: market <= 0)
;=>
;	(set-strategic-number sn-placement-fail-delta 1))
(defrule
	(game-time >= 14)
	(goal increase-ts 0)
	(up-compare-flag escrow-flag2 != 524288); town-center
	(up-compare-flag escrow-flag2 != 1048576); market
	(up-compare-flag escrow-flag2 != 2097152); siege-workshop
	(up-compare-flag escrow-flag2 != 4194304); castle
	(strategic-number sn-placement-zone-size != 9)
=>
	(set-strategic-number sn-placement-zone-size 9)); 20

(defrule
	(game-time >= 1650)
(or	(game-time >= 2250)
(or	(building-type-count-total mining-camp >= 5)
	(and	(game-time >= 1950)
		(building-type-count-total town-center >= 3))))
	(strategic-number sn-defer-dropsite-update != 1)
=>
	(set-strategic-number sn-defer-dropsite-update 1))

(defrule
	(up-pending-objects c: mill <= 0)
(not	(up-pending-placement c: mill))
;	(up-compare-goal forage-count <= 0)
;(or	(cc-players-unit-type-count 0 forage-bush-class <= 0)
	(up-gaia-type-count c: shore-fish-class >= 1);)
	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(strategic-number sn-preferred-mill-placement != 2)
=>
	(set-strategic-number sn-preferred-mill-placement 2))
(defrule
	(up-pending-objects c: mill <= 0)
(not	(up-pending-placement c: mill))
;	(up-compare-goal forage-count <= 0)
;(or	(cc-players-unit-type-count 0 forage-bush-class <= 0)
	(dropsite-min-distance deer-hunting <= 26);)
	(strategic-number sn-preferred-mill-placement != 1)
=>
	(set-strategic-number sn-preferred-mill-placement 1))
(defrule
	(up-pending-objects c: mill <= 0)
(not	(up-pending-placement c: mill))
(or	(and	(up-gaia-type-count c: shore-fish-class <= 0)
		(dropsite-min-distance deer-hunting > 26))
(or	(up-compare-goal forage-count >= 1)
	(cc-players-unit-type-count 0 forage-bush-class >= 1)))
	(strategic-number sn-preferred-mill-placement != 0)
=>
	(set-strategic-number sn-preferred-mill-placement 0))
#load-if-defined AFRICAN-CLEARING-MAP
(defrule
	(up-pending-objects c: mill <= 0)
(not	(up-pending-placement c: mill))
	(building-type-count-total mill <= 1)
	(up-gaia-type-count-total c: shore-fish-class >= 1)
	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(strategic-number sn-preferred-mill-placement != 2)
=>
	(set-strategic-number sn-preferred-mill-placement 2))
#else
#load-if-defined ALPINE-LAKES-MAP
(defrule
	(up-pending-objects c: mill <= 0)
(not	(up-pending-placement c: mill))
	(building-type-count-total mill <= 0)
	(up-gaia-type-count-total c: shore-fish-class >= 1)
	(cc-players-unit-type-count 0 shore-fish-class >= 1)
	(strategic-number sn-preferred-mill-placement != 2)
=>
	(set-strategic-number sn-preferred-mill-placement 2))
#end-if
#end-if


;(defrule
;	(goal fishing yes)
;	(building-type-count-total dock < 1)
;	(wood-amount <= 250)
;(or	(game-time < 60)
;	(unit-type-count villager-food >= 5))
;(or	(up-compare-goal mysheep >= 1)
;	(dropsite-min-distance hunting c:<= 7))
;=>
;	(up-jump-rule 5))
(defrule
	(goal strategy drush)
	(game-time < 600)
	(unit-type-count villager-forager <= 0)
(or	(unit-type-count villager < 20)
	(strategic-number sn-current-age <= dark))
	(building-type-count-total barracks < 1)
	(wood-amount < raxcamp-cost)
(or	(game-time < 60)
(or	(up-compare-goal mysheep >= 2)
;(or
	(dropsite-min-distance hunting <= 6)
;	(unit-type-count villager-food >= 5))
))
=>
	(up-jump-rule 4))
(defrule
	(unit-type-count villager < 13); 16
	(unit-type-count villager-forager <= 0)
;(or	(and	(unit-type-count villager-food < 10)
;		(unit-type-count villager >= 10))
(or	(game-time < 25); 30
(or	(and	(dropsite-min-distance boar-hunting <= 34)
		(and	(up-compare-goal villagercount g:>= minBoar);	(unit-type-count villager >= 8); 10
			(strategic-number sn-enable-boar-hunting >= 1)))
(or	(and	(dropsite-min-distance deer-hunting <= 6)
		(up-compare-goal mysheep >= 1)); 2
	(up-compare-goal mysheep >= 2))));); 4
=>
	(up-jump-rule 2))
(defrule
	(goal map water)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(and	(unit-type-count villager-food < 1)
		(game-time >= 25)); 30
(or	(building-type-count-total dock >= 1)
	(and	(and	(unit-type-count villager-food < 7)
			(unit-type-count villager >= 7))
		(food-amount < 100)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes))
(defrule
	(goal map land)
(or	(strategic-number sn-current-age >= dfeudal)
(or	(and	(unit-type-count villager-food < 1)
		(game-time >= 25)); 30
(or	(building-type-count-total lumber-camp >= 1)
	(and	(and	(unit-type-count villager-food < 7)
			(unit-type-count villager >= 7))
		(food-amount < 100)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes)); end small jump
(defrule
(or	(game-time >= 25); 30
	(building-type-count-total farm >= 1))
(or	(and	(building-type-count-total lumber-camp >= 1)
		(wood-amount >= 190))
(or	(wood-amount >= 350); 400
(or	(game-time >= 300);	(dropsite-min-distance food > 5)
(or	(unit-type-count villager-forager >= 1)
	(building-type-count-total farm >= 1)))))
	(up-compare-goal buildmill != yes)
=>
;	(up-retask-gatherers wood c: 7)
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes)); end big jump
(defrule
(or	(building-type-count-total mill >= 1)
(or	(building-type-count-total lumber-camp >= 2)
(or	(up-compare-goal custom-civ-pop >= 20)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(population >= max-civ-pop)))))
	(up-compare-goal buildmill != yes)
=>
;	(chat-local-to-self "Mill allowed.")
	(set-goal buildmill yes))

(defrule
	(game-time >= 60)
	(goal buildmill yes)
	(dropsite-min-distance wood > 7)
	(wood-amount < camp2-cost)
	(strategic-number sn-wood-gatherer-percentage < 5)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildmill no))
(defrule
	(game-time < 120); 126
	(goal buildmill yes)
	(up-compare-goal mysheep >= 3); 1
;	(unit-type-count villager-forager <= 0)
	(unit-type-count villager <= 9)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildmill no))


(defrule
(or	(goal buildlumber yes)
(or	(game-time < 18)
	(and	(not	(resource-found wood))
		(game-time < 30)))); 20
=>
	(up-jump-rule 5))
(defrule
	(game-time < 90)
	(up-compare-goal wood-villagers <= 0)
	(strategic-number sn-wood-gatherer-percentage < 5)
	(up-compare-goal custom-civ-pop < min-food-villagers)
=>
	(up-jump-rule 4))
(defrule; nfish
(or	(game-time >= 150); 90
(or	(and	(wood-amount >= housecamp2-cost)
		(or	(up-compare-goal custom-civ-pop >= 7)
			(game-time >= 100)))
	(dropsite-min-distance wood >= 6))); 5
=>
	(set-goal temporary-goal2 752378))
(defrule
	(goal temporary-goal2 752378)
(or	(building-type-count-total mill >= 1)
(or	(and	(or	(up-compare-goal wood-villagers >= 1)
			(strategic-number sn-wood-gatherer-percentage >= 5))
		(or	(unit-type-count villager-wood g:>= villagercount)
			(up-compare-goal custom-civ-pop >= min-food-villagers)))
	(unit-type-count villager >= 9)))
=>
	(set-goal buildlumber yes))
(defrule
(or	(and	(goal buildmill no)
		(and	(up-compare-goal custom-civ-pop >= min-food-villagers)
			(unit-type-count villager-wood >= 1)))
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(and	(game-time >= 30)
		(and	(wood-amount >= 400)
			(food-amount >= 1200)))))
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildlumber yes))
(defrule
;(or
	(dropsite-min-distance boar-hunting < 8)
(or	(and	(dropsite-min-distance deer-hunting < 8)
		(strategic-number sn-enable-boar-hunting == 1))
	(up-compare-goal mysheep >= 2));); 3
	(building-type-count-total lumber-camp <= 0)
	(strategic-number sn-wood-gatherer-percentage >= 5)
(or	(up-compare-goal wood-villagers >= 1)
	(up-compare-goal custom-civ-pop >= min-food-villagers))
	(building-type-count-total town-center >= 1)
=>
	(set-goal buildlumber yes)); end jump

(defrule
	(up-compare-goal buildlumber != no)
	(strategic-number sn-wood-gatherer-percentage <= 4)
	(building-type-count-total mill <= 0)
	(building-type-count-total lumber-camp <= 0)
	(wood-amount < housecamp2-cost)
	(unit-type-count villager < 9)
(or	(unit-type-count villager-wood g:< villagercount)
	(dropsite-min-distance wood < 5)); test
;	(unit-type-count villager-wood < 1)
	(dropsite-min-distance wood < 10); 12
(or	(unit-type-count villager-forager >= 1)
	(up-compare-goal mysheep <= 1))
=>
	(set-goal buildlumber no)
	(set-goal buildmill yes))
(defrule
	(building-type-count-total mill <= 0)
	(up-compare-goal buildmill == yes)
	(dropsite-min-distance wood < 10); 12
	(wood-amount < housecamp2-cost)
	(up-compare-goal buildlumber != no)
=>
	(set-goal buildlumber no))


(defrule
	(strategic-number sn-current-age >= imperial)
	(game-time < 360); 330
	(up-compare-const dm-game == 1)
	(up-compare-goal excessWood >= 1000)
	(up-compare-goal excessFood >= 1000)
	(up-compare-goal excessGold >= 1000)
	(unit-type-count-total villager < 32)
(nand	(unit-type-count villager >= 16)
	(unit-type-count villager-builder < 8))
=>
	(set-goal buildmill no)
	(set-goal buildlumber no))

;(defrule(timer-triggered threesec)=>(up-chat-data-to-player my-player-number "mill: %d" g: buildmill)(up-chat-data-to-player my-player-number "lumber: %d" g: buildlumber)(chat-local-to-self "---"))


(defrule
(nor	(civ-selected hun)
(or	(civ-selected mayan)
(or	(housing-headroom >= 2)
(or	(unit-type-count villager-builder >= 2)
	(building-type-count house >= 1)))))
	(wood-amount >= 30)
	(game-time < 30)
	(building-type-count-total town-center >= 1)
;	(food-amount >= 50)
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(set-strategic-number sn-maximum-food-drop-distance 8)
	(set-strategic-number sn-maximum-wood-drop-distance 20)
	(set-strategic-number sn-maximum-gold-drop-distance 10)
	(set-strategic-number sn-maximum-stone-drop-distance 10)
	(set-strategic-number sn-maximum-hunt-drop-distance 12);
	(disable-self))
(defrule
(or	(dropsite-min-distance wood > 5); test
(or	(goal buildmill yes)
(or	(and	(unit-type-count villager >= 6)
		(unit-type-count villager-food < 6))
	(and	(unit-type-count villager >= 7)
		(unit-type-count villager-food < 7)))))
(or	(building-type-count-total mill < 1)
	(game-time >= 90))
=>
	(up-modify-sn sn-maximum-food-drop-distance c:max 14))
(defrule
(or	(building-type-count-total mill >= 1)
	(up-compare-goal mysheep >= 3))
=>
	(up-modify-sn sn-maximum-food-drop-distance c:max 10))

(defrule
	(strategic-number sn-dock-training-filter != 2)
(or	(up-compare-goal navycount >= minNavy)
	(strategic-number sn-current-age >= feudal)); castlea
=>
	(set-strategic-number sn-dock-training-filter 2))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(goal inseln yes)
	(up-compare-goal navycount < minNavy)
(or	(up-compare-goal navycount <= 0)
(or	(up-compare-goal strategy-type < castle-war)
	(strategic-number sn-current-age >= imperial)))
	(players-building-type-count every-enemy dock <= 0); test
	(up-compare-goal biggestenemynavy <= 0)
	(up-compare-goal excessWood >= 100); 200
=>
	(set-strategic-number sn-dock-training-filter 0))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(population >= del-civ-pop); max pop
	(up-compare-goal strategy-type2 == water)
	(up-compare-goal navycount <= 0)
	(players-building-type-count every-enemy dock <= 0); test
	(up-compare-goal biggestenemynavy <= 0)
	(unit-type-count-total transport-ship <= 0)
;	(up-compare-goal navycount <= 0)
	(wood-amount >= 125)
=>
	(set-strategic-number sn-dock-training-filter 0))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(goal traintransport yes)
(or	(goal migration-state 1)
	(goal inseln yes))
	(unit-type-count-total transport-ship <= 0)
	(unit-available transport-ship)
	(wood-amount >= 125)
=>
	(set-strategic-number sn-dock-training-filter 0))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(game-time < 600)
	(up-compare-const dm-game == 1)
	(up-compare-goal navycount < minNavy)
	(up-compare-goal excessWood >= 200)
=>
	(up-modify-sn sn-minimum-water-body-size-for-dock c:max 1500)
	(set-strategic-number sn-dock-training-filter 0))
(defrule
	(strategic-number sn-dock-training-filter != 0)
	(current-age == dark-age)
	(goal trainfish yes)
=>
	(set-strategic-number sn-dock-training-filter 0))

(defrule
	(goal escrowing no)
(or	(escrow-amount wood >= 1)
(or	(escrow-amount food >= 1)
(or	(escrow-amount gold >= 1)
	(escrow-amount stone >= 1))))
=>
	(chat-to-player my-player-number "Debugging escrow.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 4))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(unit-type-count-total villager <= 0)
(or	(escrow-amount wood >= 1)
(or	(escrow-amount food >= 1)
(or	(escrow-amount gold >= 1)
	(escrow-amount stone >= 1))))
=>
	(chat-to-player my-player-number "Debugging escrow2.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 3))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 2)
	(escrow-amount wood >= 30)
	(up-pending-objects c: house == 0)
	(housing-headroom <= 0)
	(population-headroom > 0)
=>
	(chat-to-player my-player-number "Debugging escrow3.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 2))
(defrule
;	(goal escrowing no)
	(timer-triggered embassy); hmm
	(building-type-count-total town-center >= 1)
	(unit-type-count-total villager >= 2)
	(escrow-amount wood > 100); maybe a lc in the future?
	(unit-type-count villager-food < 1)
	(building-type-count-total farm < 1)
	(food-amount < 50)
=>
	(chat-to-player my-player-number "Debugging escrow4.")
	(set-goal temporary-goal 48353)
	(up-jump-rule 1))
(defrule
;	(goal escrowing no)
(or	(escrow-amount wood >= 5000)
(or	(escrow-amount food >= 5000)
(or	(escrow-amount gold >= 5000)
	(escrow-amount stone >= 5000))))
=>
	(chat-to-player my-player-number "Debugging escrow5.")
	(set-goal temporary-goal 48353))
(defrule
	(goal temporary-goal 48353)
=>
	(up-reset-cost-data cost-food)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(up-release-escrow)
	(set-goal escrow-flag 0)
	(set-goal escrow-flag2 0)
	(set-goal escrow-flag3 0))

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
(not	(town-under-attack))
	(goal escrowing no)
	(goal queue yes)
;test	(current-age >= castle-age)
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-strategic-number sn-enable-training-queue 1))
;(defrule
;	(town-under-attack)
;	(current-age >= castle-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-strategic-number sn-enable-training-queue 0))

;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;;(or
;	(up-compare-goal strategy-type == feudal-war)
;;	(goal enemy-goal flush))
;	(up-compare-goal total-food-amount >= 460); 440
;;(or	(up-compare-goal total-food-amount >= 500)
;(or	(unit-type-count-total villager >= 25)
;	(and	(up-compare-goal total-food-amount >= 480); 470
;		(unit-type-count-total villager >= 22)));)
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;	(up-compare-goal strategy == s-flush)
;	(up-compare-goal total-food-amount >= 440); 420
;;(or	(up-compare-goal total-food-amount >= 500)
;(or	(unit-type-count-total villager >= 23)
;	(and	(up-compare-goal total-food-amount >= 470); 460
;		(unit-type-count-total villager >= 22)));)
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
;(defrule
;	(goal queue yes)
;	(strategic-number sn-current-age == dark)
;(or	(and	(up-compare-goal total-food-amount >= 1300);(food-amount >= 1000); 1100
;		(unit-type-count-total villager >= 10))
;	(and	(up-compare-goal total-food-amount >= 1035);(food-amount >= 800); 900
;		(unit-type-count-total villager >= 15)))
;	(research-available feudal-age)
;	(strategic-number sn-enable-training-queue != 0)
;=>
;	(set-goal queue no)
;	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(goal queue no)
	(current-age == dark-age)
	(strategic-number sn-current-age > dark)
;	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self))
(defrule
	(strategic-number sn-current-age == feudal)
	(goal queue no)
(or	(food-amount < castle-f2)
	(gold-amount < castle-g2))
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))
(defrule
	(goal queue yes)
;	(current-age == feudal-age)
;	(strategic-number sn-current-age == feudal)
	(research-available castle-age)
	(up-compare-goal total-food-amount >= castle-food);(food-amount >= castle-food)
	(gold-amount >= castle-gold)
;	(building-type-count-total blacksmith >= 1)
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-goal queue no)
	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(goal queue no)
	(current-age == feudal-age)
	(strategic-number sn-current-age > feudal)
;	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1)
	(disable-self))
(defrule
	(strategic-number sn-current-age == castlea)
	(goal queue no)
(or	(food-amount < imperial-f2)
	(gold-amount < imperial-g2))
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))
(defrule
	(goal queue yes)
;	(strategic-number sn-current-age == castlea)
	(food-amount >= imperial-food)
	(gold-amount >= imperial-gold)
;(or	(building-type-count castle >= 1)
;(or	(building-type-count university >= 1)
;	(building-type-count siege-workshop >= 1)))
	(research-available imperial-age)
	(strategic-number sn-enable-training-queue != 0)
=>
	(set-goal queue no)
	(set-strategic-number sn-enable-training-queue 0))
(defrule
	(strategic-number sn-current-age >= imperial)
	(strategic-number sn-enable-training-queue != 1)
=>
	(set-goal queue yes)
	(set-strategic-number sn-enable-training-queue 1))
#end-if
#end-if
#end-if


(defrule
	(strategic-number sn-enable-training-queue != 0)
(or	(up-compare-goal escrow-flag != 0)
	(up-compare-goal escrow-flag2 != 0))
	(up-compare-flag escrow-flag2 != 2097152); siege-workshop
	(up-compare-flag escrow-flag2 != 524288); town-center
	(up-compare-flag escrow-flag2 != 4194304); castle
	(up-compare-flag escrow-flag2 != 1); double-bit-axe
	(up-compare-flag escrow-flag2 != 2); bow-saw
	(up-compare-flag escrow-flag2 != 4); horse-collar
	(up-compare-flag escrow-flag2 != 8); heavy-plow
	(up-compare-flag escrow-flag2 != 1024); chemistry
	(up-compare-flag escrow-flag2 != 2048); ballistics
	(up-compare-flag escrow-flag2 != 1048576); market
	(up-compare-flag escrow-flag2 != 512); ri-bracer
=>
	(set-goal temporary-goal 58885))
(defrule
	(goal temporary-goal 58885)
	(up-compare-flag escrow-flag2 != 256); ri-bodkin-arrow
	(up-compare-flag escrow-flag2 != 8388608); mangonel-line
	(up-compare-flag escrow-flag2 != 128); ri-fletching
	(up-compare-flag escrow-flag2 != 4096); ri-scale-mail
	(up-compare-flag escrow-flag2 != 8192); ri-chain-mail
	(up-compare-flag escrow-flag2 != 16384); ri-plate-mail
	(up-compare-flag escrow-flag2 != 16); ri-scale-barding
	(up-compare-flag escrow-flag2 != 32); ri-chain-barding
	(up-compare-flag escrow-flag2 != 64); ri-plate-barding
=>
	(set-strategic-number sn-enable-training-queue 0))


(defrule
	(strategic-number sn-enable-training-queue != 0)
	(game-time < 900)
	(building-type-count archery-range == 1)
	(building-type-count-total archery-range >= 2)
(or	(gold-amount < 140)
	(and	(goal sk-var yes)
		(food-amount < 100)))
	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age <= feudal)
=>
	(set-strategic-number sn-enable-training-queue 0))






(defrule
(or	(and	(population < max-pop)
		(population <= siege-pop))
(or	(gold-amount < 100)
(or	(goal researchplan no)
	(strategic-number sn-percent-attack-soldiers < 100))))
	(strategic-number sn-warship-targeting-mode != 1)
=>
	(set-strategic-number sn-warship-targeting-mode 1))
(defrule
	(population >= max-pop)
	(gold-amount >= 200)
	(goal researchplan yes)
	(strategic-number sn-percent-attack-soldiers >= 100)
	(strategic-number sn-warship-targeting-mode != 0)
=>
	(set-strategic-number sn-warship-targeting-mode 0))

(defrule
(or	(not	(up-pending-placement c: town-center))
	(timer-triggered MSuperiority)); embassy
	(strategic-number sn-town-center-placement != 0)
=>
	(set-strategic-number sn-town-center-placement 0))


(defrule
	(goal researchplan no)
	(goal escrowing no)
(or	(and	(strategic-number sn-current-age >= imperial)
		(up-compare-goal excessGold >= 2000))
(or	(up-research-status c: ri-paladin >= research-pending)
(or	(up-research-status c: ri-champion >= research-pending)
(or	(up-research-status c: ri-heavy-cavalry-archer >= research-pending)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-research-status c: my-unique-research >= research-pending))))))
=>
	(set-goal researchplan yes))






(defrule
(or	(up-compare-goal main-zone <= -1)
(or	(up-compare-goal migration-state != 2)
	(game-time < 2)))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: villager-class g: villagercount)
	(up-remove-objects search-local object-data-map-zone-id g:!= starting-zone)
	(up-get-search-state local-total)
	(up-modify-goal temporary-goal g:= local-total))
(defrule
	(up-compare-goal temporary-goal <= 0)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: town-center-foundation c: 16)
	(up-find-status-local c: building-class c: 16)
	(up-find-status-local c: farm-class c: 16)
	(up-find-status-local c: tower-class c: 16)
	(up-find-status-local c: wall-class c: 16)
	(up-find-status-local c: gate-class c: 16)
	(up-remove-objects search-local object-data-map-zone-id g:!= starting-zone)
	(up-remove-objects search-local object-data-map-zone-id g:== migration-zone)
	(up-remove-objects search-local object-data-map-zone-id g:== main-zone))
(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal temporary-goal <= 0)
=>
	(chat-local-to-self "Deleting foundations on starting island.")
	(up-target-point 0 action-delete -1 -1)); end jump
#load-if-not-defined UP-SCENARIO-GAME
#load-if-not-defined UP-2-PLAYER-GAME
(defrule
(or	(and	(up-compare-goal migration-state <= 0)
		(up-compare-goal relocating <= 0))
(or	(players-building-type-count every-ally market <= 0)
(or	(and	(unit-type-count-total trade-cart <= 0)
		(building-type-count market <= 0))
	(game-time < 2))))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: trade-cart c: 240)
	(up-find-local c: market c: 40)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: town-center c: 40)
	(up-remove-objects search-local object-data-map-zone-id g:!= starting-zone)
	(up-remove-objects search-local object-data-map-zone-id g:== migration-zone)
	(up-remove-objects search-local object-data-map-zone-id g:== main-zone)
	(up-remove-objects search-local object-data-index >= 1)
	(up-get-search-state local-total)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-map-zone-id temporary-goal))
(defrule
	(up-compare-goal local-total >= 1)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-reset-search 0 0 1 1)
	(up-reset-filters))
(defrule
	(up-compare-goal local-total >= 1)
	(players-building-type-count focus-player market >= 1)
	(strategic-number sn-focus-player-number != my-player-number)
	(stance-toward focus-player ally)
=>
	(up-reset-search 0 0 1 1)
	(up-find-remote c: market c: 40)
	(up-remove-objects search-remote object-data-map-zone-id g:!= temporary-goal)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
	(strategic-number sn-focus-player-number < 8);	(player-valid focus-player)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(up-compare-goal local-total >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
=>
	(chat-local-to-self "Deleting market/carts on starting island.")
;	(up-reset-building 1 c: market)
	(up-target-point 0 action-delete -1 -1)); end jump
(defrule
(or	(building-type-count-total market <= 0); for now
(or	(up-pending-objects c: market <= 0)
(or	(up-compare-goal feinde <= 0)
	(game-time < 2))))
=>
	(up-jump-rule 2))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-get-point position-center temporary-point-x)
	(up-set-target-point temporary-point-x)
	(set-goal temporary-goal2 marketdelradius)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal temporary-goal2 g:min temporary-goal)
	(up-modify-goal temporary-goal2 c:max 0);
	(up-filter-distance c: -1 g: temporary-goal2)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: market c: 16)
	(up-set-target-point position-self-x)
	(up-remove-objects search-local object-data-distance s:<= sn-safe-town-size)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
=>
	(chat-local-to-self "Deleting market foundations near center.")
	(up-target-point 0 action-delete -1 -1)); end jump
(defrule
(or	(up-compare-const diff-fp != 1)
(or	(up-timer-status fivesec == timer-running)
(or	(building-type-count-total market <= 1); 0
(or	(players-building-type-count every-ally market <= 0)
(or	(and	(unit-type-count-total trade-cart <= 0)
		(players-unit-type-count every-ally trade-cart <= 0))
(or	(goal attacking yes)
	(strategic-number sn-military-superiority >= 3)))))))
=>
	(up-jump-rule 7))
(defrule
	(up-compare-goal feinde <= 0)
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-modify-goal temporary-goal s:= sn-safe-town-size)
	(up-modify-goal temporary-goal s:max 32)
	(up-filter-distance g: temporary-goal c: -1)
	(up-find-local c: market c: 16)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: market c: 16)
	(up-set-target-point position-self-x)
	(up-remove-objects search-local object-data-distance s:<= sn-safe-town-size)
	(set-goal temporary-goal 0)
	(up-reset-filters))
(defrule; end neg jumps
	(up-set-target-object search-local g: temporary-goal)
	(strategic-number sn-focus-player-number != my-player-number)
(not	(stance-toward focus-player ally))
	(player-valid focus-player)
=>
	(up-get-point position-object temporary-point-x)
	(up-set-target-point temporary-point-x)
	(up-filter-distance c: -1 c: 16)
	(up-filter-include -1 actionid-attack -1 -1)
	(up-find-remote c: castle c: 1)
	(up-find-remote c: krepost c: 1)
	(up-find-remote c: bombard-tower c: 1)
	(up-find-remote c: watch-tower c: 1)
	(up-find-remote c: town-center c: 1)
	(up-find-remote c: dock c: 1)
;	(up-find-remote c: building-class c: 1)
;	(up-find-remote c: tower-class c: 1)
;	(up-find-remote c: wall-class c: 1)
;	(up-find-remote c: gate-class c: 1)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal remote-total <= 0)
	(strategic-number sn-focus-player-number != my-player-number)
(not	(stance-toward focus-player ally))
	(player-valid focus-player)
=>
	(up-modify-goal temporary-goal c:+ 1)
	(up-reset-filters)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -2))
(defrule
	(up-compare-goal remote-total <= 0)
	(strategic-number sn-focus-player-number < 8)
=>
	(set-goal temporary-goal 0)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-filters)
	(up-reset-search 0 0 1 1)
	(up-jump-rule -3))
(defrule
	(up-set-target-object search-local g: temporary-goal)
	(up-compare-goal remote-total >= 1)
	(strategic-number sn-corner-cut-state < 2)
=>
	(up-chat-data-to-self "Deleting market/foundation near %d dangerous objects." g: remote-total)
	(up-remove-objects search-local object-data-index g:!= temporary-goal)
	(up-target-point 0 action-delete -1 -1))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)); end jump
#load-if-defined REVEAL-NORMAL
(defrule
(or	(building-type-count-total dock <= 0); for now
(or	(up-pending-objects c: dock <= 0)
	(up-compare-goal feinde <= 0)))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-filter-distance s: sn-safe-town-size c: -1)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: dock c: 16)
	(up-clean-search search-local object-data-distance search-order-desc))
(defrule
	(up-set-target-object search-local c: 0)
=>
	(up-get-point position-object temporary-point-x)
	(up-get-point-distance position-self-x temporary-point-x temporary-goal)
	(up-modify-goal temporary-goal2 g:= villagercount)
	(up-modify-goal temporary-goal2 c:/ 2)
	(up-modify-goal temporary-goal2 s:+ sn-safe-town-size)
	(up-modify-goal temporary-goal2 c:min 60)
	(up-modify-goal temporary-goal g:- temporary-goal2)
	(up-get-search-state local-total))
(defrule
	(up-set-target-object search-local c: 0)
	(up-compare-goal gl-game-time g:<= temporary-goal)
=>
	(up-chat-data-to-self "Deleting far dock foundations: %d." g: temporary-goal)
	(up-remove-objects search-local object-data-index >= 1)
	(up-target-point 0 action-delete -1 -1)); end jump
#end-if
#end-if
#end-if


(defrule
	(goal tradecarts no)
(or	(players-building-type-count every-ally market <= 0)
	(and	(building-type-count market <= 0)
		(building-type-count town-center <= 0)))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-find-local c: market c: 40)
	(up-find-local c: town-center c: 16)
	(up-get-search-state local-total)
	(up-set-target-object search-local c: 0)
	(up-get-object-data object-data-map-zone-id temporary-goal)
	(up-modify-goal temporary-goal2 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1))
(defrule; end neg jump
	(up-compare-goal local-total >= 1)
	(players-building-type-count focus-player market >= 1)
	(strategic-number sn-focus-player-number != my-player-number)
	(stance-toward focus-player ally)
=>
	(up-reset-search 0 0 1 1)
	(up-find-remote c: market c: 40)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-remote c: market c: 40)
	(up-remove-objects search-remote object-data-map-zone-id g:!= temporary-goal)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
	(strategic-number sn-focus-player-number < 8);	(player-valid focus-player)
=>
	(up-reset-filters)
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal2))
(defrule
	(up-compare-goal tradecarts != yes)
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total >= 1)
	(players-building-type-count any-ally market >= 1)
=>
	(set-goal tradecarts yes)
	(up-jump-rule 1))
(defrule
	(goal tradecarts yes)
(or	(players-building-type-count every-ally market <= 0)
	(up-compare-goal remote-total <= 0))
=>
	(set-goal tradecarts no)); end jump





(defrule
	(goal retargetenemy 3)
(or	(up-compare-goal victory-time >= 2500)
(or	(up-compare-goal victory-time <= -1)
	(and	(players-building-type-count every-enemy wonder <= 0)
		(not	(enemy-captured-relics)))))
=>
	(set-goal retargetenemy yes)
	(chat-local-to-self "Retargeting to closest enemy.")
	(set-strategic-number sn-special-attack-type1 0)
	(set-strategic-number sn-special-attack-influence1 1)
	(set-strategic-number sn-special-attack-type3 0)
	(set-strategic-number sn-special-attack-influence3 1)
	(set-goal attackprioritychange yes))

(defrule
	(up-compare-const vs-game != 1)
	(up-compare-const dtw-game != 1)
=>
	(up-jump-rule 6))
(defrule
	(up-compare-goal retargetenemy != 3)
(or	(and	(enemy-captured-relics)
		(players-building-type-count target-player monastery >= 1))
	(players-building-type-count target-player wonder >= 1))
	(up-compare-goal victory-time < 2500); 250 years
	(up-compare-goal victory-time >= 0)
=>
	(up-chat-data-to-self "Targeting R/W: %d" g: winning-player)
	(set-strategic-number sn-special-attack-type1 1)
	(set-strategic-number sn-special-attack-influence1 100)
	(set-strategic-number sn-special-attack-type3 1)
	(set-strategic-number sn-special-attack-influence3 100)
	(set-goal retargetenemy 3)
	(up-jump-rule 2))
(defrule
	(up-compare-goal retargetenemy != 3)
	(enemy-captured-relics)
	(players-building-type-count any-enemy monastery > 0)
	(players-building-type-count target-player monastery <= 0)
	(players-building-count any-enemy > 0)
	(up-compare-goal victory-time < 2500)
	(up-compare-goal victory-time >= 0)
=>
	(up-chat-data-to-self "Retargeting R: %d" g: winning-player)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(up-modify-sn sn-target-player-number g:= winning-player)
	(set-strategic-number sn-special-attack-type1 1)
	(set-strategic-number sn-special-attack-influence1 100); 10000
	(set-goal retargetenemy 3)); blocks retargeting to closest player
(defrule
	(up-compare-goal retargetenemy != 3)
	(players-building-type-count any-enemy wonder > 0)
	(players-building-type-count target-player wonder <= 0)
	(players-building-count any-enemy > 0)
	(up-compare-goal victory-time < 2500)
	(up-compare-goal victory-time >= 0)
=>
	(up-chat-data-to-self "Retargeting W: %d" g: winning-player)
;	(up-chat-data-to-all "Retargeting W: %d" g: winning-player)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(up-modify-sn sn-target-player-number g:= winning-player)
	(set-strategic-number sn-special-attack-type3 1)
	(set-strategic-number sn-special-attack-influence3 100); 10000
	(set-goal retargetenemy 3)); end jump
(defrule
	(goal retargetenemy 3)
	(up-compare-goal attacking != yes)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 2500)
(or	(population >= max-pop)
(or	(strategic-number sn-military-superiority >= 1)
	(up-compare-goal victory-time < 1250)))
(or	(goal underattack no)
	(up-compare-goal victory-time < 625))
=>
	(set-goal attacking yes))
(defrule
	(goal attacking yes)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 2500)
	(players-building-type-count focus-player wonder >= 1)
(not	(stance-toward focus-player ally))
	(unit-type-count battering-ram-line >= 1)
	(timer-triggered twentysec); one-min
=>
	(up-full-reset-search)
	(up-find-remote c: wonder c: 1)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-find-local c: battering-ram-line c: 1); 4
;	(up-filter-include cmdid-military -1 -1 -1)
;	(up-find-local c: all-units-class c: 20)
	(up-target-objects 0 action-patrol -1 stance-aggressive))
(defrule
	(goal attacking yes)
	(up-compare-goal victory-time >= 0)
	(up-compare-goal victory-time < 2500)
	(enemy-captured-relics)
	(players-building-type-count focus-player monastery >= 1)
(not	(stance-toward focus-player ally))
	(unit-type-count battering-ram-line >= 1)
	(timer-triggered twentysec); one-min
=>
	(up-full-reset-search)
	(up-find-remote c: monastery c: 1)
	(up-filter-exclude -1 actionid-attack -1 -1)
	(up-find-local c: battering-ram-line c: 1)
;	(up-filter-include cmdid-military -1 -1 -1)
;	(up-find-local c: all-units-class c: 20)
	(up-target-objects 0 action-patrol -1 stance-aggressive)); end jump

(defrule
(or	(strategic-number sn-focus-player-number >= 9)
(or	(strategic-number sn-focus-player-number <= 0)
(or	(not	(player-in-game focus-player))
	(stance-toward focus-player ally))))
	(strategic-number sn-target-player-number != 0); none
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)
;	(chat-to-player my-player-number "Debugging focus/target-player. 0"); usually after an enemy resigned
)

#load-if-not-defined ARCHIPELAGO-MAP
#load-if-not-defined BALTIC-MAP
#load-if-not-defined CONTINENTAL-MAP
#load-if-not-defined CRATER-LAKE-MAP
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined MEDITERRANEAN-MAP
#load-if-not-defined MIGRATION-MAP
#load-if-not-defined NOMAD-MAP
#load-if-not-defined RIVERS-MAP
#load-if-not-defined SALT-MARSH-MAP
#load-if-not-defined SCANDANAVIA-MAP
#load-if-not-defined YUCATAN-MAP
#load-if-not-defined OASIS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
;#load-if-not-defined UP-NOMAD-STYLE
;#load-if-not-defined CUSTOM-MAP
(defrule
	(up-compare-goal strategy != krush)
(nand	(up-compare-goal strategy == castledrop)
	(up-compare-const uu-type == cavalry-uu))
=>
	(up-jump-rule 7))
(defrule
(or	(players-current-age every-enemy != feudal-age)
(or	(up-timer-status embassy == timer-running)
(or	(military-population < 4)
(or	(goal underattack yes)
(or	(up-compare-goal position-goal != pocket)
(or	(goal attacking yes)
(or	(game-time >= 2400)
	(up-compare-goal feinde <= 1))))))))
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1))
(defrule
(or	(up-compare-goal enemysling >= 9)
	(and	(up-compare-goal retargetenemy != 4)
		(up-compare-goal enemysling != 0)))
=>
	(set-goal enemysling 0))
(defrule
	(goal enemysling 0)
	(goal retargetenemy yes)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player <= 2)
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player castle < 1)
	(up-allied-sn every-ally sn-target-player-number s:!= sn-focus-player-number); one, not all
	(player-in-game focus-player)
(not	(stance-toward focus-player ally));	(stance-toward focus-player enemy)
=>
	(up-modify-goal enemysling s:= sn-focus-player-number))
(defrule
	(goal enemysling 0)
	(goal retargetenemy yes)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(up-compare-goal enemysling >= 1)
	(up-compare-goal enemysling <= 8)
	(goal retargetenemy yes)
	(players-building-count focus-player > 0)
	(players-civilian-population focus-player >= 18)
;	(players-building-type-count focus-player town-center >= 1)
	(players-current-age focus-player == feudal-age)
	(players-military-population focus-player <= 2)
	(up-allied-sn every-ally sn-target-player-number s:!= sn-focus-player-number); one, not all
=>
	(up-modify-sn sn-target-player-number g:= enemysling)
	(up-modify-sn sn-focus-player-number g:= enemysling)
;	(chat-to-player my-player-number "Targeting possible enemy sling.")
;	;(chat-to-player every-ally "Targeting possible enemy sling.")
	(set-goal retargetenemy 4)); blocks retargeting to closest player
(defrule
	(strategic-number sn-focus-player-number g:!= temporary-goal)
	(up-compare-goal retargetenemy != 4)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump

(defrule
	(goal retargetenemy 4)
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
;fornow	(chat-to-player my-player-number "Debugging enemysling focus-player.")
)
(defrule
	(goal retargetenemy 4)
(or	(nor	(up-compare-goal strategy == krush)
		(and	(up-compare-goal strategy == castledrop)
			(up-compare-const uu-type == cavalry-uu)))
(or	(game-time >= 1800)
(or	(not	(player-in-game target-player))
;	(and
	(players-civilian-population target-player <= 9); 12
;		(players-building-type-count target-player town-center <= 0))
)))
=>
	(set-goal retargetenemy yes)
;	(chat-to-player my-player-number "Targeting the closest enemy again. 1")
;	;(chat-to-player every-ally "Targeting the closest enemy again.")
)
(defrule
(or	(goal underattack yes)
(or	(players-current-age focus-player >= castle-age)
(or	(players-military-population focus-player >= 5)
	(up-allied-sn any-ally sn-target-player-number s:== sn-target-player-number)))); focus ; one AI on the sling is enough
	(goal retargetenemy 4)
=>
	(set-goal retargetenemy yes)
;	(chat-to-player my-player-number "Targeting the closest enemy again. 2")
;	;(chat-to-player every-ally "Targeting the closest enemy again.")
)
;#end-if
;#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if



#load-if-not-defined UP-TEAM-DISADVANTAGE; hmm
(defrule
(or	(game-time >= 30); no nomad for now
(or	(goal nomaden yes)
(or	(strategic-number teambalance <= 0); for now
(or	(up-compare-goal position-goal != pocket)
(or	(building-type-count town-center <= 0)
(or	(up-compare-goal cozy != 0)
	(not	(player-in-game any-ally))))))))
=>
	(up-jump-rule 3))
(defrule
(or	(up-compare-goal targetdistance <= 0)
	(up-compare-goal targetdistance >= 65535))
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal targetdistance < 144); 150 ; temporary-goal2
=>
	(chat-local-to-self "Not cozy.")
	(set-goal cozy -1)
	(up-jump-rule 1))
(defrule
	(up-compare-goal targetdistance >= 144)
=>
	(chat-local-to-self "Cozy.")
	(set-goal cozy 1))
#end-if



(defrule
	(strategic-number sn-focus-player-number s:!= sn-target-player-number)
	(goal retargetenemy 4)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(chat-to-player my-player-number "Debugging cozy focus-player."))






(defrule
(or	(and	(stance-toward target-player ally); just to be sure
		(or	(player-in-game any-enemy)
			(player-in-game any-neutral)))
(or	(player-resigned target-player)
(or	(not	(player-valid target-player))
	(not	(player-in-game target-player)))))
	(player-in-game any-enemy)
=>
	(set-goal retargetenemy yes))
(defrule
(or	(and	(or	(strategic-number sn-target-player-number <= 0)
			(strategic-number sn-target-player-number >= 9))
		(players-building-count any-enemy > 0))
	(and	(players-building-count target-player <= 0)
		(players-building-count any-enemy > 0)))
	(player-in-game any-enemy)
=>
	(set-goal retargetenemy yes))






#load-if-defined UP-ALLY-IN-GAME
#load-if-defined UP-MULTIPLE-ENEMIES
(defrule
(or	(players-building-count any-enemy <= 0)
	(not	(player-in-game every-enemy)))
=>
	(set-goal skip-target no)
	(up-jump-rule 5))
(defrule
(or	(up-compare-goal armytech < castlea)
(or	(goal inseln yes)
(or	(up-compare-goal retargetenemy != yes)
(or	(players-building-type-count target-player town-center >= 1)
(or	(players-building-type-count target-player castle >= 1)
(or	(players-building-type-count target-player bombard-tower >= 1)
	(players-building-type-count target-player watch-tower >= 1)))))))
=>
	(set-goal skip-target no)
	(up-jump-rule 4))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact population 0 temporary-goal3)
	(up-find-next-player enemy find-closest temporary-goal2)
	(up-modify-sn sn-focus-player-number g:= temporary-goal2)
	(up-get-focus-fact population 0 temporary-goal4)
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
(defrule
	(up-compare-goal temporary-goal3 < 15)
	(up-compare-goal temporary-goal4 >= 40)
	(up-compare-goal temporary-goal4 g:< my-pop)
	(population >= 50)
=>
	(set-goal skip-target yes))
(defrule
(or	(up-compare-goal temporary-goal3 >= 25)
(or	(up-compare-goal temporary-goal4 < 25)
(or	(up-compare-goal temporary-goal4 g:> my-pop)
	(population < 40))))
=>
	(set-goal skip-target no))
(defrule
	(up-compare-goal skip-target == yes)
=>
;	(up-chat-data-to-self "Skipping target, ntpop: %d" g: temporary-goal4)
	(up-find-player enemy find-closest temporary-goal);
	(up-find-next-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-modify-sn sn-focus-player-number g:= temporary-goal)); end jump
#end-if
#end-if


(defrule ; debug rule
(or	(not	(player-in-game target-player))
(or	(strategic-number sn-target-player-number >= 9)
(or	(strategic-number sn-target-player-number <= 0)
(or	(players-building-count target-player <= 0)
	(stance-toward target-player ally)))))
;	(strategic-number sn-target-player-number != 0); none
=>
;	(up-chat-data-to-player my-player-number "sn-focus-player-number: %d" s: sn-focus-player-number)
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal); should be an enemy
	(up-modify-sn sn-focus-player-number g:= temporary-goal); should be an enemy
;	(chat-to-player my-player-number "Debugging init focus&target player.")
)











#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
(or	(goal attackprioritychange yes)
	(up-compare-goal attackStart == yes))
	(up-compare-const mp-game == yes)
=>
	(up-set-defense-priority c: market c: 3000); 2500
	(up-set-offense-priority c: market c: 6)); 5

(defrule
(or	(goal attackprioritychange yes)
	(up-compare-goal attackStart != yes)); test
=>
	(up-modify-goal attackpriorities g:= strategy))
(defrule
	(up-compare-goal attackpriorities != drush)
	(up-compare-goal attackpriorities != grush)
	(up-compare-goal attackpriorities != s-flush)
	(up-compare-goal attackpriorities != r-flush)
	(up-compare-goal attackpriorities != a-rush)
	(up-compare-goal attackpriorities != ca-rush)
	(up-compare-goal attackpriorities != krush)
	(up-compare-goal attackpriorities != stonewall)
	(up-compare-goal attackpriorities != usual)
=>
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(and	(current-age >= imperial-age)
		(population >= max-civ-pop))
(or	(unit-type-count battering-ram-line >= 2)
(or	(unit-type-count trebuchet-set >= 1)
(or	(unit-type-count bombard-cannon-line >= 4)
	(up-compare-goal mangonel-set >= 16)))))
	(up-compare-goal attackpriorities != usual)
=>
	(set-goal attackpriorities usual)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal attackStart == yes); tbs
=>
	(set-goal attackprioritychange yes))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 1)
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 1)
	(set-goal temporary-goal4 1)
	(set-goal temporary-goal5 1)
	(set-goal temporary-goal6 1)
	(set-goal temporary-goal7 1))
(defrule
(or	(and	(up-compare-goal attackpriorities != drush)
		(and	(up-compare-goal attackpriorities != s-flush)
			(up-compare-goal attackpriorities != r-flush)))
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 1); heavy fortifications
	(set-goal temporary-goal2 3); simple fortifications
	(set-goal temporary-goal3 5); town center
	(set-goal temporary-goal4 7); military buildings
	(set-goal temporary-goal5 11); camps
	(set-goal temporary-goal6 10); mill
	(set-goal temporary-goal7 2)); dock
(defrule
(or	(up-compare-goal attackpriorities != grush)
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 1); heavy fortifications
	(set-goal temporary-goal2 7); simple fortifications
	(set-goal temporary-goal3 6); town center
	(set-goal temporary-goal4 5); military buildings
	(set-goal temporary-goal5 8); camps
	(set-goal temporary-goal6 10); mill
	(set-goal temporary-goal7 11)); dock
(defrule
(or	(and	(up-compare-goal attackpriorities != a-rush)
		(up-compare-goal attackpriorities != ca-rush))
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 1); heavy fortifications
	(set-goal temporary-goal2 4); simple fortifications
	(set-goal temporary-goal3 8); town center
	(set-goal temporary-goal4 5); military buildings
	(set-goal temporary-goal5 10); camps
	(set-goal temporary-goal6 7); mill
	(set-goal temporary-goal7 2)); dock
(defrule
(or	(up-compare-goal attackpriorities != krush)
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 1); heavy fortifications
	(set-goal temporary-goal2 11); simple fortifications
	(set-goal temporary-goal3 8); town center
	(set-goal temporary-goal4 5); military buildings
	(set-goal temporary-goal5 10); camps
	(set-goal temporary-goal6 9); mill
	(set-goal temporary-goal7 2)); dock
(defrule
(or	(up-compare-goal attackpriorities != stonewall)
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 4); heavy fortifications
	(set-goal temporary-goal2 7); simple fortifications
	(set-goal temporary-goal3 11); town center
	(set-goal temporary-goal4 5); military buildings
	(set-goal temporary-goal5 10); camps
	(set-goal temporary-goal6 9); mill
	(set-goal temporary-goal7 2)); dock
(defrule
(or	(up-compare-goal attackpriorities != usual)
	(goal attackprioritychange no))
=>
	(up-jump-rule 1))
(defrule
	(goal attackprioritychange yes)
=>
	(set-goal temporary-goal 10); heavy fortifications
	(set-goal temporary-goal2 9); simple fortifications
	(set-goal temporary-goal3 10); town center
	(set-goal temporary-goal4 5); military buildings
	(set-goal temporary-goal5 8); camps
	(set-goal temporary-goal6 7); mill
	(set-goal temporary-goal7 2)); dock

(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: castle g: temporary-goal)
	(up-set-offense-priority c: bombard-tower g: temporary-goal)
	(up-set-offense-priority c: krepost g: temporary-goal)
	(up-set-offense-priority c: donjon g: temporary-goal2)
	(up-set-offense-priority c: watch-tower g: temporary-goal2)
	(up-set-offense-priority c: town-center g: temporary-goal3)
	(up-set-offense-priority c: town-center-foundation g: temporary-goal3)
	(up-set-offense-priority c: monastery g: temporary-goal4)
	(up-set-offense-priority c: barracks g: temporary-goal4)
	(up-set-offense-priority c: stable g: temporary-goal4)
	(up-set-offense-priority c: archery-range g: temporary-goal4)
	(up-set-offense-priority c: siege-workshop g: temporary-goal4)
	(up-set-offense-priority c: lumber-camp g: temporary-goal5)
	(up-set-offense-priority c: mining-camp g: temporary-goal5)
	(up-set-offense-priority c: mill g: temporary-goal6))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-offense-priority c: dock g: temporary-goal7)
	(up-modify-goal temporary-goal c:* 2000)
	(up-modify-goal temporary-goal2 c:* 2000)
	(up-modify-goal temporary-goal3 c:* 2000)
	(up-modify-goal temporary-goal4 c:* 2000)
	(up-modify-goal temporary-goal5 c:* 2000)
	(up-modify-goal temporary-goal6 c:* 2000)
	(up-modify-goal temporary-goal7 c:* 2000)
	(up-set-defense-priority c: castle g: temporary-goal)
	(up-set-defense-priority c: bombard-tower g: temporary-goal)
	(up-set-defense-priority c: krepost g: temporary-goal)
	(up-set-defense-priority c: donjon g: temporary-goal2)
	(up-set-defense-priority c: watch-tower g: temporary-goal2)
	(up-set-defense-priority c: town-center g: temporary-goal3)
	(up-set-defense-priority c: town-center-foundation g: temporary-goal3))
(defrule
	(goal attackprioritychange yes)
=>
	(up-set-defense-priority c: monastery g: temporary-goal4)
	(up-set-defense-priority c: barracks g: temporary-goal4)
	(up-set-defense-priority c: stable g: temporary-goal4)
	(up-set-defense-priority c: archery-range g: temporary-goal4)
	(up-set-defense-priority c: siege-workshop g: temporary-goal4)
	(up-set-defense-priority c: lumber-camp g: temporary-goal5)
	(up-set-defense-priority c: mining-camp g: temporary-goal5)
	(up-set-defense-priority c: mill g: temporary-goal6)
	(up-set-defense-priority c: dock g: temporary-goal7))
(defrule
	(up-compare-goal attackprioritychange != no)
=>
	(set-goal attackprioritychange no))
#end-if
#end-if
#end-if














#load-if-not-defined WONDER-RACE
#load-if-not-defined DEATH-MATCH

#load-if-not-defined SCANDANAVIA-MAP; A
#load-if-not-defined HIGHLAND-MAP; hm
(defrule
(or	(up-compare-const grush-affinity <= 0)
(or	(up-compare-goal map != water);
(or	(up-compare-goal strategy-type2 == water);
(or	(and	(up-compare-goal fishing != yes)
		(goal inseln no));
(or	(and	(up-compare-goal targetdistance < 50); 45
		(goal inseln no))
	(goal strategylocked yes))))))
=>
	(up-jump-rule 3))
(defrule
(or	(game-time <= 2)
(or	(current-age >= castle-age);
(or	(goal strategylocked yes)
(or	(goal fleet no)
(or	(and	(goal inseln no)
		(and	(map-type coastal)
			(strategic-number teambalance <= 0))); (current-age >= feudal-age)
	(strategic-number sn-current-age >= imperial))))))
=>
	(up-jump-rule 2))
(defrule
(nor	(goal inseln yes)
(or	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq))
(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3)
	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3))))
=>
	(up-jump-rule 1))
(defrule
(or	(goal position-goal flank); for now
	(goal inseln yes))
=>
	(set-goal strategy grush)
	(set-goal milunits grush)
	(set-goal attackprioritychange yes)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(disable-self)); end jump
#end-if
#end-if
(defrule
	(up-compare-const wk-game == 1)
	(goal strategy grush)
	(up-compare-goal fg-var != yes)
(or	(up-compare-const fgrush-affinity > grush-affinity)
	(goal position-goal flank))
	(up-compare-const fgrush-affinity >= grush-affinity)
	(up-compare-const fgrush-affinity >= 1)
=>
	(set-goal fg-var yes))
(defrule
(or	(up-compare-const wk-game != 1)
	(up-compare-const fgrush-affinity <= 0))
	(up-compare-goal fg-var != no)
=>
	(set-goal fg-var no))
(defrule
	(up-compare-goal fg-var != no)
(or	(up-compare-goal navycount g:>= maxnavy)
(or	(building-type-count-total town-center >= 3)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop)))))
=>
	(set-goal fg-var no))

(defrule
	(up-compare-goal strategy-type2 != water)
=>
	(up-jump-rule 5))
(defrule
	(goal inseln no)
	(goal strategylocked no)
	(building-type-count-total dock >= 1)
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 12)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: dock c: 12)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-get-point-distance temporary-point-x position-self-x temporary-goal)
	(set-goal temporary-goal2 65517)
	(disable-self))
(defrule
	(goal temporary-goal2 65517)
	(goal inseln no)
	(goal strategylocked no)
	(building-type-count dock >= 1)
	(up-compare-goal temporary-goal >= 55); 55
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Dock too far: Resetting strategy.")
	;(chat-to-player every-ally "Cancelling my current strategy, i messed up.")
	(disable-self))
(defrule
(not	(map-type salt-marsh))
(or	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3)
(or	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3)
	(and	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq)
		(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq))))
	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq2)
=>
	(chat-to-player my-player-number "gr-var: 2.")
	(set-goal gr-var 2)
;	(up-get-fact cc-gaia-type-count shore-fish-class temporary-goal)
;	(up-chat-data-to-player my-player-number "shore: %d" g: temporary-goal)
;	(up-get-fact cc-gaia-type-count ocean-fish-class temporary-goal)
;	(up-chat-data-to-player my-player-number "ocean: %d" g: temporary-goal)
	(disable-self))
(defrule
(not	(map-type salt-marsh))
	(cc-players-unit-type-count 0 shore-fish-class >= shorefishreq3)
	(cc-players-unit-type-count 0 ocean-fish-class >= deepfishreq3)
=>
	(chat-to-player my-player-number "gr-var: 3.")
	(set-goal gr-var 3)
	(disable-self))
(defrule
	(goal inseln no)
	(goal strategylocked no)
	(up-compare-goal gr-var != 1)
	(building-type-count dock >= 1)
	(players-building-count any-enemy >= 1)
	(goal position-goal flank); for now
=>
	(up-full-reset-search)
	(up-find-local c: dock c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object temporary-point-x)
	(up-get-point position-enemy point-x)
	(up-get-point-distance temporary-point-x point-x temporary-goal)
	(set-goal temporary-goal3 65432)
	(disable-self))
(defrule
	(goal temporary-goal3 65432)
	(goal inseln no)
	(goal strategylocked no)
	(up-compare-goal gr-var != 1)
	(building-type-count dock >= 1)
	(players-building-count any-enemy >= 1)
	(up-compare-goal temporary-goal g:< targetdistance)
	(goal position-goal flank); for now
=>
	(chat-to-player my-player-number "gr-var: 1.")
	(set-goal gr-var 1)
	(disable-self)); end jump
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
;#load-if-not-defined BLACK-FOREST-MAP


;#load-if-not-defined OASIS-MAP


#load-if-not-defined GOLD-RUSH-MAP; nooope
#load-if-not-defined UP-GROUPED-BY-TEAM; hmm
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined MEDIUM-RESOURCES-START

#load-if-defined REVEAL-ALL-VISIBLE
#load-if-defined UP-HUMAN-ENEMY
(defrule
	(player-in-game any-human-enemy)
	(up-compare-goal targetdistance >= 36)
=>
	(up-jump-rule 10))
#end-if
#end-if
(defrule
(or	(up-compare-const drush-affinity <= 0)
(or	(up-compare-const drush-affinity <= 1);
(or	(and	(up-compare-const drush-affinity <= 2); 1
		(up-compare-const drush-affinity g:< strategy-affinity))
(or	(building-type-count town-center >= 2)
(or	(cc-players-unit-type-count 0 wolf >= deepfishreq3)
	(cc-players-unit-type-count 0 jaguar >= deepfishreq3))))))
=>
	(up-jump-rule 9))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 8)); expect it to be walled for enemies too
(defrule
(or	(up-compare-goal nomaden != no)
	(up-compare-goal landnomad != no))
(or	(players-building-count every-enemy <= 0)
	(building-type-count town-center <= 0))
=>
	(up-jump-rule 7))
(defrule
(or	(and	(up-compare-const grouped-by-team == 1)
		(up-compare-const mp-game == 1))
(or	(up-compare-goal targetdistance >= 90); 100
(or	(game-time <= 2)
(or	(military-population <= 0)
(or	(military-population >= 2)
(or	(building-type-count-total town-center >= 2)
	(strategic-number sn-current-age >= dfeudal)))))))
=>
	(up-jump-rule 6))
(defrule
(or	(up-compare-const diff-fp != 1)
(or	(up-compare-goal map != land)
	(and	(goal position-goal pocket)
		(or	(and	(not	(civ-selected celtic))
				(up-compare-const drush-affinity < 3))
			(up-compare-const drush-affinity < 2)))))
=>
	(up-jump-rule 5))
(defrule
	(up-compare-const drush-affinity < 3)
(or	(players-civ target-player gothic)
(or	(players-civ every-enemy gothic)
(or	(players-civ target-player chinese)
	(players-civ every-enemy chinese))))
=>
	(up-jump-rule 4))
(defrule
	(goal strategy usual)
	(goal inseln no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal mysheep >= 6)
	(and	(up-compare-goal mysheep >= 4)
		(up-compare-goal gl-random-number < 80)))
	(game-time < 20)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal strategy drush)
;	(set-goal milunits yes)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal strategy usual)
	(goal inseln no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal totalsheep >= 9)
(or	(up-compare-goal totalboars >= 3)
	(up-compare-goal forage-count >= 12)))
	(game-time < 20)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal strategy drush)
;	(set-goal milunits yes)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10)
	(goal strategy usual)
	(goal inseln no)
	(goal milunits yes)
	(goal strategylocked no)
(or	(up-compare-goal mysheep >= 6)
	(and	(up-compare-goal mysheep >= 4)
		(up-compare-goal strategy-type >= castle-war)))
	(game-time < 20)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal strategy drush)
;	(set-goal milunits yes)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
; nn	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
;	(game-time > 2)
	(game-time > 57); test
	(game-time < 66)
; jump	(goal position-goal flank)
	(up-compare-goal strategy-type >= castle-war)
	(goal inseln no)
	(goal strategylocked no)
	(goal aggressivestrat 1)
	(building-type-count-total town-center <= 1)
	(strategic-number sn-current-age <= feudal)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal strategy drush)
	(set-goal milunits yes)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))

#end-if
#end-if
#end-if
#end-if


(defrule
(or	(up-compare-goal position-goal != flank)
(or	(and	(up-compare-const r-flush-affinity <= 0)
		(up-compare-const sk-var-affinity <= 0))
	(and	(and	(up-compare-const r-flush-affinity <= 1)
			(up-compare-const sk-var-affinity <= 1))
		(and	(up-compare-const r-flush-affinity g:< strategy-affinity)
			(up-compare-const sk-var-affinity g:< strategy-affinity)))))
=>
	(up-jump-rule 5))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 4)); expect it to be walled for enemies too
(defrule
	(game-time > 2)
	(goal strategy usual)
;	(goal nomaden no)
;	(goal landnomad no)
	(goal map land)
	(goal milunits yes)
	(military-population >= 1)
	(goal strategylocked no)
	(building-type-count-total town-center <= 1)
	(game-time < 60); 20
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 66)
	(up-compare-goal strategy-type >= castle-war)
	(goal inseln no)
	(military-population >= 1); for now
	(goal strategylocked no)
	(goal aggressivestrat 1)
	(building-type-count-total town-center <= 1)
	(goal map land)
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(game-time > 54)
	(and	(goal strategy drush); drushmicro still on
		(unit-type-count-total militiaman-line >= drush-militias))
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
;	(game-time > 54)
	(goal strategy s-flush)
(or	(strategic-number sn-current-age >= fcastlea)
(or	(unit-type-count-total scout-cavalry-line >= scrush-cap)
(or	(unit-type-count 449 >= 1)
(or	(strategic-number spears >= 2)
	(and	(building-type-count-total stable >= 1)
			(up-compare-goal total-wood-amount >= mb-cost))))))
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
); end jump


(defrule
(or	(up-compare-const s-flush-affinity <= 0)
(or	(and	(up-compare-const s-flush-affinity <= 1)
		(goal position-goal flank))
	(and	(up-compare-const s-flush-affinity <= 2)
		(and	(up-compare-const s-flush-affinity g:<= strategy-affinity)
			(and	(goal sk-var no)
				(up-compare-goal strategy-type <= feudal-war))))))
=>
	(up-jump-rule 5))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 4)); expect it to be walled for enemies too
(defrule
(or	(up-compare-goal strategylocked != no)
(or	(game-time <= 2)
(or	(game-time >= 66); 60
(or	(and	(strategic-number sn-maximum-hunt-drop-distance >= 16)
		(and	(up-compare-goal mysheep < 4); 5
			(up-compare-goal totalboars < 2)))
(or	(military-population <= 0)
	(strategic-number sn-current-age >= dfeudal)))))); fcastlea
=>
	(up-jump-rule 3))
(defrule
	(goal position-goal flank)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-const s-flush-affinity >= 3))
;	(goal nomaden no)
;	(goal landnomad no)
	(goal map land)
	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
	(building-type-count-total town-center <= 1)
	(game-time < 60); 20
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy s-flush)
	(set-goal milunits s-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal position-goal pocket)
	(up-compare-goal targetdistance < 144); 126
	(up-compare-goal strategy-type >= castle-war)
	(goal strategy usual)
	(goal milunits yes)
;	(goal nomaden no)
;	(goal landnomad no)
	(goal map land)
	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
	(building-type-count-total town-center <= 1)
	(game-time < 60); 20
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy s-flush)
	(set-goal milunits s-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time < 66)
	(goal position-goal flank)
	(up-compare-goal strategy-type >= castle-war)
	(goal inseln no)
	(unit-type-count scout-cavalry >= 1); (military-population >= 1)
	(goal aggressivestrat 1)
	(building-type-count-total town-center <= 1)
	(goal map land)
	(strategic-number sn-current-age <= feudal)
=>
	(set-goal strategy s-flush)
	(set-goal milunits s-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24)); end jump


;#end-if ; was not Oasis


(defrule
(or	(goal inseln yes)
(or	(up-compare-goal map != land)
(or	(up-compare-const a-rush-affinity <= 1); 0
	(and	(up-compare-const a-rush-affinity <= 2)
		(up-compare-const a-rush-affinity g:<= strategy-affinity)))))
=>
	(up-jump-rule 9))
(defrule
(or	(up-compare-goal gl-random-number < 20); usually not the best strategy so don't
(or	(up-compare-goal gl-random-number >= 30); use it too often (some diversity should be nice though)
(or	(players-civ any-enemy persian)
	(and	(up-compare-const number-stables >= 1)
		(players-civ any-ally persian)))))
=>
	(up-jump-rule 4))
(defrule
(nor	(map-type arena)
(or	(map-type fortress)
;(or	(map-type oasis)
	(map-type black-forest)));)
=>
	(up-jump-rule 1))
(defrule
	(game-time > 4); 2
;	(goal position-goal pocket)
	(goal inseln no)
	(goal strategy usual)
	(goal milunits yes); for now
	(goal strategylocked no)
	(goal map land); hmm
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 4); 2
	(goal position-goal pocket)
	(goal strategy usual)
	(goal map land)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(game-time < 60); 20
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 4); 2
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal map land); hmm
	(goal inseln no)
	(goal aggressivestrat 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
(or	(strategic-number skirms >= 15)
(or	(strategic-number siege >= 10)
(or	(players-civ any-enemy persian)
	(building-type-count-total stable >= 2)))); hmm
=>
	(up-jump-rule 3))
(defrule
	(game-time > 52)
(or	(and	(goal strategy s-flush)
		(and	(strategic-number sn-current-age >= fcastlea)
			(building-type-count-total archery-range >= 1)))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
(or	(up-compare-goal targetdistance < 126)
	(and	(up-compare-goal verbuendete g:> feinde)
		(goal position-goal flank))); >=
=>
	(up-jump-rule 1))
(defrule
	(game-time > 14); 15
	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jumps


(defrule
(or	(goal inseln yes)
(or	(up-compare-const krush-affinity <= 0)
	(and	(up-compare-const krush-affinity <= 1)
		(up-compare-const krush-affinity g:< strategy-affinity))))
=>
	(up-jump-rule 9))
(defrule
	(civ-selected indian)
	(goal allowspears no)
(or	(up-compare-const krush-affinity <= 1)
	(up-compare-goal strategy-affinity >= 2))
=>
	(up-jump-rule 8))
(defrule
	(game-time > 2)
	(game-time < 60); 20
	(goal map land)
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy-affinity <= 1)
	(up-compare-goal strategy-affinity < krush-affinity)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 60); 20
	(goal position-goal pocket)
	(goal strategy usual)
;	(goal nomaden no)
;	(goal landnomad no)
	(goal map land)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10); 2
	(game-time < 60); 20
;	(goal position-goal flank)
	(goal strategy usual)
;	(goal nomaden no)
;	(goal landnomad no)
(or	(goal map water)
	(military-population < 1)); test
	(goal inseln no)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal inseln no)
	(goal aggressivestrat 1)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(game-time > 50)
(or	(and	(goal strategy s-flush)
		(strategic-number sn-current-age >= fcastlea))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(goal enemy-goal2 klew)
(or	(strategic-number sn-current-age >= fcastlea); hmm
	(goal position-goal pocket))
	(up-compare-goal strategy-type >= castle-war); keep flushing if it was originally planned
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
(or	(up-compare-goal targetdistance < 126)
	(and	(up-compare-goal verbuendete g:> feinde)
		(goal position-goal flank))); >=
=>
	(up-jump-rule 1))
(defrule
	(game-time > 15)
;(or
	(up-compare-goal strategy-type <= feudal-war)
;	(up-compare-goal strategy == a-rush))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jumps


;#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if


#load-if-not-defined WONDER-RACE
#load-if-not-defined REGICIDE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE

(defrule
(or	(goal inseln yes)
(or	(up-compare-const castledrop-affinity <= 0)
(or	(up-compare-const castledrop-affinity <= 1)
	(and	(up-compare-const castledrop-affinity <= 2)
		(up-compare-const castledrop-affinity g:< strategy-affinity)))))
=>
	(up-jump-rule 10))
(defrule
	(civ-selected italian)
	(goal allowspears no)
=>
	(up-jump-rule 9))
(defrule
(nor	(map-type arena)
(or	(map-type fortress)
(or	(map-type oasis)
	(map-type black-forest))))
=>
	(up-jump-rule 1))
(defrule
	(game-time > 2)
;	(goal position-goal pocket)
	(goal inseln no)
	(goal strategylocked no)
	(goal strategy usual)
;(or
	(goal milunits yes)
;	(goal position-goal flank))
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
	(game-time > 50)
(or	(and	(goal strategy s-flush)
		(strategic-number sn-current-age >= fcastlea))
	(and	(up-compare-goal targetdistance >= 60); 45
		(and	(goal strategy drush); drushmicro still on
			(unit-type-count-total militiaman-line >= drush-militias))))
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(game-time > 2)
	(goal position-goal pocket)
	(goal inseln no)
	(goal strategy usual)
(or	(goal milunits yes); for now
;	(and
	(goal milunits no)
;		(up-compare-goal cozy != yes)
);); test
	(goal strategylocked no)
	(game-time < 180)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal cozy yes)
	(strategic-number teambalance >= 0)
	(game-time > 2)
	(game-time < 180)
	(goal position-goal pocket); For now.
	(goal inseln no)
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(game-time < 60); 20
	(goal strategy usual)
	(goal milunits yes)
	(building-type-count-total castle >= 1); -total
(or	(goal inseln no)
	(civ-selected gothic))
	(goal strategylocked no)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 2)
	(goal position-goal flank)
(or	(goal map water)
	(military-population < 1)); test
	(goal inseln no)
	(goal milunits yes)
; test	(military-population >= 1)
	(goal strategylocked no)
	(game-time < 60); 20
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
(or	(up-compare-goal targetdistance < 126)
	(and	(up-compare-goal verbuendete g:> feinde)
		(goal position-goal flank))); >=
=>
	(up-jump-rule 1))
(defrule
	(game-time > 13); 15
;(or
	(up-compare-goal strategy-type <= feudal-war)
;	(up-compare-goal strategy == a-rush))
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
	(strategic-number teambalance >= 0)
	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jumps


#end-if
#end-if
#end-if
#end-if
#end-if; DM
#end-if; wonder race and regicide


#load-if-not-defined WONDER-RACE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE


(defrule
(or	(up-compare-const stonewall-affinity <= 0)
	(and	(up-compare-const stonewall-affinity <= 1)
		(up-compare-const stonewall-affinity g:< strategy-affinity)))
=>
	(up-jump-rule 4))
(defrule
;(or	(military-population <= 0)
(or	(up-compare-goal inseln != no);	(up-compare-goal map != land)
(or	(up-compare-goal position-goal != pocket)
(or	(game-time >= 60)
(or	(goal strategylocked yes)
(or	(players-civ every-enemy gothic)
(or	(players-civ every-enemy japanese)
	(players-civ every-enemy viking)))))));)
=>
	(up-jump-rule 1))
(defrule
	(game-time > 2)
(or	(goal strategy usual)
	(and	(up-compare-goal strategy-type >= imperial-war)
		(or	(up-compare-goal gl-random-number < 17); 20
			(up-compare-goal mysheep >= 6)))); 4
	(goal nomaden no)
	(goal landnomad no)
;	(goal milunits yes)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
(or	(up-compare-goal targetdistance < 126)
	(and	(up-compare-goal verbuendete g:> feinde)
		(goal position-goal flank))); >=
=>
	(up-jump-rule 1))
(defrule
	(game-time > 15)
;(or
	(up-compare-goal strategy-type <= castle-war);feudal-war)
;	(up-compare-goal strategy == a-rush))
	(strategic-number sn-current-age <= dark)
(or	(players-building-count every-enemy >= 1)
	(up-compare-const grouped-by-team == 1))
(or	(game-time < 180)
	(players-building-count every-enemy >= 1)); target-player
;	(strategic-number teambalance >= 0)
	(goal strategylocked no)
	(goal position-goal pocket);	(unit-type-count-total militiaman-line <= 0)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jumps


#end-if
#end-if
#end-if
#end-if










#load-if-not-defined WONDER-RACE; back-up strats
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined DEATH-MATCH
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
;test#load-if-not-defined BLACK-FOREST-MAP
;test#load-if-not-defined OASIS-MAP

(defrule
(or	(goal strategylocked yes)
	(and	(up-compare-const r-flush-affinity <= 0)
		(up-compare-const sk-var-affinity <= 0)))
=>
	(up-jump-rule 2))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 1)); expect it to be walled for enemies too
(defrule
	(up-compare-goal strategy-type > feudal-war); !=
	(up-compare-goal total-food-amount < 1100)
(or	(up-compare-goal total-food-amount < 800)
	(strategic-number sn-current-age <= dark))
	(players-building-count target-player >= 1)
	(up-compare-goal targetdistance < 45)
(or	(building-type-count town-center >= 1)
	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
	(goal map land)
=>
	(set-goal strategy r-flush)
	(set-goal milunits r-flush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)); end jumps


(defrule
(or	(up-compare-const a-rush-affinity <= 0)
(or	(and	(up-compare-const a-rush-affinity <= 1);
		(goal position-goal pocket))
	(and	(or	(and	(up-compare-const a-rush-affinity <= 2)
					(goal position-goal pocket))
				(up-compare-const a-rush-affinity <= 1))
		(up-compare-const a-rush-affinity g:< strategy-affinity))))
=>
	(up-jump-rule 8))
(defrule
	(up-compare-const a-rush-affinity <= 1)
	(up-research-status c: ri-bodkin-arrow <= research-available)
	(up-research-status c: ri-thumb-ring <= research-available)
	(up-research-status c: ri-ballistics <= research-available)
(or	(up-research-status c: ri-fletching <= research-available)
	(unit-type-count archery-class <= 2))
=>
	(up-jump-rule 7))
(defrule
(or	(up-compare-goal strategylocked != no)
(or	(up-compare-goal inseln != no)
	(up-compare-goal map != land)))
=>
	(up-jump-rule 6))
(defrule
	(game-time >= 20); 16 - low priority
	(game-time < 60); 30
	(goal inseln no)
;	(goal position-goal pocket)
	(goal strategy usual)
	(goal milunits yes)
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
; test	(military-population >= 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time > 10); 2 - low priority
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal strategy usual); test
	(goal inseln no)
	(goal aggressivestrat 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(up-compare-goal strategy-type2 == land)
	(goal inseln no)
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(unit-type-count-total villager >= 26)
	(strategic-number sn-current-age <= dfeudal)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal strategy-type castle-war)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal control-goal 7)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(strategic-number teamsuperiority <= 0)
(or	(goal position-goal flank)
	(strategic-number teamsuperiority <= -1))
	(up-compare-goal cozy <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
;	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-current-age <= castlea);
	(up-research-status c: castle-age >= research-available);	(up-research-status c: castle-age == research-pending)
(or	(military-population < 5)
	(building-type-count-total archery-range >= 1))
	(civilian-population < 60)
	(building-type-count-total stable <= 0);	(up-research-status c: ri-bloodlines <= research-available)
	(unit-available archer-line);
	(up-compare-goal cozy <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jumps


(defrule
(or	(up-compare-goal inseln != no)
(or	(up-compare-goal strategylocked != no)
(or	(up-compare-const krush-affinity <= 0)
	(and	(up-compare-const krush-affinity <= 1)
		(up-compare-const krush-affinity g:< strategy-affinity)))))
=>
	(up-jump-rule 8))
(defrule
	(civ-selected indian)
	(goal allowspears no)
(or	(up-compare-const krush-affinity <= 1)
	(up-compare-goal strategy-affinity >= 2))
=>
	(up-jump-rule 7))
(defrule
	(game-time >= 16)
	(game-time < 60); 30
;	(goal position-goal pocket)
	(goal strategy usual)
	(goal milunits yes)
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
; test	(military-population >= 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(game-time > 2)
	(game-time < 66)
;	(goal position-goal pocket)
	(up-compare-goal strategy-type >= imperial-war)
	(goal aggressivestrat 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 24))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(up-compare-goal strategy-type2 == land)
	(goal map land); hmm
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(unit-type-count-total villager >= 26)
	(strategic-number sn-current-age <= dfeudal)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal strategy-type castle-war)
	(disable-self))
(defrule
	(goal control-goal 7)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(strategic-number teamsuperiority <= -1); 0; test
	(up-compare-goal cozy <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(military-population < 5)
	(up-research-status c: castle-age >= research-available)
(or	(building-type-count-total stable >= 1)
	(up-research-status c: castle-age == research-pending))
;	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-current-age <= castlea);
	(unit-available scout-cavalry-line);
	(civilian-population < 90)
;	(unit-available knight-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule; test
	(goal strategy r-flush)
	(goal milunits r-flush)
	(goal sk-var yes)
	(civilian-population < 90)
	(up-research-status c: castle-age == research-pending)
;	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-current-age <= castlea);
;	(building-type-count-total archery-range <= 3); 2
	(strategic-number sn-military-superiority >= -1)
	(goal underattack no)
;	(unit-available knight-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy krush)
	(set-goal milunits krush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jump


;test#end-if
;test#end-if
#end-if
#end-if
#end-if

(defrule
(or	(goal inseln yes)
(or	(up-compare-goal strategylocked != no)
(or	(up-compare-const castledrop-affinity <= 0)
(or	(up-compare-const castledrop-affinity <= 1)
	(and	(up-compare-const castledrop-affinity <= 2)
		(up-compare-const castledrop-affinity g:< strategy-affinity))))))
=>
	(up-jump-rule 14))
(defrule
	(game-time >= 16)
	(game-time < 60); 30
	(goal strategy usual)
	(goal inseln no)
;	(up-compare-goal cozy != yes); no?
(or
	(goal milunits yes)
	(goal aggressivestrat 1))
; test	(military-population >= 1)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(game-time < 60)
	(goal nomaden yes)
	(goal strategy usual)
	(up-gaia-type-count c: stone >= 1)
	(strategic-number sn-current-age >= dfeudal)
	(strategic-number sn-current-age <= castlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal position-goal flank)
	(up-compare-goal strategy-type == feudal-war); <=
	(strategic-number sn-current-age <= dfeudal)
	(goal inseln no)
	(up-compare-goal strategy-type2 == land)
;	(goal map land); hmm
(or	(military-population >= 1)
	(players-building-count any-enemy >= 1))
	(unit-type-count-total villager >= 26)
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal strategy-type castle-war)
	(disable-self))
(defrule
	(up-compare-goal strategy-type <= castle-war)
	(up-compare-goal strategy-type2 != water)
(or	(building-type-count-total gate-class >= 2)
	(building-type-count-total stone-wall-line >= 4))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(up-compare-const ffa-game == yes)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
	(goal milunits no)
	(goal strategy usual)
	(strategic-number teamsuperiority <= -1); 0; test
	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal control-goal 7)
(or	(and	(goal strategy usual)
		(goal milunits yes))
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal inseln <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal strategy usual)
(or	(population < up-max-civ)
	(strategic-number sn-current-age <= castlea))
	(building-type-count castle >= 1)
(or	(up-compare-goal cozy <= no)
	(up-compare-goal milunits != no))
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal milunits yes)
	(goal strategy usual)
;	(military-population < 5)
(or	(civilian-population < 90)
	(goal uugoal yes))
	(up-research-status c: castle-age == research-pending)
	(building-type-count-total stable <= 0);	(building-type-count-total barracks <= 0)
;	(strategic-number sn-current-age >= fcastlea)
;	(strategic-number sn-current-age <= castlea)
;	(unit-available my-unique-unit-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal strategy r-flush)
	(goal milunits r-flush)
	(goal sk-var yes)
;	(military-population < 5)
	(civilian-population < 90)
	(up-research-status c: castle-age == research-pending)
;	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-current-age <= castlea);
;	(building-type-count-total archery-range <= 3); 2
	(strategic-number sn-military-superiority >= -1)
	(goal underattack no)
;	(unit-available my-unique-unit-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(up-compare-const castledrop-affinity >= 2); 3
	(goal strategy usual)
	(goal milunits yes)
;	(military-population < 5)
	(civilian-population < 90)
	(up-research-status c: castle-age >= research-available);	(up-research-status c: castle-age == research-pending)
;	(strategic-number sn-current-age >= fcastlea)
	(strategic-number sn-current-age <= castlea);
;	(building-type-count-total archery-range <= 3); 2
	(strategic-number sn-military-superiority >= -1)
	(goal underattack no)
;	(unit-available my-unique-unit-line)
	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal aggressivestrat krush)
	(goal strategy krush)
	(goal position-goal pocket)
(or	(cc-players-unit-type-count 0 stone-mine >= 1)
	(stone-amount >= castle-stone))
;(or	(goal inseln no)
;	(civ-selected gothic))
; test	(military-population >= 1)
	(building-type-count-total stable <= 0);
	(strategic-number sn-current-age <= fcastlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 0)
	(disable-self))
(defrule
	(goal position-goal pocket)
	(stone-amount >= castle-stone)
	(up-compare-goal milunits != no)
	(building-type-count-total barracks <= 0)
	(building-type-count-total archery-range <= 0)
	(building-type-count-total stable <= 0)
	(strategic-number sn-current-age <= fcastlea)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(set-goal aggressivestrat 0)
	(disable-self))
(defrule
(or	(up-compare-goal targetdistance >= 144)
	(goal cozy yes))
	(goal position-goal pocket)
	(up-compare-goal strategy-type <= castle-war)
	(goal strategylocked no)
	(goal underattack no)
	(goal defend no)
	(goal attacking no)
	(strategic-number sn-current-age <= dark)
=>
	(set-goal strategy castledrop)
	(set-goal milunits castledrop)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jump

#end-if; DM


(defrule
(or	(goal inseln yes)
(or	(up-compare-goal strategylocked != no)
(or	(up-compare-const stonewall-affinity <= 0)
	(and	(up-compare-const stonewall-affinity <= 1)
		(up-compare-const stonewall-affinity g:< strategy-affinity)))))
=>
	(up-jump-rule 5))
(defrule
	(up-compare-goal strategy-type <= castle-war)
	(up-compare-goal strategy-type2 != water)
(or	(building-type-count-total gate-class >= 2)
	(building-type-count-total stone-wall-line >= 4))
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100)); test
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(up-compare-const ffa-game == yes)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
(or	(goal control-goal 7)
	(and	(goal strategy usual)
		(goal milunits no)))
(or	(goal strategy usual)
	(up-compare-goal strategy-type == feudal-war))
;	(up-compare-goal inseln <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
;	(goal milunits yes)
	(goal strategy usual)
	(up-research-status c: imperial-age == research-pending)
	(goal position-goal pocket)
	(goal champgoal no)
	(military-population < 20); for now
	(civilian-population < 90)
	(game-time < 2100)
	(up-research-status c: ri-long-swordsman <= research-available)
(nand	(goal uugoal yes)
	(building-type-count-total castle >= 1))
;	(up-compare-goal cozy <= no)
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(goal strategy usual)
	(up-research-status c: imperial-age == research-pending)
	(goal champgoal no)
	(game-time < 2100)
	(up-gaia-type-count c: gold >= 6)
	(military-population < 20); for now
	(players-unit-type-count every-enemy militiaman-line <= 5)
	(up-research-status c: ri-long-swordsman <= research-available)
(nand	(goal uugoal yes)
	(building-type-count-total castle >= 1))
=>
	(set-goal strategy stonewall)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)
	(disable-self)); end jump


#end-if
#end-if
#end-if
#end-if

(defrule
(or	(goal strategy fast-imp)
(or	(up-allied-goal any-computer-ally strategy == fast-imp)
(or	(up-compare-goal strategylocked != no)
(or	(up-compare-const fi-affinity <= 0)
	(and	(up-compare-const fi-affinity <= 1)
		(up-compare-const fi-affinity g:< strategy-affinity))))))
=>
	(up-jump-rule 3))
(defrule
(or	(dropsite-min-distance deer-hunting <= -1)
(or	(up-compare-goal strategy-type2 == water)
(or	(and	(wall-completed-percentage 2 < 100)
		(wall-completed-percentage 1 < 100))
(or	(building-type-count-total gate-class < 2)
	(building-type-count-total stone-wall-line < 4)))))
=>
	(up-jump-rule 2))
(defrule
(or	(civ-selected turkish)
	(civ-selected malay))
	(strategic-number sn-current-age <= dark)
	(dropsite-min-distance deer-hunting <= 16)
	(up-compare-goal targetdistance >= 40)
	(players-military-population every-enemy <= 2)
=>
	(set-goal strategy fast-imp)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
	(civ-selected portuguese)
	(up-compare-goal feitoria-cap >= 2)
	(strategic-number sn-current-age <= dark)
	(dropsite-min-distance deer-hunting <= 16)
	(up-compare-goal targetdistance >= 60)
	(players-military-population every-enemy <= 2)
=>
	(set-goal strategy fast-imp)
	(set-goal milunits no)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes)); end jump


#load-if-not-defined ALL-TECHS-ENABLED
(defrule
	(goal strategy r-flush)
	(civ-selected turkish)
;	(up-compare-const a-rush-affinity >= 1)
	(up-research-status c: castle-age >= research-pending)
=>
	(set-goal strategy a-rush)
	(set-goal milunits a-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes))
(defrule
(or	(goal strategylocked yes)
	(up-compare-const ca-rush-affinity <= 1))
=>
	(up-jump-rule 1))
(defrule
	(goal strategy a-rush)
	(unit-type-count-total archer-line <= 0)
	(military-population < 4)
	(up-research-status c: ri-crossbow <= research-available)
	(current-age >= castle-age);	(up-research-status c: castle-age >= research-pending)
(or	(up-compare-const ca-rush-affinity > a-rush-affinity)
	(up-compare-const ca-rush-affinity >= 3))
	(up-compare-const ca-rush-affinity >= a-rush-affinity)
	(up-compare-goal inseln <= no);
;	(up-compare-goal relocating <= no)
=>
	(set-goal strategy ca-rush)
	(set-goal milunits ca-rush)
	(up-modify-goal strategy-affinity c:max 2); before readjustment
	(set-goal attackprioritychange yes);
	(disable-self)); end jump
#end-if


(defrule
	(goal milunits r-flush)
	(goal strategy r-flush)
	(goal sk-var yes)
	(goal strategylocked no)
	(goal attacking no)
	(up-research-status c: castle-age >= research-pending)
	(strategic-number sn-current-age >= fcastlea)
=>
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(chat-local-to-self "Resetting sk-s.")
;	(disable-self)
)
(defrule
	(up-compare-goal feinde <= 0)
(or	(up-compare-goal milunits != no)
	(up-compare-goal strategy != usual))
	(goal strategylocked no)
	(strategic-number sn-current-age < imperial)
	(up-compare-goal custom-civ-pop < up-max-civ)
	(population < max-civ-pop)
(or	(up-compare-goal gl-treaty-time >= 301)
	(up-compare-goal gl-treaty-time <= -1))
=>
	(chat-local-to-self "No enemies: Boom.")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes))

(defrule
(or	(goal strategylocked yes);
(or	(strategic-number sn-current-age >= castlea)
(or	(strategic-number sn-current-age <= feudal)
(or	(and	(up-compare-goal strategy != krush)
		(up-compare-goal milunits != krush))
	(game-time <= 2)))))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(set-goal temporary-goal 124)
	(set-goal temporary-goal2 krush-affinity)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-modify-goal temporary-goal g:+ temporary-goal2)
	(up-modify-goal temporary-goal3 g:= temporary-goal)
	(up-modify-goal temporary-goal3 c:+ 18))
(defrule
	(up-compare-goal kr-var != 1)
(or	(up-compare-goal targetdistance g:>= temporary-goal)
	(goal cozy yes))
	(strategic-number teambalance >= 0)
(or	(population-headroom >= 50)
	(up-compare-goal custom-civ-pop < min-number-vills))
	(goal position-goal pocket); For now.
=>
	(set-goal kr-var 1)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(up-compare-goal kr-var != 2)
(nor	(up-compare-goal targetdistance g:>= temporary-goal3)
	(goal cozy yes))
(or	(strategic-number skirms >= 4)
	(strategic-number siege >= 4))
	(strategic-number archers <= 0)
=>
	(set-goal kr-var 2)
	(set-goal attackprioritychange yes)
	(disable-self)); end jump



(defrule
	(game-time > 65); 180; 2
	(goal position-goal pocket)
	(goal milunits yes)
	(goal strategy usual)
	(up-compare-goal targetdistance >= 45)
	(goal underattack no)
	(goal defend no);
	(goal attacking no);
	(goal assistance no);
	(strategic-number sn-current-age <= castlea)
	(building-type-count town-center >= 1)
	(up-compare-goal custom-civ-pop >= 16)
=>
	(chat-local-to-self "Follow-up prov.")
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))

(defrule
(or	(goal milunits yes)
(or	(up-compare-goal strategy-affinity >= 2)
(or	(up-compare-goal strategy-type >= imperial-war)
(or	(goal assistance yes)
(or	(goal attacking yes)
(or	(goal underattack yes)
	(goal escrowing yes)))))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal custom-civ-pop >= 100)
(or	(up-compare-goal custom-civ-pop >= 125)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(and	(up-compare-goal total-food-amount >= imperial-f2)
		(up-compare-goal total-gold-amount >= imperial-g2))
(or	(up-compare-goal total-food-amount >= imperial-food)
	(up-compare-goal total-gold-amount >= imperial-gold)))))
=>
	(chat-local-to-self "Resetting strategy, go up.0")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)); end jump


;(defrule
;(not	(player-in-game any-human-enemy))
;=>
;	(up-jump-rule 7))
(defrule
(nor	(up-compare-const maa-var-affinity >= 3)
	(civilian-population < 23))
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 6))
(defrule
(or	(goal maa-var yes)
(or	(players-current-age any-enemy >= castle-age);(game-time >= 840)
(or	(up-compare-const maa-var-affinity <= 1); 0
(or	(up-compare-goal strategy != r-flush)
(or	(up-compare-const maa-var-affinity < r-flush-affinity)
(or	(up-compare-const maa-var-affinity < sk-var-affinity)
(or	(up-compare-const maa-var-affinity g:< strategy-affinity)
	(up-compare-goal strategylocked == yes))))))))
=>
	(up-jump-rule 5))
(defrule
(or	(up-compare-const drush-affinity <= 0);
(or	(strategic-number sn-current-age >= fcastlea)
;(or	(up-compare-goal sk-var != no);
(or	(up-compare-goal strategy-type != feudal-war)
(or	(goal position-goal pocket)
(or	(players-building-count target-player <= 0)
	(up-compare-goal targetdistance >= 80))))));); 75
=>
	(up-jump-rule 4))
(defrule
(or	(building-type-count-total barracks <= 0)
(or	(strategic-number sn-current-age >= feudal)
(or	(players-building-type-count focus-player mining-camp >= 1)
(or	(players-unit-type-count focus-player archer-line >= 1)
(or	(up-compare-sn sn-current-age g:< enemyState); <=
	(civilian-population >= 23))))))
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 3))
(defrule
	(up-compare-const maa-var-affinity < 3)
(or	(players-civ target-player burmese)
(or	(players-civ target-player bulgarians)
(or	(players-civ target-player gothic)
(or	(players-civ target-player japanese)
	(players-civ target-player viking)))))
=>
	(up-jump-rule 2))
(defrule
	(strategic-number sn-current-age <= dark)
;(or	(unit-type-count-total villager < 21)
;	(up-compare-goal total-food-amount < feudal-food)))
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal strategy != drush)
=>
	(up-jump-rule 1))
(defrule
	(true)
=>
;	(chat-to-player my-player-number "Strtl")
	(set-goal maa-var yes)
	(disable-self)); end jump
(defrule
	(up-compare-goal maa-var != no)
(or	(game-time >= 1080)
(or	(strategic-number archers >= 7)
(or	(strategic-number cavalry >= 10)
(or	(up-research-status c: castle-age >= research-pending)
	(and	(up-research-status c: ri-man-at-arms >= research-pending)
		(unit-type-count-total militiaman-line >= 8))))))
=>
	(chat-to-player my-player-number "Bmbr")
	(set-goal maa-var no))
(defrule
	(up-compare-goal maa-var != no)
	(up-research-status c: castle-age >= research-available)
	(up-compare-goal strategy != r-flush)
	(up-compare-goal strategy-type != feudal-war)
(or	(up-compare-goal milunits != yes)
(or	(civilian-population >= 32); 30
	(game-time >= 900))); 840
=>
	(chat-to-player my-player-number "Bmbr2")
	(set-goal maa-var no))
(defrule
	(up-compare-goal maa-var != no)
	(strategic-number sn-current-age == dfeudal)
	(up-compare-goal strategy-type >= castle-war)
	(up-research-status c: ri-man-at-arms < research-pending)
	(unit-type-count-total militiaman-line <= drush-militias)
=>
	(chat-to-player my-player-number "Bmbr3")
	(set-goal maa-var no))
(defrule
	(up-compare-goal maa-var != no)
	(strategic-number sn-military-superiority >= 2)
	(military-population >= 9)
(or	(up-research-status c: ri-supplies <= research-available)
	(military-population >= 13))
=>
	(chat-to-player my-player-number "Bmbr4")
	(set-goal maa-var no))
(defrule
	(up-compare-goal maa-var != no)
	(unit-type-count 152 >= 1)
	(unit-type-count-total militiaman-line <= 0)
	(up-compare-goal enemy-goal2 != klew)
=>
	(chat-to-player my-player-number "Bmbr5")
	(set-goal maa-var no))

(defrule
	(up-compare-goal drushmicro != yes)
	(up-compare-const diff-fp == 1)
(or	(goal strategy drush)
	(and	(goal maa-var yes)
		(and	(up-compare-goal strategy-type == feudal-war)
			(players-military-population focus-player <= 1))))
=>
	(set-goal drushmicro yes)
	(disable-self);
)
(defrule
	(up-compare-goal drushmicro != no)
	(up-compare-goal strategy != drush); not drushing anymore = attack over or strategy switch
(nand	(goal maa-var yes)
	(up-compare-goal strategy-type <= feudal-war))
(or	(and	(unit-type-count militiaman-line < 1)
		(strategic-number sn-current-age >= fcastlea)); for now
(or	(military-population >= 11)
	(and	(military-population >= 9)
		(up-compare-goal armytech >= castlea))))
=>
	(chat-local-to-self "Stopping drushmicro.");	(chat-to-all "Stopping drushmicro.0")
	(set-goal drushmicro no))


(defrule
(or	(up-compare-goal sk-var == yes)
(or	(up-compare-goal strategylocked == yes)
(or	(up-compare-goal strategy != r-flush)
(or	(up-compare-const sk-var-affinity <= 0)
(or	(up-compare-const sk-var-affinity < r-flush-affinity)
(or	(and	(up-compare-const sk-var-affinity <= r-flush-affinity)
		(up-compare-goal gl-random-number >= 8)); 5
;(or	(game-time >= 180)
	(civ-selected turkish)))))));)
=>
	(up-jump-rule 2))
(defrule
(or	(and	(up-compare-sn sn-current-age g:< enemyState)
		(and	(players-civilian-population focus-player <= 25)
			(building-type-count-total mining-camp <= 0)))
(or	(up-compare-const a-rush-affinity <= 0)
	(and	(players-civ every-enemy mayan)
		(not	(civ-selected mayan)))))
=>
	(set-goal sk-var yes))
(defrule
	(up-compare-goal gl-random-number < 32)
(or	(and	(up-compare-const sk-var-affinity >= 1)
		(up-compare-goal gl-random-number < 8))
(or	(and	(up-compare-const sk-var-affinity >= 2)
		(up-compare-goal gl-random-number < 18))
	(up-compare-const sk-var-affinity >= 3)))
=>
	(set-goal sk-var yes)); end jump
(defrule
	(up-compare-goal sk-var != no)
(or	(up-compare-goal strategy != r-flush)
	(and	(civ-selected turkish)
		(and	(up-research-status c: castle-age >= research-pending)
			(up-research-status c: ri-elite-skirmisher <= research-unavailable))))
=>
	(set-goal sk-var no))
(defrule
	(up-compare-goal sk-var != yes)
(or	(civ-selected spanish)
	(civ-selected bulgarians))
	(up-research-status c: castle-age >= research-pending)
	(up-research-status c: ri-crossbow <= research-unavailable)
=>
	(set-goal sk-var yes))


(defrule
	(game-time > 53)
	(goal position-goal flank)
	(up-compare-goal milunits <= no); 0
	(up-compare-goal targetdistance < 100)
	(up-compare-goal relocating <= no)
	(up-compare-goal strategy-type >= imperial-war)
	(goal inseln no); test
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100); test
	(strategic-number sn-current-age <= castlea);	(current-age <= feudal-age); test
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Messed up strategy selection, resetting.")
	;(chat-to-player every-ally "Messed up strategy selection, resetting.")
;	(disable-self)
)
(defrule
	(game-time > 53)
	(goal inseln yes)
	(up-compare-goal strategy-type <= feudal-war); castle
	(up-compare-goal strategy-type2 != water)
=>
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Messed up strategy selection, resetting.2")
	;(chat-to-player every-ally "Messed up strategy selection, resetting.")
;	(disable-self)
)
(defrule
	(goal strategy drush)
(or	(goal milunits no)
(or	(current-age >= feudal-age)
(or	(strategic-number sn-current-age > feudal)
	(and	(strategic-number sn-current-age > dark)
		(building-type-count-total barracks <= 0)))))
=>
	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting drush after messy start.")
	;(chat-to-player every-ally "Cancelling my current strategy, i messed up.")
)
(defrule
	(goal strategy drush)
(or	(and	(building-type-count-total barracks <= 0)
		(or	(players-building-type-count target-player outpost >= 1)
			(players-building-type-count target-player watch-tower >= 1)))
	(and	(up-compare-goal enemyState >= dfeudal)
		(unit-type-count-total militiaman-line <= 0)))
=>
	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal drushmicro no)
	(set-goal attackprioritychange yes)
	(chat-to-player my-player-number "Resetting drush after slow start.")
	;(chat-to-player every-ally "Cancelling my current strategy, slow up.")
)
(defrule
	(goal strategy drush)
	(goal drushmicro no)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(disable-self))
(defrule; after drushing
	(up-compare-goal drushmicro != yes)
(or	(strategic-number sn-current-age >= feudal)
	(building-type-count-total barracks >= 1))
	(strategic-number sn-gather-defense-units != 1)
=>
	(up-full-reset-search)
	(set-strategic-number sn-gather-defense-units 1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1))
(defrule
	(up-compare-goal strategy-type2 != water);	(game-time > 54)
	(up-compare-goal strategy != sling)
	(current-age >= feudal-age)
	(up-compare-goal strategy-type <= feudal-war)
	(players-building-count every-enemy <= 0)
	(building-type-count market >= 1); blacksmith
(or	(goal position-goal pocket)
(or	(up-compare-goal gl-game-time g:>= c-scout-time)
	(up-compare-goal gl-game-time s:>= sn-home-exploration-time)))
=>
	(chat-local-to-self "Hmm.")
	(set-goal strategy usual); no other strats got selected
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
(or	(and	(goal strategy drush); drushmicro still on
		(unit-type-count-total militiaman-line >= drush-militias))
	(and	(goal strategy s-flush)
		(or	(and	(unit-type-count-total scout-cavalry-line >= scrush-cap)
				(goal position-goal flank));
			(strategic-number sn-current-age >= fcastlea))))
=>
	(chat-local-to-self "Hmm.2")
	(set-goal strategy usual); no other strats got selected
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(up-compare-goal strategylocked != no)
(or	(and	(goal drushmicro yes)
		(up-compare-goal strategy != drush))
(or	(and	(up-compare-goal strategy-type <= feudal-war)
		(strategic-number sn-current-age >= fcastlea))
	(and	(goal strategy usual)
		(strategic-number sn-current-age >= imperial))))
=>
	(chat-local-to-self "Unlock strategy selection.")
	(set-goal strategylocked no))

(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy-type2 != water);
	(goal inseln no)
	(strategic-number sn-current-age == feudal)
	(up-compare-goal total-food-amount < 175); castle-feco
	(up-compare-goal position-goal != pocket); test
	(game-time > 180); test
	(wall-completed-percentage 2 < 100); test
	(wall-completed-percentage 1 < 100); test
	(current-age == feudal-age)
=>
	(chat-to-player my-player-number "No food for FC: Resetting strategy.")
	;(chat-to-player every-ally "Cancelling my current strategy, i messed up.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type == feudal-war); <=
	(strategic-number sn-current-age <= dfeudal)
	(unit-type-count-total villager >= 26)
	(up-compare-goal strategy != krush);
	(up-compare-goal strategy != castledrop);
	(up-compare-goal strategy != a-rush);
	(up-compare-goal strategy != ca-rush);
	(up-compare-goal strategy != klew);
	(up-compare-goal strategy != stonewall);
	(up-compare-goal strategy != fast-imp);
=>
	(chat-local-to-self text-switch-FC)
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
(or	(game-time <= 12)
(or	(players-building-count target-player <= 0); every-enemy
(or	(unit-type-count-total siege-weapon-class >= 1)
(or	(unit-type-count-total trebuchet-set >= 1)
(or	(up-compare-goal strategy == usual)
(or	(up-compare-goal strategy-type >= imperial-war)
	(and	(players-building-type-count target-player stone-wall-line <= 0)
		(players-building-type-count target-player gate <= 0))))))))
=>
	(up-jump-rule 3))
(defrule
	(true)
=>
	(up-full-reset-search)
	(up-set-target-point position-self-x)
	(up-find-local c: villager-class g: villagercount)
	(up-clean-search search-local object-data-distance search-order-asc)
	(up-remove-objects search-local object-data-index >= 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-target point-x)
	(up-get-path-distance point-x 0 temporary-goal)
	(up-modify-goal temporary-goal2 g:= targetdistance)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-get-search-state local-total))
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal g:> temporary-goal2)
(or	(goal position-goal pocket);	(goal strategy krush)
	(and	(up-compare-goal temporary-goal >= 65535)
		(or	(strategic-number sn-military-superiority >= 0); s ; and
			(players-building-type-count every-enemy gate <= 0)))); for now
(or	(strategic-number sn-current-age >= fcastlea); test
	(players-building-count every-enemy >= 1))
=>
	(chat-to-player my-player-number "Walled: Resetting strategy.")
;	;(chat-to-player every-ally "Cancelling my current strategy, enemy walled.")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)); end jump
(defrule
	(up-compare-goal local-total >= 1)
	(up-compare-goal temporary-goal g:> temporary-goal2)
	(goal position-goal flank);	(goal strategy krush)
(or	(strategic-number sn-current-age >= dfeudal); test
	(players-building-count every-enemy >= 1))
=>
	(chat-to-player my-player-number "Walled: Resetting strategy.2")
;	;(chat-to-player every-ally "Cancelling my current strategy, enemy walled.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes)); end jump

#load-if-defined UP-MULTIPLE-ENEMIES
#load-if-not-defined UP-2-PLAYER-GAME
(defrule
	(goal strategy r-flush)
(or	(players-building-type-count target-player town-center <= 0)
	(strategic-number target-civilian-superiority >= 18)); 18
	(strategic-number teamsuperiority >= 0); 1
	(strategic-number sn-military-superiority >= 3)
	(strategic-number target-civilian-superiority >= 9); 6
	(strategic-number teambalance <= 0)
; 0	(goal attacking yes)
	(strategic-number sn-current-age >= fcastlea)
=>
	(chat-to-player my-player-number "Resetting strategy, enemy almost dead.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
;	(set-goal retreatnow yes); test
;	(enable-timer resetnow 22); test
)
(defrule
	(goal strategy r-flush)
	(goal sk-var yes)
(or	(gold-amount >= 460); 400
(or	(building-type-count-total town-center >= 4)
(or	(up-compare-goal tradeunits >= 12)
	(up-compare-goal custom-civ-pop >= 64))))
(or	(strategic-number teambalance <= 0)
	(players-current-age target-player >= castle-age))
=>
	(chat-to-player my-player-number "Resetting strategy, don't overdo it.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
;	(set-goal retreatnow yes); test
;	(enable-timer resetnow 22); test
)
#end-if
#end-if

(defrule
	(up-compare-goal strategy-type2 != water)
=>
	(up-jump-rule 8))
(defrule
	(goal inseln no)
	(strategic-number sn-current-age >= fcastlea)
	(building-type-count-total town-center >= 1); 3
	(up-compare-goal navycount >= 10)
(or	(up-compare-goal navycount >= 15)
	(up-compare-goal enemyfocusnavy < 4))
(or	(up-compare-goal navycount >= 20)
	(up-compare-goal enemyfocusnavy < 8))
	(up-compare-goal biggestenemynavy < 14); enemyfocusnavy
=>
	(chat-to-player my-player-number "Resetting strategy, water control is ours.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
;	(strategic-number sn-current-age >= fcastlea)
(or	(up-compare-goal navycount g:> maxnavy); test
(or	(building-type-count-total town-center >= 3)
(or	(building-type-count-total market >= 1);
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(civilian-population >= up-max-civ)
	(population >= max-civ-pop))))))
	(up-compare-goal navycount g:>= maxnavy)
=>
	(chat-to-player my-player-number "Resetting strategy, water control is ours.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal gl-threat-time < 32000)
	(up-compare-goal enemyfocusnavy >= 8); biggestenemynavy
(or	(up-compare-goal biggestenemynavy >= 13)
	(up-compare-goal navycount < 4))
(or	(up-compare-goal biggestenemynavy >= 18)
	(up-compare-goal navycount < 8))
(or	(up-compare-goal biggestenemynavy >= 23)
	(up-compare-goal navycount < 12))
	(up-compare-goal navycount < 16)
=>
	(chat-to-player my-player-number "Resetting strategy, water control is lost.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(game-time < 33)
	(and	(goal inseln yes)
		(game-time < 333)))
=>
	(up-jump-rule 2))
(defrule
;(or
	(building-type-count-total town-center >= 1)
;	(game-time >= 330)); test
	(up-compare-goal strategy-type <= castle-war)
(or	(strategic-number sn-current-age >= feudal)
	(wood-amount >= 445)); 600
(or	(up-compare-goal strategy-type <= feudal-war)
	(strategic-number sn-current-age >= castlea))
(or	(building-type-count-total dock <= 0)
	(wood-amount >= 755)); 600; 475
=>
	(chat-to-player my-player-number "Resetting strategy, dock.1")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(building-type-count-total town-center >= 1)
	(game-time >= 330)); test
	(up-compare-goal strategy-type <= feudal-war)
;	(goal strategy grush)
	(building-type-count-total dock <= 0)
(or	(strategic-number sn-current-age >= dfeudal)
	(game-time >= 490))
=>
	(chat-to-player my-player-number "Resetting strategy, dock.2")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)); end mini jump
(defrule
(or	(up-compare-goal targetdistance <= 22)
(or	(up-enemy-units-in-town >= 5); might be boats?
	(and	(goal strategy grush)
		(and	(strategic-number sn-current-age >= fcastlea)
			(up-compare-goal biggestenemynavy <= 0)))))
=>
	(chat-to-player my-player-number "Resetting strategy, grush stuff.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(goal position-goal flank)
(or	(building-type-count-total castle <= 0)
	(goal underattack yes))
(or	(strategic-number moenchesiege >= 7)
(or	(strategic-number cavalry >= 7)
(or	(strategic-number archers >= 7)
	(strategic-number infantry >= 7))))
=>
	(chat-to-player my-player-number "Resetting strategy, water strategy def.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)
); end jump of water strategies

(defrule
	(goal strategy s-flush)
(or	(strategic-number sn-current-age >= fcastlea)
	(and	(strategic-number sn-current-age <= dark)
		(unit-type-count-total villager >= 25)))
=>
	(chat-to-player my-player-number "Resetting strategy, s-flush expired.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal scoutmicro != no)
	(up-compare-goal strategy != s-flush)
	(strategic-number sn-current-age >= castlea)
(or	(goal attacking yes)
	(goal underattack yes))
=>
	(set-goal scoutmicro no))
(defrule
	(up-compare-goal scoutmicro != no)
	(up-compare-goal strategy != s-flush)
	(unit-type-count scout-cavalry < 1)
(or	(current-age-time >= 320)
	(current-age >= castle-age))
(or	(goal attacking no)
(or	(unit-type-count siege-weapon-class >= 1)
	(and	(unit-type-count scout-cavalry-line < 2)
		(unit-type-count scout-cavalry < 2))))
=>
	(set-goal scoutmicro no))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100)
	(goal enemy-goal drush)
	(players-military-population target-player >= 5); test
	(goal defend yes); test
	(goal position-goal flank)
(or	(strategic-number sn-current-age <= feudal);	(current-age <= feudal-age)
	(players-unit-type-count target-player spearman-line >= 2))
=>
	(chat-to-player my-player-number "Resetting strategy, enemy drush hurt us too much.")
	;(chat-to-player every-ally "Cancelling my current strategy, enemy drush hurt a lot.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal strategy != usual)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100)
	(goal enemy-goal flush)
	(goal position-goal flank)
(or	(strategic-number sn-current-age <= feudal);	(current-age <= feudal-age)
	(players-unit-type-count target-player spearman-line >= 2))
=>
	(chat-to-player my-player-number "Resetting strategy, enemy flushing.")
	;(chat-to-player every-ally "Cancelling my current strategy, enemy flushing.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))

(defrule
	(up-compare-goal strategy != castledrop)
=>
	(up-jump-rule 9))
(defrule
	(civ-selected italian)
(or	(goal allowspears no)
(or	(players-civ every-enemy aztec)
(or	(players-civ every-enemy mayan)
	(players-civ every-enemy incan))))
(or	(building-type-count-total castle >= 1);
	(goal position-goal pocket))
=>
;	(chat-to-player my-player-number "Resetting strategy, bad match-up.")
	;(chat-to-player every-ally "Cancelling my current strategy, bad match-up.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(strategic-number sn-military-superiority <= -3)
	(up-compare-goal gl-threat-time < 24000);
(or	(players-current-age focus-player >= castle-age)
	(building-type-count castle <= 0))
(or	(goal defend yes)
	(goal position-goal flank))
=>
	(chat-to-player my-player-number "Resetting strategy, under heavy pressure.")
	;(chat-to-player every-ally "Cancelling my current strategy, under pressure.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
;(or	(strategic-number sn-current-age <= feudal)
;	(goal dreitc no))
	(goal position-goal pocket)
	(goal underattack no)
	(goal defend no)
=>
	(up-jump-rule 2))
(defrule
(or	(up-compare-goal gl-threat-source == dangerous-animal-class)
(or	(up-compare-goal gl-threat-time >= 4000)
(or	(players-military-population every-enemy <= 1)
	(up-compare-goal milunits == yes))))
=>
	(up-jump-rule 1))
(defrule
	(goal attacking no);
(or	(up-compare-goal gl-threat-target != scout-unit)
	(unit-type-count-total scout-unit >= 2))
(or	(strategic-number sn-military-superiority <= -1);	(goal position-goal flank)
(or	(and	(building-type-count castle <= 0)
		(and	(unit-type-count villager-stone <= 0)
			(strategic-number sn-military-superiority <= 0)))
	(building-type-count-total barracks >= 1)))
=>
	(chat-to-player my-player-number "Milunits: Yes.")
;	;(chat-to-player every-ally "Milunits: Yes.")
	(set-goal milunits yes)
;	(set-goal dreitc yes) ; test
;	(set-goal attacking no)
;	(set-goal strategy usual)
;	(set-goal attackprioritychange yes)
)
(defrule
	(up-compare-goal milunits != yes); milunits no
(or	(goal underattack yes)
(or	(goal defend yes)
(or	(and	(goal attacking no)
		(and	(up-enemy-units-in-town >= 15)
			(military-population < 10)))
	(building-type-count-total town-center >= 5))))
=>
	(chat-to-player my-player-number "Resetting strategy, under heavy pressure.")
	;(chat-to-player every-ally "Cancelling my current strategy, under pressure.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
(or	(and	(stone-amount <= 200)
		(strategic-number sn-current-age >= castlea));	(strategic-number sn-current-age >= fcastlea)
	(cc-players-unit-type-count 0 stone-mine <= 0))
=>
	(chat-to-player my-player-number "Resetting strategy, no stone.")
	;(chat-to-player every-ally "Cancelling my current strategy, no stone.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
(or	(and	(dropsite-min-distance stone s:> sn-camp-max-distance)
		(strategic-number sn-current-age >= fcastlea)); dfeudal))
	(and	(building-type-count mining-camp >= 4)
		(dropsite-min-distance stone s:> sn-maximum-stone-drop-distance)))
=>
	(chat-to-player my-player-number "Resetting strategy, no stone.")
	;(chat-to-player every-ally "Cancelling my current strategy, no stone.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(game-time >= 180)
	(goal position-goal flank)
	(up-compare-goal gl-threat-time < 3000)
(or	(current-age >= castle-age)
	(goal defend yes))
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(unit-type-count villager-stone <= 0)
=>
	(chat-to-player my-player-number "Resetting strategy, under pressure.")
	;(chat-to-player every-ally "Cancelling my current strategy, under pressure.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)); end jump

(defrule
	(goal strategy fast-imp)
(or	(goal underattack yes)
	(and	(current-age >= imperial-age)
		(current-age-time >= 600)))
=>
	(chat-to-player my-player-number "Resetting strategy, fi.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(goal strategy fast-imp)
(or	(building-type-count town-center >= 3)
(or	(building-type-count-total town-center >= 4)
(or	(building-type-count-total feitoria >= 2)
(or	(population >= max-civ-pop)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
	(up-compare-goal custom-civ-pop >= 80)))))); 67
=>
	(chat-to-player my-player-number "Resetting strategy, fi.2")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(goal strategy fast-imp)
	(up-compare-goal milunits != yes)
(or	(goal uugoal yes)
(or	(goal cavagoal yes)
(or	(goal palagoal yes)
	(goal champgoal yes))))
	(up-research-status c: imperial-age >= research-pending)
=>
	(chat-to-player my-player-number "FI milunits: Yes.")
	;(chat-to-player every-ally "FI milunits: Yes.")
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))

(defrule
(or	(strategic-number sn-current-age < cimperial)
(or	(strategic-number sn-military-superiority >= 3); 2
	(up-compare-goal strategy != stonewall)))
=>
	(up-jump-rule 5))
(defrule
(or	(players-unit-type-count focus-player slinger >= 20)
(or	(players-unit-type-count focus-player militiaman-line >= 10)
(or	(players-unit-type-count focus-player samurai-line >= 10)
(or	(players-unit-type-count focus-player teutonic-knight-line >= 8)
(or	(players-unit-type-count focus-player throwing-axeman-line >= 12)
	(players-unit-type-count focus-player berserk-line >= 10))))))
=>
	(chat-to-player my-player-number "Resetting strategy, hc.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(players-unit-type-count focus-player jaguar-man-line >= 8)
(or	(players-unit-type-count focus-player huskarl-line >= 12)
(or	(players-unit-type-count focus-player barracks-huskarl >= 12)
(or	(players-unit-type-count focus-player elite-barracks-huskarl >= 12)
;(or	(players-unit-type-count focus-player knight-line >= 24)
	(players-unit-type-count focus-player cataphract-line >= 10)))));)
=>
	(chat-to-player my-player-number "Resetting strategy, hc.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
(or	(players-unit-type-count focus-player hand-cannoneer >= 20)
(or	(players-unit-type-count focus-player war-elephant-line >= 8)
	(players-unit-type-count focus-player mameluke-line >= 10)))
=>
	(chat-to-player my-player-number "Resetting strategy, hc.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(current-age >= imperial-age)
(or	(and	(current-age-time >= 300)
		(up-research-status c: ri-elite-eagle-warrior < research-pending))
	(and	(current-age-time >= 600)
		(gold-amount < 50)))
=>
	(chat-to-player my-player-number "Resetting strategy, no EEW or gold.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(gold-amount < 2000)
	(up-compare-goal relic-count < 17)
(or	(and	(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance);	sn-camp-max-distance)
		(strategic-number sn-current-age >= imperial))
	(and	(building-type-count mining-camp >= 6)
		(dropsite-min-distance gold s:> sn-maximum-gold-drop-distance)))
=>
	(chat-to-player my-player-number "Resetting strategy, no gold available.")
	;(chat-to-player every-ally "Cancelling my current strategy.")
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes)); end jump



(defrule
	(goal cozy yes)
	(strategic-number teambalance >= 0)
	(game-time > 2)
	(game-time < 300)
	(goal position-goal pocket); For now.
	(goal strategylocked no)
	(goal underattack no)
	(goal defend no)
	(strategic-number sn-current-age < imperial)
	(up-compare-goal milunits != no)
	(up-compare-goal milunits != castledrop)
	(up-compare-goal kr-var != 1)
=>
;	(chat-to-player my-player-number "Feeling cozy.1")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
;	(disable-self)
)
(defrule
	(goal milunits yes)
	(goal strategy usual)
	(goal strategylocked no)
	(building-type-count castle >= 1)
	(goal position-goal pocket); For now.
	(goal underattack no)
	(goal defend no)
	(strategic-number sn-current-age < imperial);
;(or	(up-compare-goal cozy <= no)
;	(up-compare-goal milunits != no))
;	(up-compare-goal inseln <= no)
;	(up-compare-goal relocating <= no)
=>
	(chat-to-player my-player-number "Feeling cozy.2")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)
	(disable-self))
(defrule
	(up-compare-goal strategy-type <= feudal-war); castle?
	(up-compare-goal strategy-type2 != water); create extra rule (wg-/fs-r?) for that
	(goal strategylocked no)
	(up-compare-const ffa-game == yes)
	(up-compare-goal targetdistance >= 45)
;	(strategic-number sn-current-age <= dfeudal)
;	(players-building-count any-enemy <= 4)
	(game-time < 66)
=>
	(chat-to-player my-player-number "FFA.")
	(set-goal strategy usual)
	(set-goal milunits yes); no
	(set-goal attackprioritychange yes))
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(goal inseln yes)
(or	(building-type-count stone-wall-line >= 4)
(or	(building-type-count palisade-wall >= 40)
	(building-type-count gate-class >= 2))))
=>
	(up-jump-rule 1)); expect it to be walled for enemies too
(defrule
	(up-compare-goal strategy-type >= imperial-war)
	(up-compare-goal milunits != yes); cdrop?
	(goal strategylocked no)
	(up-compare-goal total-food-amount < 1100)
(or	(up-compare-goal total-food-amount < 800)
	(strategic-number sn-current-age <= dark))
	(players-building-count target-player >= 1)
	(up-compare-goal targetdistance < 45)
;(or
	(building-type-count town-center >= 1)
;	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
=>
;	(chat-to-player my-player-number "Too close.1")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-compare-goal milunits != yes); cdrop?
	(goal strategylocked no)
	(players-building-count target-player >= 1)
(or	(goal underattack yes)
	(and	(up-compare-goal targetdistance < 25)
		(up-compare-goal total-food-amount < 800)))
;(or
	(building-type-count town-center >= 1)
;	(game-time >= 480))
	(strategic-number sn-current-age <= dfeudal)
=>
;	(chat-to-player my-player-number "Too close.2")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))


(defrule
(or	(goal strategy usual)
	(up-compare-goal targetdistance < 45))
=>
	(up-jump-rule 1))
(defrule
	(cc-players-unit-type-count 0 forage-bush-class <= 0)
	(cc-players-unit-type-count 0 gold-mine <= 0)
	(cc-players-unit-type-count 0 stone-mine <= 0)
	(cc-players-unit-type-count 0 deer <= 0)
	(cc-players-unit-type-count 0 ostrich <= 0)
	(cc-players-unit-type-count 0 zebra <= 0)
	(cc-players-unit-type-count 0 ibex <= 0)
	(cc-players-unit-type-count 0 shore-fish-class <= 0)
	(cc-players-unit-type-count 0 javelina <= 0)
	(cc-players-unit-type-count 0 wild-boar <= 0)
	(cc-players-unit-type-count 0 rhinoceros <= 0)
	(cc-players-unit-type-count 0 wild-elephant <= 0)
	(cc-players-unit-type-count 0 tree-class g:<= map-size)
=>
;	(chat-to-player my-player-number "Unusual map: Usual strategy.")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))

(defrule
(or	(goal strategy usual)
(or	(goal strategy fast-imp)
	(goal strategy stonewall)))
=>
	(up-jump-rule 1))
(defrule
(or	(civilian-population >= up-max-civ)
(or	(population >= del-civ-pop)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(and	(goal milunits no)
		(up-compare-goal strategy != sling))
	(strategic-number sn-current-age >= cimperial)))))
=>
;	(chat-to-player my-player-number "Resetting strategy for lategame.")
;	;(chat-to-player every-ally "Cancelling my current strategy.")
	(chat-local-to-self "End.")
	(set-goal strategy usual)
	(set-goal milunits yes)
;	(set-goal attacking no)
	(set-goal attackprioritychange yes))


#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME
(defrule
	(up-compare-goal strategy != usual)
	(goal strategylocked no)
=>
;	(chat-to-player my-player-number "Resetting strategy: Difficulty.")
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME
(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy-type <= feudal-war)
	(current-age >= feudal-age)
	(game-time >= max-delay)
	(goal strategylocked no)
=>
;	(chat-to-player my-player-number "Resetting strategy: Difficulty.")
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
#end-if
#end-if
#end-if

(defrule
(or	(goal strategy drush)
	(goal drushmicro yes))
	(up-compare-const diff-fp != 1)
	(goal strategylocked no)
=>
;	(chat-to-player my-player-number "Resetting strategy: Difficulty.")
	(set-goal drushmicro no)
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))
(defrule
	(goal strategy castledrop)
	(building-type-count-total castle >= castle-diff)
=>
;	(chat-to-player my-player-number "Resetting strategy: Difficulty.")
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))

(defrule
	(strategic-number sn-current-age < imperial)
	(up-compare-goal strategy-type <= castle-war)
	(goal inseln yes)
	(up-compare-goal strategy-type2 != land)
	(up-compare-goal strategy != grush)
=>
;	(chat-to-player my-player-number "Resetting strategy: Inseln.")
	(set-goal milunits yes)
	(set-goal strategy usual)
	(set-goal attackprioritychange yes))

;(defrule
;	(up-compare-goal migration-state >= 1)
;=>
;	(up-jump-rule 4))
(defrule
(or	(goal milunits no)
(or	(population >= max-civ-pop)
(or	(up-compare-goal custom-civ-pop >= up-max-civ)
(or	(not	(player-in-game any-ally))
	(and	(building-type-count town-center >= 1)
		(or	(up-compare-goal targetdistance < 32); 36
			(up-compare-goal targetdistance s:< sn-maximum-town-size)))))))
=>
	(up-jump-rule 3))
(defrule
(or	(goal relocating yes)
	(goal underattack no))
	(up-compare-goal relocating >= 1)
;testrl	(building-type-count-total town-center >= 1)
;(or	(up-compare-goal gl-threat-time >= 30000); unreliable in this case
;	(goal attacking yes))
(or	(population < up-max-civ)
	(population < 20))
=>
	(set-goal strategy usual)
	(set-goal milunits no)
;	(chat-local-to-self "End reloc.")
)
(defrule
	(goal underattack no)
	(goal attacking no)
	(strategic-number sn-current-age <= castlea)
	(up-compare-goal gl-threat-time >= 16000)
	(military-population < 12)
	(up-compare-goal focus-mpop < 12)
	(players-military-population any-ally >= 24)
(or	(players-current-age any-ally >= imperial-age)
	(players-current-age any-enemy >= imperial-age))
(or	(population < up-max-civ)
	(population < 20))
=>
;	(chat-local-to-self "Try to catch up.")
	(set-goal strategy usual)
	(set-goal milunits no))
(defrule
	(goal underattack no)
	(strategic-number sn-current-age <= castlea)
(or	(strategic-number sn-current-age <= fcastlea)
	(up-compare-goal custom-civ-pop < min-number-vills))
	(up-enemy-units-in-town <= 0)
	(up-enemy-buildings-in-town <= 0)
	(players-population any-ally >= max-civ-pop)
(or	(players-current-age any-ally >= imperial-age)
	(players-current-age any-enemy >= imperial-age))
(or	(population < up-max-civ)
	(population < 20))
=>
;	(chat-local-to-self "Try to catch up.2")
	(set-goal strategy usual)
	(set-goal milunits no)); end jump

(defrule
;(or	(up-compare-goal position-goal != pocket); was only fort
;(or	(nor	(map-type arena)
;		(map-type fortress))
;(or	(and	(building-type-count-total gate-class < 2)
;		(building-type-count-total stone-wall-line < 4))
(or	(up-compare-goal strategylocked != no)
(or	(strategic-number sn-current-age >= imperial)
(or	(and	(building-type-count-total gate-class < 2)
		(building-type-count-total stone-wall-line < 4))
	(and	(wall-completed-percentage 2 < 100)
		(wall-completed-percentage 1 < 100))))); test
;)))
=>
	(up-jump-rule 1))
(defrule
	(game-time > 22)
	(game-time < 66)
(or	(and	(up-compare-goal strategy-type <= castle-war)
		(goal feudalvills 0))
	(and	(goal strategy usual)
		(up-compare-goal milunits != no)))
	(up-compare-goal strategy-type2 != water)
(or	(strategic-number sn-current-age <= dfeudal)
	(up-compare-goal strategy-type <= feudal-war))
;	(players-building-count any-enemy <= 4)
=>
;	(chat-local-to-self "Walled?")
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)); end jump - end strat non-michi

(defrule
(or	(up-compare-goal inseln != yes)
(or	(strategic-number sn-current-age >= cimperial)
(or	(up-research-status c: imperial-age >= research-pending)
	(and	(goal defend yes)
		(up-enemy-units-in-town >= 1)))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal targetdistance >= 60)
	(goal underattack no)
	(up-compare-goal milunits != no)
	(up-compare-goal strategy-type2 != water)
	(building-type-count town-center >= 1)
(or	(up-compare-goal navycount g:>= biggestenemynavy)
	(goal position-goal pocket));
(or	(goal defend no)
	(unit-type-count-total transport-ship <= 0))
=>
	(chat-local-to-self "Islands prov.")
	(set-goal strategy usual)
	(set-goal milunits no)
	(set-goal attackprioritychange yes)); end jump

#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-current-age < cimperial)
	(goal underattack no)
(or	(up-compare-goal milunits != no)
	(up-compare-goal strategy != usual))
=>
	(chat-local-to-self "Michi.")
	(set-goal strategy usual)
	(set-goal milunits no)
	(disable-self))
(defrule
	(goal milunits no)
	(goal strategy usual)
(or	(up-enemy-units-in-town > 0)
	(strategic-number sn-current-age >= cimperial))
	(up-compare-goal relocating <= no); test
=>
;	(chat-local-to-self "I'll stop booming now.M")
	(set-goal milunits yes)
	(set-goal attackprioritychange yes))
#end-if

(defrule
(or	(up-compare-goal milunits != no)
	(up-compare-goal strategy != usual))
=>
	(up-jump-rule 6))
(defrule
(or	(and	(up-enemy-units-in-town > 4); change for sling
		(strategic-number sn-military-superiority <= 0))
	(strategic-number sn-current-age >= cimperial))
=>
;	(chat-local-to-self "I'll stop booming now.0")
	(set-goal milunits yes))
(defrule
	(up-compare-goal position-goal == flank)
(or	(and	(or	(strategic-number sn-military-superiority <= -1)
		(or	(players-military-population any-enemy >= 2); test
			(goal defend yes)))
		(up-compare-goal relocating <= no)); test
(or	(up-enemy-units-in-town > 4)
;nn (or	(goal underattack yes)
	(building-type-count-total town-center >= 3)));)
=>
;	(chat-local-to-self "I'll stop booming now.1")
	(set-goal milunits yes))
(defrule
(or	(and	(goal defend yes)
		(up-compare-goal relocating <= no)); test
	(goal underattack yes))
;(or	(gold-amount >= 1200)
;(or	(strategic-number teamsuperiority <= -3)
;(or	(strategic-number sn-military-superiority <= -3)
;(or	(goal researchplan yes)
;	(goal defend yes)))))
=>
;	(chat-local-to-self "I'll stop booming now.2")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(up-compare-goal relocating <= no)
(or	(and	(and	(strategic-number teamsuperiority <= -1); 0; test
			(or	(strategic-number teamsuperiority <= -2)
				(strategic-number sn-military-superiority <= -1)))
		(up-compare-goal cozy <= no))
(or	(population >= max-civ-pop)
(or	(civilian-population >= up-max-civ)
	(up-compare-goal custom-civ-pop >= up-max-civ))))
=>
;	(chat-local-to-self "I'll stop booming now.3")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(building-type-count town-center >= 1);	(up-compare-goal relocating <= no)
	(strategic-number sn-maximum-town-size <= 36)
	(enemy-buildings-in-town)
(or	(up-building-type-in-town c: watch-tower >= 2)
(or	(up-building-type-in-town c: bombard-tower >= 1)
(or	(up-building-type-in-town c: krepost >= 1)
	(up-building-type-in-town c: castle >= 1))))
	(strategic-number sn-military-superiority <= 1)
; tl	(military-population < 15)
=>
;	(chat-local-to-self "I'll stop booming now.4")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes))
(defrule
	(up-compare-goal relocating <= no)
	(town-under-attack)
	(military-population < 9)
(or	(goal underattack yes)
(or	(goal defend yes)
	(and	(up-enemy-units-in-town > 4)
		(up-enemy-units-in-town g:> my-mpop))))
=>
;	(chat-local-to-self "I'll stop booming now.5")
;	(chat-to-player every-computer-ally "I'll stop booming now.")
	(set-goal milunits yes)); end jump

;(defrule
;	(goal position-goal flank)
;	(strategic-number sn-current-age == fcastlea)
;(not	(goal enemy-goal 0))
;(or	(strategic-number sn-military-superiority <= -1)
;	(goal defend yes))
;	(up-compare-const mp-game == 1)
;=>
;	(set-goal enemy-goal rush)
;	(disable-self))

(defrule
	(goal strategy usual)
(nor	(goal milunits yes)
	(goal milunits no))
=>
	(chat-to-player my-player-number "Debugging milunits goal.")
	(set-goal milunits yes)
	(up-jump-rule 4))
(defrule
	(goal strategy castledrop)
(nor	(goal milunits castledrop)
	(goal milunits yes))
=>
	(chat-to-player my-player-number "Debugging milunits goal.2")
	(set-goal milunits yes)
	(up-jump-rule 3))
(defrule
	(goal strategy sling)
(nor	(goal milunits no)
	(goal milunits yes))
=>
	(chat-to-player my-player-number "Debugging milunits goal.3")
	(set-goal milunits yes)
	(up-jump-rule 2))
(defrule
	(goal strategy stonewall)
(nor	(goal milunits stonewall)
	(goal milunits no))
=>
	(chat-to-player my-player-number "Debugging milunits goal.4")
	(set-goal strategy usual)
	(set-goal milunits yes)
	(up-jump-rule 1))
(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy != castledrop)
	(up-compare-goal strategy != sling)
	(up-compare-goal strategy != stonewall)
	(up-compare-goal strategy != fast-imp)
	(up-compare-goal milunits g:!= strategy)
=>
	(chat-to-player my-player-number "Debugging milunits goal.5")
	(up-modify-goal milunits g:= strategy))
;	(set-goal milunits yes)
;;	(set-goal attacking no)
;	(set-goal strategy usual)
;	(set-goal attackprioritychange yes))



#load-if-not-defined WONDER-RACE
#load-if-not-defined REGICIDE
#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined BLACK-FOREST-MAP
(defrule; hm
(or	(game-time >= 67)
(or	(goal nomaden yes); test
(or	(and	(up-compare-goal position-goal == flank)
		(and	(up-compare-goal targetdistance >= 126); test
			(strategic-number teambalance >= 0)))
(or	(and	(up-compare-goal targetdistance >= 144); 150 ; test
		(strategic-number teambalance >= 0))
	(goal cozy yes)))))
=>
	(up-jump-rule 7))
(defrule
(or	(not	(player-in-game any-ally))
(or	(game-time <= 55)
(or	(or	(building-type-count-total gate-class >= 2)
		(building-type-count-total stone-wall-line >= 4))
	(or	(wall-completed-percentage 2 >= 100)
		(wall-completed-percentage 1 >= 100))))); test
=>
	(up-jump-rule 6))
(defrule
	(true)
=>
	(up-modify-goal temporary-goal s:= sn-focus-player-number))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal map land)
	(up-allied-goal any-computer-ally comsystem == 3453)
=>
	(up-find-player ally find-closest alliedplayer)
	(up-modify-sn sn-focus-player-number g:= alliedplayer)
	(disable-self))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal map land)
(or	(not	(up-allied-goal focus-player comsystem == 3453))
	(and	(goal position-goal pocket)
		(not	(up-allied-goal focus-player position-goal == flank))))
	(up-compare-goal alliedplayer >= 1)
=>
	(up-find-player ally find-closest alliedplayer)
	(up-find-next-player ally find-closest alliedplayer)
	(up-modify-sn sn-focus-player-number g:= alliedplayer)
	(disable-self))
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal strategylocked no)
	(up-allied-goal focus-player comsystem == 3453)
	(up-allied-goal focus-player aggressivestrat == 24)
	(up-compare-goal alliedplayer >= 1)
=>
	(set-goal aggressivestrat 1)
	(set-goal alliedplayer 0)
	(chat-local-to-self "Next ally aggressive, searching for aggressive strategy.")
;	(chat-to-allies "Adjusting strategy to ally => Going aggressive.")
)
(defrule
	(up-compare-goal aggressivestrat != 24)
	(up-compare-goal aggressivestrat != 1)
	(goal strategylocked no)
	(goal position-goal pocket)
	(up-allied-goal focus-player comsystem == 3453)
	(up-allied-goal focus-player aggressivestrat != 24)
	(up-allied-goal focus-player aggressivestrat != 1)
	(up-allied-goal focus-player identity == Promi)
	(up-allied-goal focus-player strategy == krush)
	(up-compare-goal alliedplayer >= 1)
=>
	(set-goal aggressivestrat krush); 3
	(set-goal alliedplayer 0)
	(chat-local-to-self "Next ally krushing too.")
;	(chat-to-allies "I see you are krushing too.")
)
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= temporary-goal))
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if


(defrule; update affinities
	(up-compare-goal jump-rule-goal <= 0)
	(up-compare-goal current-rule-id >= 0)
	(up-compare-goal current-rule-id <= 9999)
=>
	(set-goal jump-rule-goal 1)
	(up-get-rule-id next-rule-id)
;	(up-chat-data-to-player my-player-number "jt2: %d" g: next-rule-id)
	(up-jump-direct g: current-rule-id)
;	(up-chat-data-to-player my-player-number "jt: %d" g: current-rule-id)
)
(defrule
	(up-compare-goal strategy != usual)
	(up-compare-goal strategy-affinity <= 0)
=>
	(up-chat-data-to-player my-player-number "Fixing affinity: %d" g: strategy)
;	(chat-to-player my-player-number "Fixing affinity.")
	;(chat-to-player every-ally "Fixing affinity.")
	(set-goal strategy usual)
	(set-goal milunits no); yes
	(set-goal attackprioritychange yes)
	(set-goal strategy-affinity 0))

#load-if-defined SUDDEN-DEATH
(defrule
	(goal milunits no)
=>
;	(chat-local-to-self "SD. milunits: yes.")
	(set-goal milunits yes)
	(disable-self))
#end-if
(defrule
	(goal uugoal yes)
	(building-type-count-total castle <= 0)
	(building-type-count-total krepost <= 0)
	(cc-players-unit-type-count 0 stone-mine <= 0)
	(up-gaia-type-count c: stone <= 0); tbs
	(up-compare-goal total-stone-amount <= 200)
	(up-compare-goal total-stone-amount < castle-stone)
	(commodity-buying-price stone >= 400)
	(up-compare-goal tradeunits < 32)
	(building-type-count-total feitoria <= 0); 1
	(goal palagoal no)
	(goal champgoal no)
	(goal cavagoal no)
=>
	(set-goal temporary-goal9 7687645))
(defrule
	(goal temporary-goal9 7687645)
	(up-compare-const pala-available == 1)
(or	(up-compare-const champ-available != 1)
	(up-compare-const krush-affinity >= maa-var-affinity))
=>
	(set-goal uugoal no)
	(set-goal palagoal yes)
	(up-jump-rule 1))
(defrule
	(goal temporary-goal9 7687645)
	(up-compare-const champ-available == 1)
=>
	(set-goal uugoal no)
	(set-goal champgoal yes)); end jump

(defrule
	(up-compare-goal strategy-type != dark-war)
	(goal strategy drush)
	(game-time > 2)
=>
;	(chat-local-to-self "Preparing to fight in the dark-age.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type dark-war))
(defrule
	(up-compare-goal strategy-type != feudal-war)
(or	(goal strategy sling);
(or	(goal strategy grush)
(or	(goal strategy r-flush)
(or	(goal strategy s-flush)
	(and	(goal strategy usual)
		(up-compare-goal enemy-goal == flush))))));
	(game-time > 2)
=>
;	(chat-local-to-self "Preparing to fight in the feudal-age.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type feudal-war))
(defrule
	(up-compare-goal strategy-type != feudal-war)
	(goal strategy trush)
	(game-time > 2)
=>
;	(chat-local-to-self "Preparing to fight in the feudal-age.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type feudal-war))
(defrule
	(up-compare-goal strategy-type != castle-war)
(or	(goal strategy krush)
(or	(goal strategy ca-rush)
	(goal strategy a-rush)))
	(game-time > 2)
=>
;	(chat-local-to-self "Preparing to fight in the castle-age.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type castle-war))
(defrule
	(up-compare-goal strategy-type != imperial-war)
;(or	(goal strategy sling)
(or	(goal strategy fast-imp)
(or	(goal strategy stonewall)
(or	(and	(goal strategy usual)
		(up-compare-goal enemy-goal != flush))
	(goal strategy castledrop))));)
	(game-time > 2)
=>
;	(chat-local-to-self "Preparing to fight in the imperial-age.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type imperial-war))
#load-if-not-defined SUDDEN-DEATH
(defrule
(or	(goal position-goal flank)
	(up-compare-goal targetdistance < 126))
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 1 < 100)
	(goal islands no)
	(building-type-count stone-wall-line < 4)
	(building-type-count palisade-wall < 20)
	(building-type-count gate < 2)
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal strategy-type >= castle-war)
	(up-resource-amount amount-feudal-town-center >= 1)
	(civ-selected cumans);
	(strategic-number sn-current-age <= dark)
	(building-type-count-total town-center == 1)
	(game-time >= 67)
=>
	(set-goal feudalvills -1)
	(up-modify-goal strategy-type c:min feudal-war)); end jump
#end-if
(defrule
	(up-compare-goal aggressivestrat != 24)
(or	(up-compare-goal strategy-type <= castle-war)
	(goal strategy stonewall))
	(game-time > 2)
=>
	(set-goal aggressivestrat 24))
(defrule
	(up-compare-goal aggressivestrat == 24)
(nor	(up-compare-goal strategy-type <= castle-war)
	(goal strategy stonewall))
	(game-time > 2)
=>
	(set-goal aggressivestrat 0))
(defrule
	(up-compare-goal strategy-type2 != land)
	(up-compare-goal strategy != grush)
	(game-time > 2)
=>
;	(chat-local-to-self "Land-strategy.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type2 land))
(defrule
	(up-compare-goal strategy-type2 != water)
	(up-compare-goal strategy == grush)
	(game-time > 2)
=>
;	(chat-local-to-self "Water-strategy.")
	(set-goal attackprioritychange yes)
	(set-goal strategy-type2 water))
	
;Decide who walls

(defrule
	(true)
=>
	(set-goal walling-player no)
	(disable-self)
)
(defrule
	(up-compare-const CENTER-WALL == 1)
	(game-time < 600)
=>
	(set-goal temporary-goal 180)
	(up-get-fact player-number 0 temporary-goal2)
	(up-modify-goal temporary-goal2 c:* 2)
	(up-modify-goal temporary-goal g:+ temporary-goal2) ;this sequence of goals makes sure that each player does not query this at the same time
	(up-get-fact game-time 0 temporary-goal3)
)
	
(defrule
	(up-compare-const CENTER-WALL == 1)
	(game-time < 595)
	(up-compare-goal temporary-goal g:> temporary-goal3)
	(not(up-allied-goal any-ally walling-player == yes))
	(nor(civ-selected gothic)
	(civ-selected cumans))
	(game-time > 5)
=>
	(set-goal walling-player yes)
	(chat-to-player my-player-number "I will wall for the team")
	(disable-self)
)


