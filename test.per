;new line
;常见错误代码及其含义
;ERR8001	没有规则	每个.per文件至少需要一个规则。如果您看到此错误，则未定义规则。
;ERR6002	统治太久了	规则最多只能容纳16行实际代码。如果您有太多的事实或行动，请先看看是否可以删除不必要的事实或行动。
;ERR2011	缺少结尾括号	在进行基于括号的编程（如Lisp和Racket中所示），请务必在继续下一步之前使用开头括号关闭任何内容（即(））。这个错误有两个变体；一个发生在你忘记关闭规则时，另一个发生在其他所有事情上。
;ERR2001	缺少开头括号	这与ERR2011相似，但有一个主要区别：它与ERR2011完全相反。鉴于每个命令、事实和操作都以开头括号开头，因此很少使用此错误。
;ERR2002	关键字缺失	鉴于该语言的用途，此错误有点模糊。这可能意味着你错过了重要的参数。另一个可能是，您错过了启动这一切的令牌（事实或行动的名称）。这取决于。
;ERR2012	常量已经定义	此错误告诉您已重新定义常量（在上一行声明后为常量设置不同的值）。要修复，您只需删除此错误的行即可。此错误还显示了被误用的常量的名称
;ERR2008	缺少箭头	此错误告诉您，规则缺少令牌，而不是将该规则中的事实和操作分开：箭头或=>。要修复它，请转到规则开始的行，并在规则的最后一个事实（条件）后添加箭头。

;在这个语言中，注释通过英文分号表示，注释该行之后的内容
;规则语句的表示为：
(defrule
    (cheats-enabled);括号中为条件
    =>
    (disable-self);括号中为命令
)
;规则会不断被检查，直到disable-self被执行

;类似print的功能表示为：
(defrule
    (wood-amount greater-than 1000)
    =>
    (chat-to-all "I have 1000 wood!")
)
;即可实现到达条件弹出提示

;常数可以这样定义：
(defconst num1 50)
(defrule
    
    (civilian-population < num1)
    (can-train villager)
    =>
    (train villager)
)

;load可以中断本脚本内容，转而去执行别的脚本内容，执行完毕后再继续（最多嵌套10级）
(load "script.exp");需要在同级目录下

;load-random可以在给出的script中按照给定概率读取
(load-random 20"script1" 30"script2" 40"script3" "script4")
;4的概率为10%

;#load-if-defined/#load-if-not-defined/#else/#end-if 为条件性读取，可嵌套50层

;系统定义符号：有些符号在未勾选的时候不会出现。广域符号所有人可见，内域符号可见性取决于用户

;仅执行一次的动作可以这么定义：
(defrule
    (true)
    =>
    (enabled-wall-placement 2)
    (disable-self)
)

;定义随机数：1-100之间的整数
(defrule 
   (true)
   =>
   (generate-random-number 100)
   (disable-self)
)

;any和every的应用
(defrule 
                (players-current-age any-enemy == imperial-age)
                =>
                (chat-to-allies "至少有一個敵人已經進入帝王時代了！")
)

(defrule 
                (players-current-age every-enemy == imperial-age)
                =>
	  (chat-to-allies "所有敵人都已經進入帝王時代了！")
)

;'this-'变量会被之前的百搭参数赋值，例子如下：
(defrule
   (players-civ any-enemy gothic) 
   =>
   (chat-to-player this-any-enemy "我知道你是哥德人！");该rule用完之后该变量便会失效
   (disable-self)
)